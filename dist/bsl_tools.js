(()=>{var G=(p=>(p.FunctionDefinition="Function Definition",p.ConstantDefinition="Constant Definition",p.StructDefinition="Struct Definition",p.FunctionCall="Function Call",p.CondExpression="Cond-Expression",p.CondOption="Cond-Option",p.Symbol="Symbol",p.Literal="Literal Value",p))(G||{});function K(n){return O(n)||R(n)||J(n)}function O(n){return n.type==="Function Definition"}function R(n){return n.type==="Constant Definition"}function J(n){return n.type==="Struct Definition"}function Q(n){return n.type==="Function Call"}function X(n){return n.type==="Cond-Expression"}function Y(n){return n.type==="Symbol"}function ee(n){return n.type==="Literal Value"}function k(n){return n.map(mt).join(`
`)}function mt(n){return K(n)?bt(n):C(n)}function bt(n){if(O(n))return`(define ${T(n.name)} (${n.args.map(T).join(" ")}) ${C(n.body)})`;if(R(n))return`(define ${T(n.name)} ${C(n.value)})`;if(J(n))return`(define-struct ${T(n.binding)} (${n.properties.map(T).join(" ")}))`;console.error("Invalid input to printDefinition")}function C(n){return Q(n)?`(${T(n.name)} ${n.args.map(C).join(" ")})`:X(n)?`(cond ${n.options.map(ne).join(" ")})`:Y(n)?T(n):ee(n)?typeof n.value=="string"&&n.value!=="'()"?`"${n.value}"`:typeof n.value=="boolean"?n.value?"#true":"#false":`${n.value}`:(console.error("Invalid input to printE"),`<${n}>`)}function ne(n){return`[${C(n.condition)} ${C(n.result)}]`}function T(n){return n.symbol}var kt=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{type:"Cond-Option",condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},{type:"Literal Value",value:3}]},result:{type:"Literal Value",value:"isThree"}},{type:"Cond-Option",condition:{type:"Literal Value",value:!1},result:{type:"Literal Value",value:"'()"}}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:{type:"Literal Value",value:42}},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function Be(n,s,t=!1){let a=t?vt:xt;s.innerHTML=n.map(c=>St(c,a)).join(`
`),Tt(s),Ct(s),t||Bt(s)}function St(n,s){return`<ul class="tree ast"><li>${K(n)?At(n,s):H(n,s)}</li></ul>`}function we(n){return typeof n.code=="string"&&(n.code=[n.code]),`
    <div class="${["hole",n.pos?`hole-${n.pos}`:"",n.placeholder==="name"?"hole-name":"",["name+","name*"].includes(n.placeholder)?"hole-names":""].join(" ")}">
      ${n.code.map(t=>`<div class="code">${t}</div>`).join(" ")}
      <div class="placeholder">${n.placeholder}</div>
    </div>
  `}function Ce(n){return typeof n.code=="string"&&(n.code=[n.code]),oe(n.code.join(" "))}function xt(n){return`
    <span>
      <div class="name">${n.production}</div>
      <div>
        ${n.code.map(s=>typeof s=="string"?s:we(s)).join(" ")}
      </div>
    </span>
  `}function oe(n){return n.split(" ").map(s=>s.trim()).filter(s=>s.length>0).join(" ").replaceAll("( ","(").replaceAll(" )",")")}function vt(n){let s=oe(n.code.map(a=>typeof a=="string"?a:Ce(a)).join(" "));return`
    <span data-collapsed="true"
          data-holes="${JSON.stringify(n.code.filter(a=>typeof a!="string").map(a=>Ce(a))).replaceAll('"',"&quot;")}"
          data-quiz="production">
      <div class="name">
         ${n.production}
         <select data-solution="${n.production}"
                 onchange="guessProduction(event)">
            <option>---</option>
            ${Object.values(G).map(a=>`<option value="${a}">${a}</option>`)}
         </select>
         <div class="tip">
            First, select the correct production...
         </div>
      </div>
      <div class="codeblock">
        ${oe(n.code.map(a=>typeof a=="string"?a:we(a)).join(" "))}
        <div class="actualcode">
          ${s.split("").map(a=>`<span class="char"
                   onmouseup="endSelection(event)">${a}</span>`).join("")}
        </div>
        <div class="tip">
           Second, select all subexpressions to expand the node!
        </div>
      </div>
    </span>
  `}function $t(n){let s=n.target,t=s.getAttribute("data-solution"),a=s.parentElement,c=a.parentElement;s.value===t?(a.innerHTML=t,c.removeAttribute("data-wrong"),c.getAttribute("data-holes")==="[]"?(c.setAttribute("data-quiz","done"),c.removeAttribute("data-collapsed")):c.setAttribute("data-quiz","holes")):c.setAttribute("data-wrong","true")}window.guessProduction=$t;function Lt(n){let t=n.target.parentElement,a=D([t],"../..")[0];if(a.getAttribute("data-quiz")!=="holes")return;let c=window.getSelection();if(!c)return;let u=Array.from(t.children).filter(p=>c.containsNode(p,!0)),f=u.map(p=>p.innerHTML).join(""),h=JSON.parse(a.getAttribute("data-holes").replaceAll("&quot;",'"'));if(!(!h.length||h.length<1)){if(h.includes(f)){h=h.filter(m=>m!==f),u.map(m=>m.classList.add("correct-selection-middle"));let p=u[0];p.classList.remove("correct-selection-middle"),p.classList.remove("selection-start"),p.classList.add("correct-selection-start");let v=u[u.length-1];v.classList.remove("correct-selection-middle"),v.classList.remove("selection-end"),v.classList.add("correct-selection-end"),h.length<=0?(a.removeAttribute("data-holes"),a.setAttribute("data-quiz","done"),window.setTimeout(()=>a.removeAttribute("data-collapsed"),1e3)):a.setAttribute("data-holes",JSON.stringify(h).replaceAll('"',"&quot;"))}else{u.map(m=>m.classList.add("wrong-selection-middle"));let p=u[0];p.classList.remove("wrong-selection-middle"),p.classList.remove("selection-start"),p.classList.add("wrong-selection-start");let v=u[u.length-1];v.classList.remove("wrong-selection-middle"),v.classList.remove("selection-end"),v.classList.add("wrong-selection-end"),window.setTimeout(()=>{u.map(m=>m.classList.remove("wrong-selection-middle")),p.classList.remove("wrong-selection-start"),v.classList.remove("wrong-selection-end")},1e3)}c.empty()}}window.endSelection=Lt;function At(n,s){if(O(n)){let t={production:n.type,code:["( define (",{pos:1,code:k([n.name]),placeholder:"name"},{pos:2,code:n.args.map(T),placeholder:"name+"},") ",{pos:3,code:k([n.body]),placeholder:"e"},")"]};return`
      ${s(t)}
      <ul>
        <li class="child-1">${F(n.name,s)}</li>
        ${n.args.map(a=>`<li class="child-2">${F(a,s)}</li>`).join("")}
        <li class="child-3">${H(n.body,s)}</li>
      </ul>`}else if(R(n)){let t={production:n.type,code:["( define ",{pos:1,code:k([n.name]),placeholder:"name"},{pos:2,code:k([n.value]),placeholder:"e"},")"]};return`
      ${s(t)}
      <ul>
        <li class="child-1">${F(n.name,s)}</li>
        <li class="child-2">${H(n.value,s)}</li>
      </ul>`}else if(J(n)){let t={production:n.type,code:["( define-struct ",{pos:1,code:k([n.binding]),placeholder:"name"},"(",{pos:2,code:n.properties.map(T),placeholder:"name*"},") )"]};return`
      ${s(t)}
      <ul>
        <li class="child-1">${F(n.binding,s)}</li>
        ${n.properties.map(a=>`<li class="child-2">${F(a,s)}</li>`).join("")}
      </ul>`}else console.error("Invalid input to printDefinition")}function H(n,s){if(Q(n)){let t={production:n.type,code:["( ",{pos:1,code:k([n.name]),placeholder:"name"}," ",{pos:2,code:n.args.map(C),placeholder:"e*"},")"]};return`
      ${s(t)}
      <ul>
        <li class="child-1">${F(n.name,s)}</li>
        ${n.args.map(a=>`<li class="child-2">${H(a,s)}</li>`).join("")}
      </ul>`}else if(X(n)){let t={production:n.type,code:["( cond ",{pos:2,code:n.options.map(ne),placeholder:"[ e e ]+"},")"]};return`
      ${s(t)}
      <ul>
        ${n.options.map(a=>`<li class="child-2">${Et(a,s)}</li>`).join(" ")}
      </ul>`}else{if(Y(n))return F(n,s);if(ee(n)){let t={production:n.type,code:[C(n)]};return s(t)}else return console.error("Invalid input to treeE"),console.error(n),`
      <span>
        <div class="name">Invalid input to treeE</div>
        <div>${n}</div>
      </span>
    `}}function Et(n,s){let t={production:n.type,code:["[",{pos:1,code:C(n.condition),placeholder:"e"}," ",{pos:2,code:C(n.result),placeholder:"e"},"]"]};return`
    ${s(t)}
    <ul>
      <li class="child-1">${H(n.condition,s)}</li>
      <li class="child-2">${H(n.result,s)}</li>
    </ul>
  `}function F(n,s){let t={production:n.type,code:[T(n)]};return s(t)}function Tt(n){re(n,"hole-1","child-1"),re(n,"hole-2","child-2"),re(n,"hole-3","child-3")}function re(n,s,t){Array.from(n.getElementsByClassName(s)).map(a=>{let c=a,u=.5*(c.getBoundingClientRect().x+c.getBoundingClientRect().right);if(u==0)return;let f=D([c],"../../+")[0];Array.from(f.children).filter(h=>h.classList.contains(t)).map(h=>{let p=h,v=.5*(p.getBoundingClientRect().x+p.getBoundingClientRect().right),m=u-v,g="";m<0?g+=`
          --connector-left: auto;
          --connector-right: 50%;
          --connector-border-left-style: solid;
          --connector-border-right-style: none;`:g+=`
          --connector-left: 50%;
          --connector-right: auto;
          --connector-border-left-style: none;
          --connector-border-right-style: solid;`,g+=`--connector-width: ${Math.abs(m)+1}px;`,p.style.cssText=g})})}function Ct(n){Array.from(n.getElementsByClassName("name")).map(s=>{let t=D([s],"+/.hole/.code");if(t.length==0)return;let a=D([s],"../+/li/span/.name/+");if(t.length!=a.length){console.error("Error: More or less children than code figments",s,t,a);return}for(let c=0;c<t.length;c++){let u=t[c],f=a[c],h=u.getBoundingClientRect(),p=f.getBoundingClientRect();u.style.cssText=`
        --translate-x: ${(p.x+p.right)/2-(h.x+h.right)/2}px;
        --translate-y: ${p.y-h.y}px;
      `}})}function D(n,s){let t=s.split("/"),a=t.shift();if(a=="")return n;let c=t.join("/");if(a==".."){let u=n.map(f=>f.parentElement);return u.every(f=>f)?D(u,c):(console.error(`Error traversing ${s}: Missing parentElement`,n),[])}else if(a=="+"){let u=n.map(f=>f.nextElementSibling);return u.every(f=>f)?D(u,c):(console.error(`Error traversing ${s}: Missing nextElementSibling`,n),[])}else if(a.startsWith(".")){let u=a.slice(1),f=n.flatMap(h=>Array.from(h.children).filter(p=>p.classList.contains(u)));return D(f,c)}else{let u=n.flatMap(f=>Array.from(f.children).filter(h=>h.tagName==a.toUpperCase()));return D(u,c)}}function Bt(n){Array.from(n.getElementsByTagName("span")).map(s=>{s.onclick=()=>{let t=s;if(t.getAttribute("data-collapsed"))t.removeAttribute("data-collapsed");else{t.setAttribute("data-collapsed","true");let a=t.nextElementSibling;if(!a)return;Array.from(a.getElementsByTagName("span")).map(c=>{c.setAttribute("data-collapsed","true")})}}})}function ie(n,s,t){return t=t||" ",n.length>s?n:(s-=n.length,t+=t.repeat(s),n+t.slice(0,s))}var _=class extends Error{constructor(t,a,c,u){super();this.message=t,this.expected=a,this.found=c,this.location=u,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,_.prototype):this.__proto__=_.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,_)}static buildMessage(t,a){function c(m){return m.charCodeAt(0).toString(16).toUpperCase()}function u(m){return m.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,g=>"\\x0"+c(g)).replace(/[\x10-\x1F\x7F-\x9F]/g,g=>"\\x"+c(g))}function f(m){return m.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,g=>"\\x0"+c(g)).replace(/[\x10-\x1F\x7F-\x9F]/g,g=>"\\x"+c(g))}function h(m){switch(m.type){case"literal":return'"'+u(m.text)+'"';case"class":let g=m.parts.map($=>Array.isArray($)?f($[0])+"-"+f($[1]):f($));return"["+(m.inverted?"^":"")+g+"]";case"any":return"any character";case"end":return"end of input";case"other":return m.description}}function p(m){let g=m.map(h),$,z;if(g.sort(),g.length>0){for($=1,z=1;$<g.length;$++)g[$-1]!==g[$]&&(g[z]=g[$],z++);g.length=z}switch(g.length){case 1:return g[0];case 2:return g[0]+" or "+g[1];default:return g.slice(0,-1).join(", ")+", or "+g[g.length-1]}}function v(m){return m?'"'+u(m)+'"':"end of input"}return"Expected "+p(t)+" but "+v(a)+" found."}format(t){let a="Error: "+this.message;if(this.location){let c=null,u;for(u=0;u<t.length;u++)if(t[u].source===this.location.source){c=t[u].text.split(/\r\n|\n|\r/g);break}let f=this.location.start,h=this.location.source+":"+f.line+":"+f.column;if(c){let p=this.location.end,v=ie("",f.line.toString().length," "),m=c[f.line-1],g=f.line===p.line?p.column:m.length+1;a+=`
 --> `+h+`
`+v+` |
`+f.line+" | "+m+`
`+v+" | "+ie("",f.column-1," ")+ie("",g-f.column,"^")}else a+=`
 at `+h}return a}};function Pt(n,s){s=s!==void 0?s:{};let t={},a=s.grammarSource,c={Program:Le},u=Le,f=function(e){return e},h=/^[\t \n \r]/,p=W(["	"," ",`
`," ","\r"],!1,!1),v=function(e){return e},m="(define-struct",g=E("(define-struct",!1),$="(",z=E("(",!1),q=")",N=E(")",!1),De=function(e,o){return{type:"Struct Definition",binding:e,properties:o}},Z="(define",ae=E("(define",!1),qe=function(e,o,i){return{type:"Function Definition",name:e,args:o,body:i}},Ne=function(e,o){return{type:"Constant Definition",name:e,value:o}},Me=function(e){return e},le="(cond",Ie=E("(cond",!1),ke=function(e){return{type:"Cond-Expression",options:e}},Fe="[",He=E("[",!1),je="]",Oe=E("]",!1),Re=function(e,o){return{type:"Cond-Option",condition:e,result:o}},Je=function(e,o){return{type:"Function Call",name:e,args:o}},ce=/^[A-Za-z+-\/*=]/,pe=W([["A","Z"],["a","z"],["+","/"],"*","="],!1,!1),Ze=function(e){return{type:"Symbol",symbol:e.join("")}},Ve=function(e){return{type:"Literal Value",value:e}},ue=/^[0-9]/,de=W([["0","9"]],!1,!1),Ue=function(){return parseInt(nt(),10)},fe="#true",We=E("#true",!1),ge="#false",Ge=E("#false",!1),Ke=function(e){return e==="#true"},ye="'()",Qe=E("'()",!1),Xe=function(){return"'()"},me='"',be=E('"',!1),he=/^[A-Za-z]/,Se=W([["A","Z"],["a","z"]],!1,!1),Ye=function(e){return e.join("")},et=xe("whitespace"),tt=function(){},r=0,S=0,V=[{line:1,column:1}],B=0,te=[],y=0,U;if(s.startRule!==void 0){if(!(s.startRule in c))throw new Error(`Can't start parsing from rule "`+s.startRule+'".');u=c[s.startRule]}function nt(){return n.substring(S,r)}function qt(){return j(S,r)}function Nt(e,o){throw o=o!==void 0?o:j(S,r),$e([xe(e)],n.substring(S,r),o)}function Mt(e,o){throw o=o!==void 0?o:j(S,r),ot(e,o)}function E(e,o){return{type:"literal",text:e,ignoreCase:o}}function W(e,o,i){return{type:"class",parts:e,inverted:o,ignoreCase:i}}function It(){return{type:"any"}}function rt(){return{type:"end"}}function xe(e){return{type:"other",description:e}}function ve(e){let o=V[e],i;if(o)return o;for(i=e-1;!V[i];)i--;for(o=V[i],o={line:o.line,column:o.column};i<e;)n.charCodeAt(i)===10?(o.line++,o.column=1):o.column++,i++;return V[e]=o,o}function j(e,o){let i=ve(e),l=ve(o);return{source:a,start:{offset:e,line:i.line,column:i.column},end:{offset:o,line:l.line,column:l.column}}}function b(e){r<B||(r>B&&(B=r,te=[]),te.push(e))}function ot(e,o){return new _(e,[],"",o)}function $e(e,o,i){return new _(_.buildMessage(e,o),e,o,i)}function Le(){let e,o,i;if(e=r,o=[],i=Ae(),i!==t)for(;i!==t;)o.push(i),i=Ae();else o=t;return o!==t&&(S=e,o=f(o)),e=o,e}function Ae(){let e,o,i,l;if(e=r,o=it(),o===t&&(o=M()),o!==t){if(i=[],h.test(n.charAt(r))?(l=n.charAt(r),r++):(l=t,y===0&&b(p)),l!==t)for(;l!==t;)i.push(l),h.test(n.charAt(r))?(l=n.charAt(r),r++):(l=t,y===0&&b(p));else i=t;i!==t?(S=e,o=f(o),e=o):(r=e,e=t)}else r=e,e=t;return e}function it(){let e,o,i;return e=r,o=L(),o!==t?(i=st(),i===t&&(i=at(),i===t&&(i=lt())),i!==t?(S=e,o=v(i),e=o):(r=e,e=t)):(r=e,e=t),e}function st(){let e,o,i,l,d,A,x,w,I;if(e=r,n.substr(r,14)===m?(o=m,r+=14):(o=t,y===0&&b(g)),o!==t)if(i=P(),i!==t)if(l=L(),l!==t)if(n.charCodeAt(r)===40?(d=$,r++):(d=t,y===0&&b(z)),d!==t){if(A=[],x=P(),x!==t)for(;x!==t;)A.push(x),x=P();else A=t;A!==t?(n.charCodeAt(r)===41?(x=q,r++):(x=t,y===0&&b(N)),x!==t?(w=L(),w!==t?(n.charCodeAt(r)===41?(I=q,r++):(I=t,y===0&&b(N)),I!==t?(S=e,o=De(i,A),e=o):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)}else r=e,e=t;else r=e,e=t;else r=e,e=t;else r=e,e=t;return e}function at(){let e,o,i,l,d,A,x,w,I;if(e=r,n.substr(r,7)===Z?(o=Z,r+=7):(o=t,y===0&&b(ae)),o!==t)if(i=P(),i!==t)if(l=L(),l!==t)if(n.charCodeAt(r)===40?(d=$,r++):(d=t,y===0&&b(z)),d!==t){if(A=[],x=P(),x!==t)for(;x!==t;)A.push(x),x=P();else A=t;A!==t?(n.charCodeAt(r)===41?(x=q,r++):(x=t,y===0&&b(N)),x!==t?(w=M(),w!==t?(n.charCodeAt(r)===41?(I=q,r++):(I=t,y===0&&b(N)),I!==t?(S=e,o=qe(i,A,w),e=o):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)}else r=e,e=t;else r=e,e=t;else r=e,e=t;else r=e,e=t;return e}function lt(){let e,o,i,l,d;return e=r,n.substr(r,7)===Z?(o=Z,r+=7):(o=t,y===0&&b(ae)),o!==t?(i=P(),i!==t?(l=M(),l!==t?(n.charCodeAt(r)===41?(d=q,r++):(d=t,y===0&&b(N)),d!==t?(S=e,o=Ne(i,l),e=o):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t),e}function M(){let e,o,i;return e=r,o=L(),o!==t?(i=ct(),i===t&&(i=pt(),i===t&&(i=P(),i===t&&(i=ut()))),i!==t?(S=e,o=Me(i),e=o):(r=e,e=t)):(r=e,e=t),e}function ct(){let e,o,i,l,d;if(e=r,n.substr(r,5)===le?(o=le,r+=5):(o=t,y===0&&b(Ie)),o!==t){if(i=[],l=Ee(),l!==t)for(;l!==t;)i.push(l),l=Ee();else i=t;i!==t?(l=L(),l!==t?(n.charCodeAt(r)===41?(d=q,r++):(d=t,y===0&&b(N)),d!==t?(S=e,o=ke(i),e=o):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)}else r=e,e=t;return e}function Ee(){let e,o,i,l,d,A,x,w;return e=r,o=L(),o!==t?(n.charCodeAt(r)===91?(i=Fe,r++):(i=t,y===0&&b(He)),i!==t?(l=L(),l!==t?(d=M(),d!==t?(A=L(),A!==t?(x=M(),x!==t?(n.charCodeAt(r)===93?(w=je,r++):(w=t,y===0&&b(Oe)),w!==t?(S=e,o=Re(d,x),e=o):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t),e}function pt(){let e,o,i,l,d;if(e=r,n.charCodeAt(r)===40?(o=$,r++):(o=t,y===0&&b(z)),o!==t)if(i=P(),i!==t){for(l=[],d=M();d!==t;)l.push(d),d=M();l!==t?(n.charCodeAt(r)===41?(d=q,r++):(d=t,y===0&&b(N)),d!==t?(S=e,o=Je(i,l),e=o):(r=e,e=t)):(r=e,e=t)}else r=e,e=t;else r=e,e=t;return e}function P(){let e,o,i,l;if(e=r,o=L(),o!==t){if(i=[],ce.test(n.charAt(r))?(l=n.charAt(r),r++):(l=t,y===0&&b(pe)),l!==t)for(;l!==t;)i.push(l),ce.test(n.charAt(r))?(l=n.charAt(r),r++):(l=t,y===0&&b(pe));else i=t;i!==t?(S=e,o=Ze(i),e=o):(r=e,e=t)}else r=e,e=t;return e}function ut(){let e,o;return e=r,o=dt(),o===t&&(o=ft(),o===t&&(o=gt(),o===t&&(o=yt()))),o!==t&&(S=e,o=Ve(o)),e=o,e}function dt(){let e,o,i,l;if(e=r,o=L(),o!==t){if(i=[],ue.test(n.charAt(r))?(l=n.charAt(r),r++):(l=t,y===0&&b(de)),l!==t)for(;l!==t;)i.push(l),ue.test(n.charAt(r))?(l=n.charAt(r),r++):(l=t,y===0&&b(de));else i=t;i!==t?(S=e,o=Ue(),e=o):(r=e,e=t)}else r=e,e=t;return e}function ft(){let e,o,i;return e=r,o=L(),o!==t?(n.substr(r,5)===fe?(i=fe,r+=5):(i=t,y===0&&b(We)),i===t&&(n.substr(r,6)===ge?(i=ge,r+=6):(i=t,y===0&&b(Ge))),i!==t?(S=e,o=Ke(i),e=o):(r=e,e=t)):(r=e,e=t),e}function gt(){let e,o,i;return e=r,o=L(),o!==t?(n.substr(r,3)===ye?(i=ye,r+=3):(i=t,y===0&&b(Qe)),i!==t?(S=e,o=Xe(),e=o):(r=e,e=t)):(r=e,e=t),e}function yt(){let e,o,i,l,d;if(e=r,o=L(),o!==t)if(n.charCodeAt(r)===34?(i=me,r++):(i=t,y===0&&b(be)),i!==t){if(l=[],he.test(n.charAt(r))?(d=n.charAt(r),r++):(d=t,y===0&&b(Se)),d!==t)for(;d!==t;)l.push(d),he.test(n.charAt(r))?(d=n.charAt(r),r++):(d=t,y===0&&b(Se));else l=t;l!==t?(n.charCodeAt(r)===34?(d=me,r++):(d=t,y===0&&b(be)),d!==t?(S=e,o=Ye(l),e=o):(r=e,e=t)):(r=e,e=t)}else r=e,e=t;else r=e,e=t;return e}function L(){let e,o,i;for(y++,e=r,o=[],h.test(n.charAt(r))?(i=n.charAt(r),r++):(i=t,y===0&&b(p));i!==t;)o.push(i),h.test(n.charAt(r))?(i=n.charAt(r),r++):(i=t,y===0&&b(p));return o!==t&&(S=e,o=tt()),e=o,y--,e===t&&(o=t,y===0&&b(et)),e}if(U=u(),U!==t&&r===n.length)return U;throw U!==t&&r<n.length&&b(rt()),$e(te,B<n.length?n.charAt(B):null,B<n.length?j(B,B+1):j(B,B))}var Pe=Pt;var _e=`.tree {
  --branch-color: #666;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: .5em 0;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin: 0 .2em .5em;
    padding: .2em .5em;
    position: relative;
}

/* ########### custom AST node  styles ######## */
.tree {
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
}
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background); /* racket azure */
}
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: small;
  text-align: left;
  margin-bottom: 0.5em;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    height: .5em;
    left: 50%;
    position: absolute;
    top: calc(-.5em - 2px);
}
/* horizontal part + part pointing to corresp. hole
   -> width etc will be set via JavaScript
      Javascript cannot style ::before elements directly
      (since they are not part of the DOM),
      the variables will be set on the parent li element */
.tree li::before {
  box-sizing: border-box;
  content: "";
  position: absolute;
  height: .5em; /* overridden for some */
  top: -.5em;
  left: var(--connector-left, auto);
  right: var(--connector-right, auto);
  width: var(--connector-width, 100%);

  border: solid 2px var(--branch-color);
  border-top-style: none;
  border-left-style: var(--connector-border-left-style, none);
  border-right-style: var(--connector-border-right-style, none);
}

/* prevent up to 3 connectors from crossing */
.tree li.child-1::before {
  height: .3em;
}
.tree li.child-1 > span::before {
  top: calc(-.7em - 2px);
  height: 0.7em;
}

.tree li.child-3::before {
  height: .7em;
}
.tree li.child-3 > span::before {
  top: calc(-.3em - 2px);
  height: 0.3em;
}

/* ####### highlight way back up from a node ###### */
.tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
}

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree span:hover {
  cursor: pointer;
}

/* smooth transition between hiding and showing */
@keyframes hide-delayed {
  99% {
    visibility: visible;
  }
  100% {
    visibility: hidden;
  }
}
.tree span[data-collapsed] ~ ul {
  opacity: 0%;
  visibility: hidden;
  animation: hide-delayed 1s;
  transition: opacity 0.5s ease-out 0.5s;
}
.tree ul {
  opacity: 100%;
  transition: opacity 1s ease-out;
}

/* ######### holes ########## */
.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}
/* show/hide parts/holes  and float them into place */
.tree .code, .tree .placeholder {
  display: inline-block;
}
.tree .code {
  /* color: transparent; */
  transform: translate(var(--translate-x,0), var(--translate-y,0));
  transition: transform 1s ease-out;
}
.tree span[data-collapsed] .code {
  color: var(--text-grey);
  transform: translate(0,0);
}
.tree .placeholder {
  color: var(--text-grey);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  text-align: center;
}
.tree span[data-collapsed] .placeholder {
  display: none;
}

.tree .hole-name {
  min-width: 2em;
}
.tree .hole-names {
  min-width: 2.5em;
}
`;var ze=`/* modifications for tree quiz */
bsl-tree[quiz="true"] .tree {
  --border-pending: orange;
  --tooltip-bg: var(--hole-yellow);
  --tooltip-border: var(--branch-color);
  --wrong-border: darkred;
  --correct-border: darkgreen;
  --selection-tentative: yellow;
  --selection-border: var(--branch-color);
  --selection-correct: green;
  --selection-wrong: red;
}
bsl-tree[quiz="true"] .tree {
  margin-top: 4em;
}
bsl-tree[quiz="true"] .tree span {
  cursor: auto;
  border: 1px solid var(--correct-border);
}
bsl-tree[quiz="true"] .tree span[data-collapsed="true"] {
  border: 1px solid var(--border-pending);
}
bsl-tree[quiz="true"] .tree span[data-wrong="true"] {
  border: 1px solid var(--wrong-border);
}

/* style production and select */
bsl-tree[quiz="true"] .tree .name {
  font-size: inherit;
}

bsl-tree[quiz="true"] .tree .name {
  position: relative;
  display: block;
  text-align: left;
}

bsl-tree[quiz="true"] .tree .name > select {
  position: absolute;
  display: inline-block;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

/* hide name tooltip by default */
bsl-tree[quiz="true"] .tree .tip {
  display: none;
}

/* display tooltip over root */
bsl-tree[quiz="true"] .tree > li > span[data-quiz="production"] .name > .tip,
bsl-tree[quiz="true"] .tree > li > span[data-quiz="holes"] .codeblock > .tip {
  display: block;
  position: absolute;
  left: 80%;
  bottom: 150%;
  width: 18em;
  background-color: var(--tooltip-bg);
  border: 1px solid var(--tooltip-border);
  padding: .5em;
}
bsl-tree[quiz="true"] .tree > li > span[data-quiz="production"] .name > .tip::after,
bsl-tree[quiz="true"] .tree > li > span[data-quiz="holes"] .codeblock > .tip::after {
  content: "";
  position: absolute;
  width: 1em;
  height: 1em;
  left: 0.5em;
  bottom: calc(-0.5em - 1px);
  transform: rotate(45deg);
  background-color: var(--tooltip-bg);
  border-right: 1px solid var(--tooltip-border);
  border-bottom: 1px solid var(--tooltip-border);
}

/* showing/hiding code without holes */
bsl-tree[quiz="true"] .tree .codeblock {
  position: relative;
  display: block;
}
bsl-tree[quiz="true"] .tree .actualcode {
  display: none;
}
bsl-tree[quiz="true"] .tree span[data-quiz="production"] .actualcode,
bsl-tree[quiz="true"] .tree span[data-quiz="holes"] .actualcode {
  position: absolute;
  display: block;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: var(--node-background);
}
bsl-tree[quiz="true"] .tree .char {
  display: inline;
  margin: 0;
  border: none;
  padding: 0;
  border-radius: 0;
  background-color: transparent;
  transition: background-color 1s ease-out;
}
bsl-tree[quiz="true"] .tree .char::before {
  display: none;
}
bsl-tree[quiz="true"] .tree .selection-start {
  background-color: var(--selection-tentative);
  border: 1px solid var(--selection-border);
  border-right: none;
}
bsl-tree[quiz="true"] .tree .selection-start ~ span {
  background-color: var(--selection-tentative);
  border-top: 1px solid var(--selection-border);
  border-bottom: 1px solid var(--selection-border);
}

bsl-tree[quiz="true"] .tree .selection-end {
  border: 1px solid var(--selection-border);
  border-left: none;
}
bsl-tree[quiz="true"] .tree .selection-end ~ span {
  border: none;
  background-color: transparent;
}

bsl-tree[quiz="true"] .tree .correct-selection-start,
bsl-tree[quiz="true"] .tree .correct-selection-middle,
bsl-tree[quiz="true"] .tree .correct-selection-end {
  user-select: none;
  background-color: var(--selection-correct);
  border: 1px solid var(--selection-border);
}
bsl-tree[quiz="true"] .tree .wrong-selection-start,
bsl-tree[quiz="true"] .tree .wrong-selection-middle,
bsl-tree[quiz="true"] .tree .wrong-selection-end {
  user-select: none;
  background-color: var(--selection-wrong);
  border: 1px solid var(--selection-border);
}

bsl-tree[quiz="true"] .tree .correct-selection-start,
bsl-tree[quiz="true"] .tree .correct-selection-middle,
bsl-tree[quiz="true"] .tree .wrong-selection-start,
bsl-tree[quiz="true"] .tree .wrong-selection-middle, {
  border-right: none;
}

bsl-tree[quiz="true"] .tree .correct-selection-end,
bsl-tree[quiz="true"] .tree .correct-selection-middle,
bsl-tree[quiz="true"] .tree .wrong-selection-end,
bsl-tree[quiz="true"] .tree .wrong-selection-middle, {
  border-left: none;
}
`;var se=document.createElement("style");se.innerHTML=_e;se.innerHTML+=ze;document.getElementsByTagName("head")[0].appendChild(se);function Dt(){Array.from(document.getElementsByTagName("bsl-tree")).map(n=>{try{let s=Pe(n.innerHTML),t=!!n.getAttribute("quiz");Be(s,n,t)}catch(s){n.innerHTML+=`<br>${s}`}})}window.onload=()=>{Dt()};})();
//# sourceMappingURL=data:application/json;base64,
