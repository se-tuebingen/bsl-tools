(()=>{var Z=(S=>(S.FunctionDefinition="Function Definition",S.ConstantDefinition="Constant Definition",S.StructDefinition="Struct Definition",S.FunctionCall="Function Call",S.CondExpression="Cond-Expression",S.CondOption="Cond-Option",S.Symbol="Symbol",S.Literal="Literal Value",S.Number="Number",S))(Z||{});function ee(n){return V(n)||W(n)||G(n)}function V(n){return n.type==="Function Definition"}function W(n){return n.type==="Constant Definition"}function G(n){return n.type==="Struct Definition"}function H(n){return n.type==="Function Call"}function j(n){return n.type==="Cond-Expression"}function O(n){return n.type==="Symbol"}function k(n){return n.type==="Literal Value"}function F(n){return n.map(Ct).join(`
`)}function Ct(n){return ee(n)?Bt(n):B(n)}function Bt(n){if(V(n))return`(define ${C(n.name)} (${n.args.map(C).join(" ")}) ${B(n.body)})`;if(W(n))return`(define ${C(n.name)} ${B(n.value)})`;if(G(n))return`(define-struct ${C(n.binding)} (${n.properties.map(C).join(" ")}))`;console.error("Invalid input to printDefinition")}function B(n){return H(n)?`(${C(n.name)} ${n.args.map(B).join(" ")})`:j(n)?`(cond ${n.options.map(se).join(" ")})`:O(n)?C(n):k(n)?typeof n.value=="string"&&n.value!=="'()"?`"${n.value}"`:typeof n.value=="boolean"?n.value?"#true":"#false":`${n.value}`:(console.error("Invalid input to printE"),`<${n}>`)}function se(n){return`[${B(n.condition)} ${B(n.result)}]`}function C(n){return n.symbol}var Zt=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{type:"Cond-Option",condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},{type:"Literal Value",value:3}]},result:{type:"Literal Value",value:"isThree"}},{type:"Cond-Option",condition:{type:"Literal Value",value:!1},result:{type:"Literal Value",value:"'()"}}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:{type:"Literal Value",value:42}},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function De(n,i,e=!1){let a=e?zt:Pt;i.innerHTML=n.map(c=>wt(c,a)).join(`
`),Ht(i),kt(i),e||Ft(i)}function wt(n,i){return`<ul class="tree ast"><li>${ee(n)?It(n,i):U(n,i)}</li></ul>`}function qe(n){return typeof n.code=="string"&&(n.code=[n.code]),`
    <div class="${["hole",n.pos?`hole-${n.pos}`:"",n.placeholder==="name"?"hole-name":"",["name+","name*"].includes(n.placeholder)?"hole-names":""].join(" ")}">
      ${n.code.map(e=>`<div class="code">${e}</div>`).join(" ")}
      <div class="placeholder">${n.placeholder}</div>
    </div>
  `}function ze(n){return typeof n.code=="string"&&(n.code=[n.code]),ae(n.code.join(" "))}function Pt(n){return`
    <span>
      <div class="name">${n.production}</div>
      <div>
        ${n.code.map(i=>typeof i=="string"?i:qe(i)).join(" ")}
      </div>
    </span>
  `}function ae(n){return n.split(" ").map(i=>i.trim()).filter(i=>i.length>0).join(" ").replaceAll("( ","(").replaceAll(" )",")")}function zt(n){let i=ae(n.code.map(a=>typeof a=="string"?a:ze(a)).join(" "));return`
    <span data-collapsed="true"
          data-holes="${JSON.stringify(n.code.filter(a=>typeof a!="string").map(a=>ze(a))).replaceAll('"',"&quot;")}"
          data-quiz="production">
      <div class="name">
         ${n.production}
         <select data-solution="${n.production}"
                 onchange="guessProduction(event)">
            <option>---</option>
            ${Object.values(Z).map(a=>`<option value="${a}">${a}</option>`)}
         </select>
         <div class="tip">
            First, select the correct production...
         </div>
      </div>
      <div class="codeblock">
        ${ae(n.code.map(a=>typeof a=="string"?a:qe(a)).join(" "))}
        <div class="actualcode">
          ${i.split("").map(a=>`<span class="char"
                   onmouseup="endSelection(event)">${a}</span>`).join("")}
        </div>
        <div class="tip">
           Second, select all subexpressions to expand the node!
        </div>
      </div>
    </span>
  `}function Dt(n){let i=n.target,e=i.getAttribute("data-solution"),a=i.parentElement,c=a.parentElement;i.value===e?(a.innerHTML=e,c.removeAttribute("data-wrong"),c.getAttribute("data-holes")==="[]"?(c.setAttribute("data-quiz","done"),c.removeAttribute("data-collapsed")):(c.setAttribute("data-quiz","holes"),qt(a.nextElementSibling))):c.setAttribute("data-wrong","true")}window.guessProduction=Dt;function qt(n){let i=P([n],".actualcode/span");if(i.length<1)return;let e=document.createRange();e.setStart(i[0],0);let a=i.length<10?i.length:10,c=window.getSelection();for(let p=0;p<a;p++)window.setTimeout(()=>{e.setEnd(i[p],0),c.addRange(e)},p*100);window.setTimeout(()=>c.empty(),1500)}function Nt(n){let e=n.target.parentElement,a=P([e],"../..")[0];if(a.getAttribute("data-quiz")!=="holes")return;let c=window.getSelection();if(!c)return;let p=Array.from(e.children).filter(h=>c.containsNode(h,!0)),f=p.map(h=>h.innerHTML).join(""),b=JSON.parse(a.getAttribute("data-holes").replaceAll("&quot;",'"'));if(!(!b.length||b.length<1)){if(b.includes(f)){b=b.filter(y=>y!==f),p.map(y=>y.classList.add("correct-selection-middle"));let h=p[0];h.classList.remove("correct-selection-middle"),h.classList.remove("selection-start"),h.classList.add("correct-selection-start");let S=p[p.length-1];S.classList.remove("correct-selection-middle"),S.classList.remove("selection-end"),S.classList.add("correct-selection-end"),b.length<=0?(a.removeAttribute("data-holes"),a.setAttribute("data-quiz","done"),window.setTimeout(()=>a.removeAttribute("data-collapsed"),1e3)):a.setAttribute("data-holes",JSON.stringify(b).replaceAll('"',"&quot;"))}else{p.map(y=>y.classList.add("wrong-selection-middle"));let h=p[0];h.classList.remove("wrong-selection-middle"),h.classList.remove("selection-start"),h.classList.add("wrong-selection-start");let S=p[p.length-1];S.classList.remove("wrong-selection-middle"),S.classList.remove("selection-end"),S.classList.add("wrong-selection-end"),window.setTimeout(()=>{p.map(y=>y.classList.remove("wrong-selection-middle")),h.classList.remove("wrong-selection-start"),S.classList.remove("wrong-selection-end")},1e3)}c.empty()}}window.endSelection=Nt;function It(n,i){if(V(n)){let e={production:n.type,code:["( define (",{pos:1,code:F([n.name]),placeholder:"name"},{pos:2,code:n.args.map(C),placeholder:"name+"},") ",{pos:3,code:F([n.body]),placeholder:"e"},")"]};return`
      ${i(e)}
      <ul>
        <li class="child-1">${R(n.name,i)}</li>
        ${n.args.map(a=>`<li class="child-2">${R(a,i)}</li>`).join("")}
        <li class="child-3">${U(n.body,i)}</li>
      </ul>`}else if(W(n)){let e={production:n.type,code:["( define ",{pos:1,code:F([n.name]),placeholder:"name"},{pos:2,code:F([n.value]),placeholder:"e"},")"]};return`
      ${i(e)}
      <ul>
        <li class="child-1">${R(n.name,i)}</li>
        <li class="child-2">${U(n.value,i)}</li>
      </ul>`}else if(G(n)){let e={production:n.type,code:["( define-struct ",{pos:1,code:F([n.binding]),placeholder:"name"},"(",{pos:2,code:n.properties.map(C),placeholder:"name*"},") )"]};return`
      ${i(e)}
      <ul>
        <li class="child-1">${R(n.binding,i)}</li>
        ${n.properties.map(a=>`<li class="child-2">${R(a,i)}</li>`).join("")}
      </ul>`}else console.error("Invalid input to printDefinition")}function U(n,i){if(H(n)){let e={production:n.type,code:["( ",{pos:1,code:F([n.name]),placeholder:"name"}," ",{pos:2,code:n.args.map(B),placeholder:"e*"},")"]};return`
      ${i(e)}
      <ul>
        <li class="child-1">${R(n.name,i)}</li>
        ${n.args.map(a=>`<li class="child-2">${U(a,i)}</li>`).join("")}
      </ul>`}else if(j(n)){let e={production:n.type,code:["( cond ",{pos:2,code:n.options.map(se),placeholder:"[ e e ]+"},")"]};return`
      ${i(e)}
      <ul>
        ${n.options.map(a=>`<li class="child-2">${Mt(a,i)}</li>`).join(" ")}
      </ul>`}else{if(O(n))return R(n,i);if(k(n)){let e={production:n.type,code:[B(n)]};return i(e)}else return console.error("Invalid input to treeE"),console.error(n),`
      <span>
        <div class="name">Invalid input to treeE</div>
        <div>${n}</div>
      </span>
    `}}function Mt(n,i){let e={production:n.type,code:["[",{pos:1,code:B(n.condition),placeholder:"e"}," ",{pos:2,code:B(n.result),placeholder:"e"},"]"]};return`
    ${i(e)}
    <ul>
      <li class="child-1">${U(n.condition,i)}</li>
      <li class="child-2">${U(n.result,i)}</li>
    </ul>
  `}function R(n,i){let e={production:n.type,code:[C(n)]};return i(e)}function Ht(n){ie(n,"hole-1","child-1"),ie(n,"hole-2","child-2"),ie(n,"hole-3","child-3")}function ie(n,i,e){Array.from(n.getElementsByClassName(i)).map(a=>{let c=a,p=.5*(c.getBoundingClientRect().x+c.getBoundingClientRect().right);if(p==0)return;let f=P([c],"../../+")[0];Array.from(f.children).filter(b=>b.classList.contains(e)).map(b=>{let h=b,S=.5*(h.getBoundingClientRect().x+h.getBoundingClientRect().right),y=p-S,m="";y<0?m+=`
          --connector-left: auto;
          --connector-right: 50%;
          --connector-border-left-style: solid;
          --connector-border-right-style: none;`:m+=`
          --connector-left: 50%;
          --connector-right: auto;
          --connector-border-left-style: none;
          --connector-border-right-style: solid;`,m+=`--connector-width: ${Math.abs(y)+1}px;`,h.style.cssText=m})})}function kt(n){Array.from(n.getElementsByClassName("name")).map(i=>{let e=P([i],"+/.hole/.code");if(e.length==0)return;let a=P([i],"../+/li/span/.name/+");if(e.length!=a.length){console.error("Error: More or less children than code figments",i,e,a);return}for(let c=0;c<e.length;c++){let p=e[c],f=a[c],b=p.getBoundingClientRect(),h=f.getBoundingClientRect();p.style.cssText=`
        --translate-x: ${(h.x+h.right)/2-(b.x+b.right)/2}px;
        --translate-y: ${h.y-b.y}px;
      `}})}function P(n,i){let e=i.split("/"),a=e.shift();if(a=="")return n;let c=e.join("/");if(a==".."){let p=n.map(f=>f.parentElement);return p.every(f=>f)?P(p,c):(console.error(`Error traversing ${i}: Missing parentElement`,n),[])}else if(a=="+"){let p=n.map(f=>f.nextElementSibling);return p.every(f=>f)?P(p,c):(console.error(`Error traversing ${i}: Missing nextElementSibling`,n),[])}else if(a.startsWith(".")){let p=a.slice(1),f=n.flatMap(b=>Array.from(b.children).filter(h=>h.classList.contains(p)));return P(f,c)}else{let p=n.flatMap(f=>Array.from(f.children).filter(b=>b.tagName==a.toUpperCase()));return P(p,c)}}function Ft(n){Array.from(n.getElementsByTagName("span")).map(i=>{i.onclick=()=>{let e=i;if(e.getAttribute("data-collapsed"))e.removeAttribute("data-collapsed");else{e.setAttribute("data-collapsed","true");let a=e.nextElementSibling;if(!a)return;Array.from(a.getElementsByTagName("span")).map(c=>{c.setAttribute("data-collapsed","true")})}}})}function le(n,i,e){return e=e||" ",n.length>i?n:(i-=n.length,e+=e.repeat(i),n+e.slice(0,i))}var z=class extends Error{constructor(e,a,c,p){super();this.message=e,this.expected=a,this.found=c,this.location=p,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,z.prototype):this.__proto__=z.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,z)}static buildMessage(e,a){function c(y){return y.charCodeAt(0).toString(16).toUpperCase()}function p(y){return y.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,m=>"\\x0"+c(m)).replace(/[\x10-\x1F\x7F-\x9F]/g,m=>"\\x"+c(m))}function f(y){return y.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,m=>"\\x0"+c(m)).replace(/[\x10-\x1F\x7F-\x9F]/g,m=>"\\x"+c(m))}function b(y){switch(y.type){case"literal":return'"'+p(y.text)+'"';case"class":let m=y.parts.map($=>Array.isArray($)?f($[0])+"-"+f($[1]):f($));return"["+(y.inverted?"^":"")+m+"]";case"any":return"any character";case"end":return"end of input";case"other":return y.description}}function h(y){let m=y.map(b),$,D;if(m.sort(),m.length>0){for($=1,D=1;$<m.length;$++)m[$-1]!==m[$]&&(m[D]=m[$],D++);m.length=D}switch(m.length){case 1:return m[0];case 2:return m[0]+" or "+m[1];default:return m.slice(0,-1).join(", ")+", or "+m[m.length-1]}}function S(y){return y?'"'+p(y)+'"':"end of input"}return"Expected "+h(e)+" but "+S(a)+" found."}format(e){let a="Error: "+this.message;if(this.location){let c=null,p;for(p=0;p<e.length;p++)if(e[p].source===this.location.source){c=e[p].text.split(/\r\n|\n|\r/g);break}let f=this.location.start,b=this.location.source+":"+f.line+":"+f.column;if(c){let h=this.location.end,S=le("",f.line.toString().length," "),y=c[f.line-1],m=f.line===h.line?h.column:y.length+1;a+=`
 --> `+b+`
`+S+` |
`+f.line+" | "+y+`
`+S+" | "+le("",f.column-1," ")+le("",m-f.column,"^")}else a+=`
 at `+b}return a}};function jt(n,i){i=i!==void 0?i:{};let e={},a=i.grammarSource,c={Program:_e},p=_e,f=function(t){return t},b=/^[\t \n \r]/,h=Y(["	"," ",`
`," ","\r"],!1,!1),S=function(t){return t},y="(define-struct",m=T("(define-struct",!1),$="(",D=T("(",!1),q=")",N=T(")",!1),Re=function(t,o){return{type:"Struct Definition",binding:t,properties:o}},K="(define",pe=T("(define",!1),je=function(t,o,s){return{type:"Function Definition",name:t,args:o,body:s}},Oe=function(t,o){return{type:"Constant Definition",name:t,value:o}},Ue=function(t){return t},ue="(cond",Je=T("(cond",!1),Ve=function(t){return{type:"Cond-Expression",options:t}},We="[",Ge=T("[",!1),Ke="]",Qe=T("]",!1),Xe=function(t,o){return{type:"Cond-Option",condition:t,result:o}},Ye=function(t,o){return{type:"Function Call",name:t,args:o}},de="define",Ze=T("define",!1),fe=/^[^",'`()[\]{}|#\n\t\r0-9 ]/,ge=Y(['"',",","'","`","(",")","[","]","{","}","|","#",`
`,"	","\r",["0","9"]," "],!0,!1),et=function(t){return{type:"Symbol",symbol:t.join("")}},tt=function(t){return{type:"Literal Value",value:t}},me=/^[0-9]/,ye=Y([["0","9"]],!1,!1),nt=function(){return parseInt(ft(),10)},be="#true",rt=T("#true",!1),he="#false",ot=T("#false",!1),Se="#t",st=T("#t",!1),xe="#f",it=T("#f",!1),at=function(t){return t==="#true"||t==="#t"},Le="'()",lt=T("'()",!1),ct=function(){return"'()"},$e='"',ve=T('"',!1),Ae=/^[^"]/,Te=Y(['"'],!0,!1),pt=function(t){return t.join("")},ut=Ee("whitespace"),dt=function(){},r=0,x=0,Q=[{line:1,column:1}],_=0,ne=[],d=0,X;if(i.startRule!==void 0){if(!(i.startRule in c))throw new Error(`Can't start parsing from rule "`+i.startRule+'".');p=c[i.startRule]}function ft(){return n.substring(x,r)}function Kt(){return J(x,r)}function Qt(t,o){throw o=o!==void 0?o:J(x,r),Be([Ee(t)],n.substring(x,r),o)}function Xt(t,o){throw o=o!==void 0?o:J(x,r),mt(t,o)}function T(t,o){return{type:"literal",text:t,ignoreCase:o}}function Y(t,o,s){return{type:"class",parts:t,inverted:o,ignoreCase:s}}function Yt(){return{type:"any"}}function gt(){return{type:"end"}}function Ee(t){return{type:"other",description:t}}function Ce(t){let o=Q[t],s;if(o)return o;for(s=t-1;!Q[s];)s--;for(o=Q[s],o={line:o.line,column:o.column};s<t;)n.charCodeAt(s)===10?(o.line++,o.column=1):o.column++,s++;return Q[t]=o,o}function J(t,o){let s=Ce(t),l=Ce(o);return{source:a,start:{offset:t,line:s.line,column:s.column},end:{offset:o,line:l.line,column:l.column}}}function g(t){r<_||(r>_&&(_=r,ne=[]),ne.push(t))}function mt(t,o){return new z(t,[],"",o)}function Be(t,o,s){return new z(z.buildMessage(t,o),t,o,s)}function _e(){let t,o,s;if(t=r,o=[],s=we(),s!==e)for(;s!==e;)o.push(s),s=we();else o=e;return o!==e&&(x=t,o=f(o)),t=o,t}function we(){let t,o,s,l;if(t=r,o=yt(),o===e&&(o=I()),o!==e){if(s=[],b.test(n.charAt(r))?(l=n.charAt(r),r++):(l=e,d===0&&g(h)),l!==e)for(;l!==e;)s.push(l),b.test(n.charAt(r))?(l=n.charAt(r),r++):(l=e,d===0&&g(h));else s=e;s!==e?(x=t,o=f(o),t=o):(r=t,t=e)}else r=t,t=e;return t}function yt(){let t,o,s;return t=r,o=v(),o!==e?(s=bt(),s===e&&(s=ht(),s===e&&(s=St())),s!==e?(x=t,o=S(s),t=o):(r=t,t=e)):(r=t,t=e),t}function bt(){let t,o,s,l,u,E,L,A,M;if(t=r,n.substr(r,14)===y?(o=y,r+=14):(o=e,d===0&&g(m)),o!==e)if(s=w(),s!==e)if(l=v(),l!==e)if(n.charCodeAt(r)===40?(u=$,r++):(u=e,d===0&&g(D)),u!==e){if(E=[],L=w(),L!==e)for(;L!==e;)E.push(L),L=w();else E=e;E!==e?(n.charCodeAt(r)===41?(L=q,r++):(L=e,d===0&&g(N)),L!==e?(A=v(),A!==e?(n.charCodeAt(r)===41?(M=q,r++):(M=e,d===0&&g(N)),M!==e?(x=t,o=Re(s,E),t=o):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)}else r=t,t=e;else r=t,t=e;else r=t,t=e;else r=t,t=e;return t}function ht(){let t,o,s,l,u,E,L,A,M,re;if(t=r,n.substr(r,7)===K?(o=K,r+=7):(o=e,d===0&&g(pe)),o!==e)if(s=v(),s!==e)if(n.charCodeAt(r)===40?(l=$,r++):(l=e,d===0&&g(D)),l!==e)if(u=w(),u!==e)if(E=v(),E!==e){if(L=[],A=w(),A!==e)for(;A!==e;)L.push(A),A=w();else L=e;L!==e?(n.charCodeAt(r)===41?(A=q,r++):(A=e,d===0&&g(N)),A!==e?(M=I(),M!==e?(n.charCodeAt(r)===41?(re=q,r++):(re=e,d===0&&g(N)),re!==e?(x=t,o=je(u,L,M),t=o):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)}else r=t,t=e;else r=t,t=e;else r=t,t=e;else r=t,t=e;else r=t,t=e;return t}function St(){let t,o,s,l,u;return t=r,n.substr(r,7)===K?(o=K,r+=7):(o=e,d===0&&g(pe)),o!==e?(s=w(),s!==e?(l=I(),l!==e?(n.charCodeAt(r)===41?(u=q,r++):(u=e,d===0&&g(N)),u!==e?(x=t,o=Oe(s,l),t=o):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e),t}function I(){let t,o,s;return t=r,o=v(),o!==e?(s=xt(),s===e&&(s=Lt(),s===e&&(s=w(),s===e&&(s=$t()))),s!==e?(x=t,o=Ue(s),t=o):(r=t,t=e)):(r=t,t=e),t}function xt(){let t,o,s,l,u;if(t=r,n.substr(r,5)===ue?(o=ue,r+=5):(o=e,d===0&&g(Je)),o!==e){if(s=[],l=Pe(),l!==e)for(;l!==e;)s.push(l),l=Pe();else s=e;s!==e?(l=v(),l!==e?(n.charCodeAt(r)===41?(u=q,r++):(u=e,d===0&&g(N)),u!==e?(x=t,o=Ve(s),t=o):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)}else r=t,t=e;return t}function Pe(){let t,o,s,l,u,E,L,A;return t=r,o=v(),o!==e?(n.charCodeAt(r)===91?(s=We,r++):(s=e,d===0&&g(Ge)),s!==e?(l=v(),l!==e?(u=I(),u!==e?(E=v(),E!==e?(L=I(),L!==e?(n.charCodeAt(r)===93?(A=Ke,r++):(A=e,d===0&&g(Qe)),A!==e?(x=t,o=Xe(u,L),t=o):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e),t}function Lt(){let t,o,s,l,u;if(t=r,n.charCodeAt(r)===40?(o=$,r++):(o=e,d===0&&g(D)),o!==e)if(s=w(),s!==e){for(l=[],u=I();u!==e;)l.push(u),u=I();l!==e?(n.charCodeAt(r)===41?(u=q,r++):(u=e,d===0&&g(N)),u!==e?(x=t,o=Ye(s,l),t=o):(r=t,t=e)):(r=t,t=e)}else r=t,t=e;else r=t,t=e;return t}function w(){let t,o,s,l,u;if(t=r,o=v(),o!==e)if(s=r,d++,n.substr(r,6)===de?(l=de,r+=6):(l=e,d===0&&g(Ze)),d--,l===e?s=void 0:(r=s,s=e),s!==e){if(l=[],fe.test(n.charAt(r))?(u=n.charAt(r),r++):(u=e,d===0&&g(ge)),u!==e)for(;u!==e;)l.push(u),fe.test(n.charAt(r))?(u=n.charAt(r),r++):(u=e,d===0&&g(ge));else l=e;l!==e?(x=t,o=et(l),t=o):(r=t,t=e)}else r=t,t=e;else r=t,t=e;return t}function $t(){let t,o;return t=r,o=vt(),o===e&&(o=At(),o===e&&(o=Tt(),o===e&&(o=Et()))),o!==e&&(x=t,o=tt(o)),t=o,t}function vt(){let t,o,s,l;if(t=r,o=v(),o!==e){if(s=[],me.test(n.charAt(r))?(l=n.charAt(r),r++):(l=e,d===0&&g(ye)),l!==e)for(;l!==e;)s.push(l),me.test(n.charAt(r))?(l=n.charAt(r),r++):(l=e,d===0&&g(ye));else s=e;s!==e?(x=t,o=nt(),t=o):(r=t,t=e)}else r=t,t=e;return t}function At(){let t,o,s;return t=r,o=v(),o!==e?(n.substr(r,5)===be?(s=be,r+=5):(s=e,d===0&&g(rt)),s===e&&(n.substr(r,6)===he?(s=he,r+=6):(s=e,d===0&&g(ot)),s===e&&(n.substr(r,2)===Se?(s=Se,r+=2):(s=e,d===0&&g(st)),s===e&&(n.substr(r,2)===xe?(s=xe,r+=2):(s=e,d===0&&g(it))))),s!==e?(x=t,o=at(s),t=o):(r=t,t=e)):(r=t,t=e),t}function Tt(){let t,o,s;return t=r,o=v(),o!==e?(n.substr(r,3)===Le?(s=Le,r+=3):(s=e,d===0&&g(lt)),s!==e?(x=t,o=ct(),t=o):(r=t,t=e)):(r=t,t=e),t}function Et(){let t,o,s,l,u;if(t=r,o=v(),o!==e)if(n.charCodeAt(r)===34?(s=$e,r++):(s=e,d===0&&g(ve)),s!==e){if(l=[],Ae.test(n.charAt(r))?(u=n.charAt(r),r++):(u=e,d===0&&g(Te)),u!==e)for(;u!==e;)l.push(u),Ae.test(n.charAt(r))?(u=n.charAt(r),r++):(u=e,d===0&&g(Te));else l=e;l!==e?(n.charCodeAt(r)===34?(u=$e,r++):(u=e,d===0&&g(ve)),u!==e?(x=t,o=pt(l),t=o):(r=t,t=e)):(r=t,t=e)}else r=t,t=e;else r=t,t=e;return t}function v(){let t,o,s;for(d++,t=r,o=[],b.test(n.charAt(r))?(s=n.charAt(r),r++):(s=e,d===0&&g(h));s!==e;)o.push(s),b.test(n.charAt(r))?(s=n.charAt(r),r++):(s=e,d===0&&g(h));return o!==e&&(x=t,o=dt()),t=o,d--,t===e&&(o=e,d===0&&g(ut)),t}if(X=p(),X!==e&&r===n.length)return X;throw X!==e&&r<n.length&&g(gt()),Be(ne,_<n.length?n.charAt(_):null,_<n.length?J(_,_+1):J(_,_))}var ce=jt;function Ne(n){if(H(n)){let i=n.name,e=n.args,a={};for(let c=0;c<e.length;c++)if(H(e[c])){let p=e[c];return{redex:{type:"Redex",name:p.name,args:p.args},context:{type:"Context",name:i,args:[...e.slice(0,c),a,...e.slice(c+1)]}}}return{redex:{type:"Redex",name:i,args:e},context:{type:"Context",name:null,args:[a]}}}else{if(k(n))return n;if(j(n)||O(n)||n==null){console.log("error: expr is either Cond, Name, or undefined");return}}}function Ie(n){if(n.name.symbol=="+"){let i=0;return n.args.forEach(e=>{if(k(e))i+=e.value;else{console.error("error: argument is not a literal");return}}),{value:i}}}var Me=`.tree {
  --branch-color: #666;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: .5em 0;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin: 0 .2em .5em;
    padding: .2em .5em;
    position: relative;
}

/* ########### custom AST node  styles ######## */
.tree {
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
}
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background); /* racket azure */
}
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: small;
  text-align: left;
  margin-bottom: 0.5em;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    height: .5em;
    left: 50%;
    position: absolute;
    top: calc(-.5em - 2px);
}
/* horizontal part + part pointing to corresp. hole
   -> width etc will be set via JavaScript
      Javascript cannot style ::before elements directly
      (since they are not part of the DOM),
      the variables will be set on the parent li element */
.tree li::before {
  box-sizing: border-box;
  content: "";
  position: absolute;
  height: .5em; /* overridden for some */
  top: -.5em;
  left: var(--connector-left, auto);
  right: var(--connector-right, auto);
  width: var(--connector-width, 100%);

  border: solid 2px var(--branch-color);
  border-top-style: none;
  border-left-style: var(--connector-border-left-style, none);
  border-right-style: var(--connector-border-right-style, none);
}

/* prevent up to 3 connectors from crossing */
.tree li.child-1::before {
  height: .3em;
}
.tree li.child-1 > span::before {
  top: calc(-.7em - 2px);
  height: 0.7em;
}

.tree li.child-3::before {
  height: .7em;
}
.tree li.child-3 > span::before {
  top: calc(-.3em - 2px);
  height: 0.3em;
}

/* ####### highlight way back up from a node ###### */
.tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
}

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree span:hover {
  cursor: pointer;
}

/* smooth transition between hiding and showing */
@keyframes hide-delayed {
  99% {
    visibility: visible;
  }
  100% {
    visibility: hidden;
  }
}
.tree span[data-collapsed] ~ ul {
  opacity: 0%;
  visibility: hidden;
  animation: hide-delayed 1s;
  transition: opacity 0.5s ease-out 0.5s;
}
.tree ul {
  opacity: 100%;
  transition: opacity 1s ease-out;
}

/* ######### holes ########## */
.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}
/* show/hide parts/holes  and float them into place */
.tree .code, .tree .placeholder {
  display: inline-block;
}
.tree .code {
  color: transparent;
  transform: translate(var(--translate-x,0), var(--translate-y,0));
  transition: transform 1s ease-out, color 1s steps(1,end);
}
.tree span[data-collapsed] .code {
  color: var(--text-grey);
  transform: translate(0,0);
  transition: transform 1s ease-out, color 1s steps(1,start);
}
.tree .placeholder {
  color: var(--text-grey);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  text-align: center;
}
.tree span[data-collapsed] .placeholder {
  display: none;
}

.tree .hole-name {
  min-width: 2em;
}
.tree .hole-names {
  min-width: 2.5em;
}
`;var He=`/* modifications for tree quiz */
bsltree[quiz="true"] .tree {
  --border-pending: orange;
  --tooltip-bg: var(--hole-yellow);
  --tooltip-border: var(--branch-color);
  --wrong-border: darkred;
  --correct-border: darkgreen;
  --selection-tentative: yellow;
  --selection-border: var(--branch-color);
  --selection-correct: green;
  --selection-wrong: red;
}
bsltree[quiz="true"] .tree {
  margin-top: 4em;
}
bsltree[quiz="true"] .tree span {
  cursor: auto;
  border: 1px solid var(--correct-border);
}
bsltree[quiz="true"] .tree span[data-collapsed="true"] {
  border: 1px solid var(--border-pending);
}
bsltree[quiz="true"] .tree span[data-wrong="true"] {
  border: 1px solid var(--wrong-border);
}

/* style production and select */
bsltree[quiz="true"] .tree .name {
  font-size: inherit;
}

bsltree[quiz="true"] .tree .name {
  position: relative;
  display: block;
  text-align: left;
}

bsltree[quiz="true"] .tree .name > select {
  position: absolute;
  display: inline-block;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

/* hide name tooltip by default */
bsltree[quiz="true"] .tree .tip {
  display: none;
}

/* display tooltip over root */
bsltree[quiz="true"] .tree > li > span[data-quiz="production"] .name > .tip,
bsltree[quiz="true"] .tree > li > span[data-quiz="holes"] .codeblock > .tip {
  display: block;
  position: absolute;
  left: 80%;
  bottom: 150%;
  width: 18em;
  background-color: var(--tooltip-bg);
  border: 1px solid var(--tooltip-border);
  padding: .5em;
}
bsltree[quiz="true"] .tree > li > span[data-quiz="production"] .name > .tip::after,
bsltree[quiz="true"] .tree > li > span[data-quiz="holes"] .codeblock > .tip::after {
  content: "";
  position: absolute;
  width: 1em;
  height: 1em;
  left: 0.5em;
  bottom: calc(-0.5em - 1px);
  transform: rotate(45deg);
  background-color: var(--tooltip-bg);
  border-right: 1px solid var(--tooltip-border);
  border-bottom: 1px solid var(--tooltip-border);
}

/* showing/hiding code without holes */
bsltree[quiz="true"] .tree .codeblock {
  position: relative;
  display: block;
}
bsltree[quiz="true"] .tree .actualcode {
  display: none;
}
bsltree[quiz="true"] .tree span[data-quiz="production"] .actualcode,
bsltree[quiz="true"] .tree span[data-quiz="holes"] .actualcode {
  position: absolute;
  display: block;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: var(--node-background);
}
bsltree[quiz="true"] .tree .char {
  display: inline;
  margin: 0;
  border: none;
  padding: 0;
  border-radius: 0;
  background-color: transparent;
  transition: background-color 1s ease-out;
}
bsltree[quiz="true"] .tree .char::before {
  display: none;
}
bsltree[quiz="true"] .tree .selection-start {
  background-color: var(--selection-tentative);
  border: 1px solid var(--selection-border);
  border-right: none;
}
bsltree[quiz="true"] .tree .selection-start ~ span {
  background-color: var(--selection-tentative);
  border-top: 1px solid var(--selection-border);
  border-bottom: 1px solid var(--selection-border);
}

bsltree[quiz="true"] .tree .selection-end {
  border: 1px solid var(--selection-border);
  border-left: none;
}
bsltree[quiz="true"] .tree .selection-end ~ span {
  border: none;
  background-color: transparent;
}

bsltree[quiz="true"] .tree .correct-selection-start,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .correct-selection-end {
  user-select: none;
  background-color: var(--selection-correct);
  border: 1px solid var(--selection-border);
}
bsltree[quiz="true"] .tree .wrong-selection-start,
bsltree[quiz="true"] .tree .wrong-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-end {
  user-select: none;
  background-color: var(--selection-wrong);
  border: 1px solid var(--selection-border);
}

bsltree[quiz="true"] .tree .correct-selection-start,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-start,
bsltree[quiz="true"] .tree .wrong-selection-middle, {
  border-right: none;
}

bsltree[quiz="true"] .tree .correct-selection-end,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-end,
bsltree[quiz="true"] .tree .wrong-selection-middle, {
  border-left: none;
}
`;var ke=`/* css for errors */
.error-wrapper{
    display:flex;
    flex-direction:column;
    margin:2vw;
    font-size:inherit;
}

.error{
    font-size:1.2em;
}
`;var te=document.createElement("style");te.innerHTML=Me;te.innerHTML+=He;te.innerHTML+=ke;document.getElementsByTagName("head")[0].appendChild(te);function Wt(){Array.from(document.getElementsByTagName("bsltree")).map(n=>{try{let i=ce(n.innerHTML),e=n.getAttribute("quiz")==="true";De(i,n,e)}catch(i){Fe(n,`${i.location.start.line}:${i.location.start.column} ${i}`)}})}function Gt(){Array.from(document.getElementsByTagName("stepper")).map(n=>{try{let e=ce(n.innerHTML)[0];console.log("expression",e);let a=Ne(e);console.log("splitExpr",a);let c=Ie(a.redex);console.log("stepExpr",c)}catch(i){Fe(n,`${i.location.start.line}:${i.location.start.column} ${i}`)}})}window.onload=()=>{Wt(),Gt()};function Fe(n,i){let e=n.innerHTML;n.innerHTML="";let a=document.createElement("div");a.classList.add("error-wrapper"),n.appendChild(a);let c=`<p> BSL-Tree could not be parsed! </p>
                  <p> Input: <b style="font-size:0.9em;">${e}</b> </p>`,p=document.createElement("div");p.classList.add("origin"),p.innerHTML=c,a.appendChild(p);let f=document.createElement("pre");f.classList.add("error");let b=document.createElement("code");b.textContent=i,a.appendChild(f),f.appendChild(b)}})();
//# sourceMappingURL=data:application/json;base64,
