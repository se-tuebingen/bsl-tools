(()=>{var Bt=Object.defineProperty;var _e=Object.getOwnPropertySymbols;var Pt=Object.prototype.hasOwnProperty,_t=Object.prototype.propertyIsEnumerable;var we=(t,r,e)=>r in t?Bt(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e,oe=(t,r)=>{for(var e in r||(r={}))Pt.call(r,e)&&we(t,e,r[e]);if(_e)for(var e of _e(r))_t.call(r,e)&&we(t,e,r[e]);return t};function G(t){return j(t)||R(t)||se(t)}function j(t){return t.type==="Function Definition"}function R(t){return t.type==="Constant Definition"}function se(t){return t.type==="Struct Definition"}function K(t){return t.type==="Function Call"}function X(t){return t.type==="Cond-Expression"}function Y(t){return t.type==="Symbol"}function ze(t){return t.type==="Literal Value"}function ie(t){return G(t)?wt(t):E(t)}function wt(t){if(j(t))return`(define ${S(t.name)} (${t.args.map(S).join(" ")}) ${E(t.body)})`;if(R(t))return`(define ${S(t.name)} ${E(t.value)})`;if(se(t))return`(define-struct ${S(t.binding)} (${t.properties.map(S).join(" ")}))`;console.error("Invalid input to printDefinition")}function E(t){return K(t)?`(${S(t.name)} ${t.args.map(E).join(" ")})`:X(t)?`(cond ${t.options.map(Z).join(" ")})`:Y(t)?S(t):ze(t)?typeof t.value=="string"&&t.value!=="'()"?`"${t.value}"`:typeof t.value=="boolean"?t.value?"#true":"#false":`${t.value}`:(console.error("Invalid input to printE"),`<${t}>`)}function Z(t){return`[${E(t.condition)} ${E(t.result)}]`}function S(t){return t.symbol}var an=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{type:"Cond-Option",condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},{type:"Literal Value",value:3}]},result:{type:"Literal Value",value:"isThree"}},{type:"Cond-Option",condition:{type:"Literal Value",value:!1},result:{type:"Literal Value",value:"'()"}}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:{type:"Literal Value",value:42}},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function k(t,r){let e=r.split("/"),a=e.shift();if(a=="")return t;let l=e.join("/");if(a==".."){let u=t.map(f=>f.parentElement);return u.every(f=>f)?k(u,l):(console.error(`Error traversing ${r}: Missing parentElement`,t),[])}else if(a=="+"){let u=t.map(f=>f.nextElementSibling);return u.every(f=>f)?k(u,l):(console.error(`Error traversing ${r}: Missing nextElementSibling`,t),[])}else if(a.startsWith(".")){let u=a.slice(1),f=t.flatMap(b=>Array.from(b.children).filter(y=>y.classList.contains(u)));return k(f,l)}else{let u=t.flatMap(f=>Array.from(f.children).filter(b=>b.tagName==a.toUpperCase()));return k(u,l)}}function M(t,r){if(t.tagName==r.toUpperCase())return t;{let e=t.parentElement;return e?M(e,r):(console.error("Could not find parent element with requested tag ",r),null)}}function J(t,r){if(t.classList.contains(r))return t;{let e=t.parentElement;return e?J(e,r):(console.error("Could not find parent element with requested class ",r),null)}}function qe(t,r,e=!1){r.innerHTML=kt(t,e),e&&k([r],"ul/li/ul/li").map(a=>a.setAttribute("data-collapsed","false")),ee(r)}function ee(t){let r=parseFloat(getComputedStyle(t).fontSize)*3;for(let e=1;;e++){let a=Array.from(t.getElementsByClassName(`hole-${e}`));if(a.length<1)return;a.map(l=>{let u=l,f=.5*(u.getBoundingClientRect().x+u.getBoundingClientRect().right);if(f==0)return;let b=M(u,"li");!b||k([b],`ul/.child-${e}/span`).map(y=>{let v=y,h=.5*(v.getBoundingClientRect().x+v.getBoundingClientRect().right),m=f-h,L=-Math.atan2(r,m),B=Math.sqrt(m*m+r*r),w=m/2-B/2;v.style.cssText=`
          --connector-width: ${B}px;
          --connector-left: calc(50% + ${w}px);
          --edgetext-right: calc(50% - ${m/2}px);
          --connector-transform: rotate(${L}rad);
        `})})}}function kt(t,r=!1){let e=Mt(t);return`
    <ul class="tree ast">
      ${r?Fe(e):De(e)}
    </ul>
  `}function De(t,r=-1){let e=[],a=0;for(let l=0;l<t.holes.length;l++)t.holes[l].start>a&&e.push({pos:!1,start:a,end:t.holes[l].start}),e.push(oe({pos:l+1},t.holes[l])),a=t.holes[l].end;return a<t.code.length&&e.push({start:a,end:t.code.length}),`
    <li class="${r>=0?`child-${r+1}`:""}"
        data-collapsed="${r>=0?"true":"false"}">
      <span class="${t.holes.length>0?"":"terminal-symbol"}">
        <div class="name">${Ne(t.production)}</div>
        <div>${e.map(l=>`
          <span class="char ${l.pos?`hole hole-${l.pos}`:""}"
                ${l.pos?`onclick="toggleChild(event,${l.pos})"`:""}>
            ${t.code.slice(l.start,l.end)}
          </span>`).join("")}
        </div>
      </span>
      ${t.holes.length>0?`<ul>${t.holes.map((l,u)=>De(l.content,u)).join("")}</ul>`:""}
    </li>
  `}function qt(t,r){let e=t.target,a=M(e,"li"),l=M(e,"bsltree");if(!a||!l){console.error("toggleChild called from .hole not in li/bsltree");return}k([a],`ul/.child-${r}`).map(u=>{u.setAttribute("data-collapsed",u.getAttribute("data-collapsed")==="true"?"false":"true")}),ee(l)}window.toggleChild=qt;function Ne(t){return t.replaceAll("<","&lt;").replaceAll(">","&gt;")}var Dt=["<program>","<def-or-expr>*","<def-or-expr>","<definition>","<e>","<e>*","{[<e>,<e>]}+","<name>*","<name>+","<name>","<v>"];function Fe(t,r=-1){let e=[],a=0;for(let l=0;l<t.holes.length;l++)t.holes[l].start>a&&e.push({pos:!1,start:a,end:t.holes[l].start}),e.push(oe({pos:l+1},t.holes[l])),a=t.holes[l].end;return a<t.code.length&&e.push({start:a,end:t.code.length}),`
    <li class="${r>=0?`child-${r+1}`:""}"
        data-collapsed="${r>=0?"true":"false"}">
      <span class="${t.holes.length>0?"":"terminal-symbol"}"
            data-quiz-state="${r>=0?"production":"done"}">
        <div class="production">
          <select onchange="checkProduction(event, '${t.production}')">
            <option selected="true">Select production</option>
            ${Dt.map(l=>`
                <option value="${l}">${Ne(l)}</option>
              `).join("")}
          </select>
        </div>
        <div class="hole-marking"
             data-holes="${JSON.stringify(t.holes.map(l=>[l.start,l.end,!1]))}">
          <div class="textarea-container">
            <textarea autocorrect="off"
                      spellcheck="false"
                      cols="${t.code.length}"
                      rows="1"
                      readonly="true">${t.code}</textarea>
            <div class="marker-container">
              ${e.map(l=>`
                <span class="char ${l.pos?"hole-marker":""} invisible"
                      data-hole="${l.pos?l.pos:""}">
                  ${t.code.slice(l.start,l.end)}
                </span>`).join("")}
            </div>

          </div>
          <button onclick="checkSelection(event)">
            Mark selected text as hole
          </button>
        </div>
        <div class="name">
          ${t.production.replaceAll("<","&lt;").replaceAll("<","&gt;")}
        </div>
        <div class="code">${e.map(l=>`
          <span class="char ${l.pos?`hole hole-${l.pos}`:""}"
                ${l.pos?`onclick="toggleChild(event,${l.pos})"`:""}>
            ${t.code.slice(l.start,l.end)}
          </span>`).join("")}
        </div>
      </span>
      ${t.holes.length>0?`<ul>${t.holes.map((l,u)=>Fe(l.content,u)).join("")}</ul>`:""}
    </li>
  `}function Nt(t,r){let e=t.target;if(e.value===r){let a=M(e,"span");if(a){a.setAttribute("data-quiz-state","hole-marking");let l=J(a,"tree");l&&ee(l)}}}window.checkProduction=Nt;function Ft(t){let r=t.target,e=J(r,"hole-marking");if(!e){console.error("checkProduction called from el. not wrapped in div.hole-marking");return}let a=JSON.parse(e.getAttribute("data-holes"));console.log(a);let l=e.getElementsByTagName("textarea")[0],u=l.selectionStart,f=l.selectionEnd,b=-1;if(a.map((y,v)=>{y[0]===u&&y[1]===f&&(console.log("found hole ",y),y[2]=!0,b=v)}),b>=0&&(e.setAttribute("data-holes",JSON.stringify(a)),k([e],".textarea-container/.marker-container/.hole-marker").map(y=>{y.getAttribute("data-hole")===`${b}`&&y.classList.remove("invisible")})),a.every(y=>y[2])){let y=M(e,"span");if(y){y.setAttribute("data-quiz-state","done");let v=J(y,"tree");v&&ee(v)}}}window.checkSelection=Ft;function Mt(t){let r=t.map(ie),e=[],a="";for(let l=0;l<r.length;l++){let u=a.length;a=`${a}${r[l]}`;let f=a.length;e.push({start:u,end:f}),a=`${a}
`}return{production:"<program>",code:a,holes:[{start:0,end:a.length,content:{production:"<def-or-expr>*",code:a,holes:e.map((l,u)=>({start:l.start,end:l.end,content:It(t[u])}))}}]}}function It(t){let r=ie(t);return{production:"<def-or-expr>",code:r,holes:[{start:0,end:r.length,content:G(t)?Ot(t):O(t)}]}}function Ot(t){let r="",e=[];if(j(t)){r="( define ( ";let a=r.length;r=`${r}${S(t.name)}`,e.push({start:a,end:r.length,content:I(t.name)}),r=`${r} `,a=r.length,r=`${r}${t.args.map(S).join(" ")}`,e.push({start:a,end:r.length,content:Ht(t.args)}),r=`${r} ) `,a=r.length,r=`${r} ${E(t.body)}`,e.push({start:a,end:r.length,content:O(t.body)}),r=`${r} )`}else if(R(t)){r="( define ";let a=r.length;r=`${r}${S(t.name)}`,e.push({start:a,end:r.length,content:I(t.name)}),r=`${r} `,a=r.length,r=`${r}${E(t.value)}`,e.push({start:a,end:r.length,content:O(t.value)}),r=`${r} )`}else{r="( define-struct ";let a=r.length;r=`${r}${S(t.binding)}`,e.push({start:a,end:r.length,content:I(t.binding)}),r=`${r} ( `,a=r.length,r=`${r}${t.properties.map(S).join(" ")}`,e.push({start:a,end:r.length,content:jt(t.properties)}),r=`${r} ) )`}return{production:"<definition>",code:r,holes:e}}function O(t){let r="",e=[];if(K(t)){r="( ";let a=r.length;r=`${r}${S(t.name)}`,e.push({start:a,end:r.length,content:I(t.name)}),r=`${r} `,a=r.length,r=`${r}${t.args.map(E).join(" ")}`,e.push({start:a,end:r.length,content:Rt(t.args)}),r=`${r} )`}else if(X(t)){r="( cond ";let a=r.length;r=`${r}${t.options.map(Z).join(" ")}`,e.push({start:a,end:r.length,content:Jt(t.options)}),r=`${r} )`}else Y(t)?(r=S(t),e.push({start:0,end:r.length,content:I(t)})):(r=E(t),e.push({start:0,end:r.length,content:Vt(t)}));return{production:"<e>",code:r,holes:e}}function I(t){return{production:"<name>",code:S(t),holes:[]}}function Ht(t){t.length<1&&console.error("<name>+ but used but names are empty");let r="",e=[];for(let a=0;a<t.length;a++){let l=r.length;r=`${r}${S(t[a])}`,e.push({start:l,end:r.length,content:I(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"<name>+",code:r,holes:e}}function jt(t){let r="",e=[];for(let a=0;a<t.length;a++){let l=r.length;r=`${r}${S(t[a])}`,e.push({start:l,end:r.length,content:I(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"<name>*",code:r,holes:e}}function Rt(t){let r="",e=[];for(let a=0;a<t.length;a++){let l=r.length;r=`${r}${E(t[a])}`,e.push({start:l,end:r.length,content:O(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"<e>*",code:r,holes:e}}function Jt(t){let r="",e=[];for(let a=0;a<t.length;a++){let l=r.length;r=`${r}${Z(t[a])}`,e.push({start:l,end:r.length,content:Ut(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"{[ <e> <e> ]}+",code:r,holes:e}}function Ut(t){let r="",e=[];r=`${r}[ `;let a=r.length;return r=`${r}${E(t.condition)}`,e.push({start:a,end:r.length,content:O(t.condition)}),r=`${r} `,a=r.length,r=`${r}${E(t.result)}`,e.push({start:a,end:r.length,content:O(t.result)}),r=`${r} ]`,{production:"[ <e> <e> ]",code:r,holes:e}}function Vt(t){return{production:"<v>",code:E(t),holes:[]}}function ae(t,r,e){return e=e||" ",t.length>r?t:(r-=t.length,e+=e.repeat(r),t+e.slice(0,r))}var q=class extends Error{constructor(e,a,l,u){super();this.message=e,this.expected=a,this.found=l,this.location=u,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,q.prototype):this.__proto__=q.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,q)}static buildMessage(e,a){function l(h){return h.charCodeAt(0).toString(16).toUpperCase()}function u(h){return h.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,m=>"\\x0"+l(m)).replace(/[\x10-\x1F\x7F-\x9F]/g,m=>"\\x"+l(m))}function f(h){return h.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,m=>"\\x0"+l(m)).replace(/[\x10-\x1F\x7F-\x9F]/g,m=>"\\x"+l(m))}function b(h){switch(h.type){case"literal":return'"'+u(h.text)+'"';case"class":let m=h.parts.map(L=>Array.isArray(L)?f(L[0])+"-"+f(L[1]):f(L));return"["+(h.inverted?"^":"")+m+"]";case"any":return"any character";case"end":return"end of input";case"other":return h.description}}function y(h){let m=h.map(b),L,B;if(m.sort(),m.length>0){for(L=1,B=1;L<m.length;L++)m[L-1]!==m[L]&&(m[B]=m[L],B++);m.length=B}switch(m.length){case 1:return m[0];case 2:return m[0]+" or "+m[1];default:return m.slice(0,-1).join(", ")+", or "+m[m.length-1]}}function v(h){return h?'"'+u(h)+'"':"end of input"}return"Expected "+y(e)+" but "+v(a)+" found."}format(e){let a="Error: "+this.message;if(this.location){let l=null,u;for(u=0;u<e.length;u++)if(e[u].source===this.location.source){l=e[u].text.split(/\r\n|\n|\r/g);break}let f=this.location.start,b=this.location.source+":"+f.line+":"+f.column;if(l){let y=this.location.end,v=ae("",f.line.toString().length," "),h=l[f.line-1],m=f.line===y.line?y.column:h.length+1;a+=`
 --> `+b+`
`+v+` |
`+f.line+" | "+h+`
`+v+" | "+ae("",f.column-1," ")+ae("",m-f.column,"^")}else a+=`
 at `+b}return a}};function Qt(t,r){r=r!==void 0?r:{};let e={},a=r.grammarSource,l={Program:Ce},u=Ce,f=function(n){return n},b=/^[\t \n \r]/,y=Q(["	"," ",`
`," ","\r"],!1,!1),v=function(n){return n},h="(define-struct",m=C("(define-struct",!1),L="(",B=C("(",!1),w=")",D=C(")",!1),je=function(n,s){return{type:"Struct Definition",binding:n,properties:s}},U="(define",le=C("(define",!1),Re=function(n,s,i){return{type:"Function Definition",name:n,args:s,body:i}},Je=function(n,s){return{type:"Constant Definition",name:n,value:s}},Ue=function(n){return n},ce="(cond",Ve=C("(cond",!1),We=function(n){return{type:"Cond-Expression",options:n}},Qe="[",Ge=C("[",!1),Ke="]",Xe=C("]",!1),Ye=function(n,s){return{type:"Cond-Option",condition:n,result:s}},Ze=function(n,s){return{type:"Function Call",name:n,args:s}},pe="define",et=C("define",!1),ue=/^[^",'`()[\]{}|#\n\t\r0-9 ]/,de=Q(['"',",","'","`","(",")","[","]","{","}","|","#",`
`,"	","\r",["0","9"]," "],!0,!1),tt=function(n){return{type:"Symbol",symbol:n.join("")}},nt=function(n){return{type:"Literal Value",value:n}},fe=/^[0-9]/,ge=Q([["0","9"]],!1,!1),rt=function(){return parseInt(gt(),10)},me="#true",ot=C("#true",!1),ye="#false",st=C("#false",!1),he="#t",it=C("#t",!1),be="#f",at=C("#f",!1),lt=function(n){return n==="#true"||n==="#t"},$e="'()",ct=C("'()",!1),pt=function(){return"'()"},xe='"',Se=C('"',!1),Le=/^[^"]/,ve=Q(['"'],!0,!1),ut=function(n){return n.join("")},dt=Ae("whitespace"),ft=function(){},o=0,$=0,V=[{line:1,column:1}],_=0,ne=[],d=0,W;if(r.startRule!==void 0){if(!(r.startRule in l))throw new Error(`Can't start parsing from rule "`+r.startRule+'".');u=l[r.startRule]}function gt(){return t.substring($,o)}function en(){return H($,o)}function tn(n,s){throw s=s!==void 0?s:H($,o),Ee([Ae(n)],t.substring($,o),s)}function nn(n,s){throw s=s!==void 0?s:H($,o),yt(n,s)}function C(n,s){return{type:"literal",text:n,ignoreCase:s}}function Q(n,s,i){return{type:"class",parts:n,inverted:s,ignoreCase:i}}function rn(){return{type:"any"}}function mt(){return{type:"end"}}function Ae(n){return{type:"other",description:n}}function Te(n){let s=V[n],i;if(s)return s;for(i=n-1;!V[i];)i--;for(s=V[i],s={line:s.line,column:s.column};i<n;)t.charCodeAt(i)===10?(s.line++,s.column=1):s.column++,i++;return V[n]=s,s}function H(n,s){let i=Te(n),c=Te(s);return{source:a,start:{offset:n,line:i.line,column:i.column},end:{offset:s,line:c.line,column:c.column}}}function g(n){o<_||(o>_&&(_=o,ne=[]),ne.push(n))}function yt(n,s){return new q(n,[],"",s)}function Ee(n,s,i){return new q(q.buildMessage(n,s),n,s,i)}function Ce(){let n,s,i;if(n=o,s=[],i=Be(),i!==e)for(;i!==e;)s.push(i),i=Be();else s=e;return s!==e&&($=n,s=f(s)),n=s,n}function Be(){let n,s,i,c;if(n=o,s=ht(),s===e&&(s=N()),s!==e){if(i=[],b.test(t.charAt(o))?(c=t.charAt(o),o++):(c=e,d===0&&g(y)),c!==e)for(;c!==e;)i.push(c),b.test(t.charAt(o))?(c=t.charAt(o),o++):(c=e,d===0&&g(y));else i=e;i!==e?($=n,s=f(s),n=s):(o=n,n=e)}else o=n,n=e;return n}function ht(){let n,s,i;return n=o,s=A(),s!==e?(i=bt(),i===e&&(i=$t(),i===e&&(i=xt())),i!==e?($=n,s=v(i),n=s):(o=n,n=e)):(o=n,n=e),n}function bt(){let n,s,i,c,p,P,x,T,F;if(n=o,t.substr(o,14)===h?(s=h,o+=14):(s=e,d===0&&g(m)),s!==e)if(i=z(),i!==e)if(c=A(),c!==e)if(t.charCodeAt(o)===40?(p=L,o++):(p=e,d===0&&g(B)),p!==e){if(P=[],x=z(),x!==e)for(;x!==e;)P.push(x),x=z();else P=e;P!==e?(t.charCodeAt(o)===41?(x=w,o++):(x=e,d===0&&g(D)),x!==e?(T=A(),T!==e?(t.charCodeAt(o)===41?(F=w,o++):(F=e,d===0&&g(D)),F!==e?($=n,s=je(i,P),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;else o=n,n=e;else o=n,n=e;return n}function $t(){let n,s,i,c,p,P,x,T,F,re;if(n=o,t.substr(o,7)===U?(s=U,o+=7):(s=e,d===0&&g(le)),s!==e)if(i=A(),i!==e)if(t.charCodeAt(o)===40?(c=L,o++):(c=e,d===0&&g(B)),c!==e)if(p=z(),p!==e)if(P=A(),P!==e){if(x=[],T=z(),T!==e)for(;T!==e;)x.push(T),T=z();else x=e;x!==e?(t.charCodeAt(o)===41?(T=w,o++):(T=e,d===0&&g(D)),T!==e?(F=N(),F!==e?(t.charCodeAt(o)===41?(re=w,o++):(re=e,d===0&&g(D)),re!==e?($=n,s=Re(p,x,F),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;else o=n,n=e;else o=n,n=e;else o=n,n=e;return n}function xt(){let n,s,i,c,p;return n=o,t.substr(o,7)===U?(s=U,o+=7):(s=e,d===0&&g(le)),s!==e?(i=z(),i!==e?(c=N(),c!==e?(t.charCodeAt(o)===41?(p=w,o++):(p=e,d===0&&g(D)),p!==e?($=n,s=Je(i,c),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e),n}function N(){let n,s,i;return n=o,s=A(),s!==e?(i=St(),i===e&&(i=Lt(),i===e&&(i=z(),i===e&&(i=vt()))),i!==e?($=n,s=Ue(i),n=s):(o=n,n=e)):(o=n,n=e),n}function St(){let n,s,i,c,p;if(n=o,t.substr(o,5)===ce?(s=ce,o+=5):(s=e,d===0&&g(Ve)),s!==e){if(i=[],c=Pe(),c!==e)for(;c!==e;)i.push(c),c=Pe();else i=e;i!==e?(c=A(),c!==e?(t.charCodeAt(o)===41?(p=w,o++):(p=e,d===0&&g(D)),p!==e?($=n,s=We(i),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;return n}function Pe(){let n,s,i,c,p,P,x,T;return n=o,s=A(),s!==e?(t.charCodeAt(o)===91?(i=Qe,o++):(i=e,d===0&&g(Ge)),i!==e?(c=A(),c!==e?(p=N(),p!==e?(P=A(),P!==e?(x=N(),x!==e?(t.charCodeAt(o)===93?(T=Ke,o++):(T=e,d===0&&g(Xe)),T!==e?($=n,s=Ye(p,x),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e),n}function Lt(){let n,s,i,c,p;if(n=o,t.charCodeAt(o)===40?(s=L,o++):(s=e,d===0&&g(B)),s!==e)if(i=z(),i!==e){for(c=[],p=N();p!==e;)c.push(p),p=N();c!==e?(t.charCodeAt(o)===41?(p=w,o++):(p=e,d===0&&g(D)),p!==e?($=n,s=Ze(i,c),n=s):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;return n}function z(){let n,s,i,c,p;if(n=o,s=A(),s!==e)if(i=o,d++,t.substr(o,6)===pe?(c=pe,o+=6):(c=e,d===0&&g(et)),d--,c===e?i=void 0:(o=i,i=e),i!==e){if(c=[],ue.test(t.charAt(o))?(p=t.charAt(o),o++):(p=e,d===0&&g(de)),p!==e)for(;p!==e;)c.push(p),ue.test(t.charAt(o))?(p=t.charAt(o),o++):(p=e,d===0&&g(de));else c=e;c!==e?($=n,s=tt(c),n=s):(o=n,n=e)}else o=n,n=e;else o=n,n=e;return n}function vt(){let n,s;return n=o,s=At(),s===e&&(s=Tt(),s===e&&(s=Et(),s===e&&(s=Ct()))),s!==e&&($=n,s=nt(s)),n=s,n}function At(){let n,s,i,c;if(n=o,s=A(),s!==e){if(i=[],fe.test(t.charAt(o))?(c=t.charAt(o),o++):(c=e,d===0&&g(ge)),c!==e)for(;c!==e;)i.push(c),fe.test(t.charAt(o))?(c=t.charAt(o),o++):(c=e,d===0&&g(ge));else i=e;i!==e?($=n,s=rt(),n=s):(o=n,n=e)}else o=n,n=e;return n}function Tt(){let n,s,i;return n=o,s=A(),s!==e?(t.substr(o,5)===me?(i=me,o+=5):(i=e,d===0&&g(ot)),i===e&&(t.substr(o,6)===ye?(i=ye,o+=6):(i=e,d===0&&g(st)),i===e&&(t.substr(o,2)===he?(i=he,o+=2):(i=e,d===0&&g(it)),i===e&&(t.substr(o,2)===be?(i=be,o+=2):(i=e,d===0&&g(at))))),i!==e?($=n,s=lt(i),n=s):(o=n,n=e)):(o=n,n=e),n}function Et(){let n,s,i;return n=o,s=A(),s!==e?(t.substr(o,3)===$e?(i=$e,o+=3):(i=e,d===0&&g(ct)),i!==e?($=n,s=pt(),n=s):(o=n,n=e)):(o=n,n=e),n}function Ct(){let n,s,i,c,p;if(n=o,s=A(),s!==e)if(t.charCodeAt(o)===34?(i=xe,o++):(i=e,d===0&&g(Se)),i!==e){if(c=[],Le.test(t.charAt(o))?(p=t.charAt(o),o++):(p=e,d===0&&g(ve)),p!==e)for(;p!==e;)c.push(p),Le.test(t.charAt(o))?(p=t.charAt(o),o++):(p=e,d===0&&g(ve));else c=e;c!==e?(t.charCodeAt(o)===34?(p=xe,o++):(p=e,d===0&&g(Se)),p!==e?($=n,s=ut(c),n=s):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;return n}function A(){let n,s,i;for(d++,n=o,s=[],b.test(t.charAt(o))?(i=t.charAt(o),o++):(i=e,d===0&&g(y));i!==e;)s.push(i),b.test(t.charAt(o))?(i=t.charAt(o),o++):(i=e,d===0&&g(y));return s!==e&&($=n,s=ft()),n=s,d--,n===e&&(s=e,d===0&&g(dt)),n}if(W=u(),W!==e&&o===t.length)return W;throw W!==e&&o<t.length&&g(mt()),Ee(ne,_<t.length?t.charAt(_):null,_<t.length?H(_,_+1):H(_,_))}var Me=Qt;var Ie=`/* ######## color variables ###### */
.tree {
  --branch-color: #666;
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
    white-space: nowrap;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: 0;
    padding-top: 1.5em;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin-left: 1em;
    margin-right: 1em;
    margin-top: 1.5em;
    padding: .2em .5em;
    position: relative;
    box-sizing: border-box;
}

/* ########### custom AST node  styles ######## */
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background);
}
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: 0.85em;
  text-align: right;

  position: absolute;
  top: calc(-0.85em - 1.5em);
  right: var(--edgetext-right, 50%); /* to be set dynamically */
  margin-right: -1.5em;
  background-color: rgba(255,255,255,0.7);
}
.tree .terminal-symbol {
  border-width: .2em;
  border-style: double;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    width: var(--connector-width, 0px); /* to be set dynamically */
    left: var(--connector-left, 50%); /* to be set dynamically */
    position: absolute;
    top: -1.5em;
    transform: var(--connector-transform); /* to be set dynamically */
}
.tree span.terminal-symbol:before {
  top: calc(-1.5em - .2em);
}

/* ####### highlight way back up from a node ###### */
.tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
}

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree .hole:hover {
  cursor: pointer;
}

.tree [data-collapsed="true"] {
  display: none;
}

/* ######### holes ########## */
.tree .char {
  display: inline;
  margin: 0;
  border: none;
  padding: 0;
  border-radius: 0;
  background-color: transparent;
  transition: background-color 1s ease-out;
}
.tree .char::before {
  display: none;
}

.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}

/* ########### quiz ########## */
.tree span[data-quiz-state="production"] .name,
.tree span[data-quiz-state="production"] .code,
.tree span[data-quiz-state="production"] .hole-marking {
  display: none;
}

.tree span[data-quiz-state="hole-marking"] .name,
.tree span[data-quiz-state="hole-marking"] .code,
.tree span[data-quiz-state="hole-marking"] .production {
  display: none;
}

.tree span[data-quiz-state="done"] .production,
.tree span[data-quiz-state="done"] .hole-marking {
  display: none;
}

.tree textarea,
.tree .marker-container {
  resize: none;
  font-size: calc(1em);
  padding: 2px;
  margin: .2em;
  border: none;
  box-sizing: border-box;
}

.tree .textarea-container {
  position: relative;
}
.tree textarea {
  background-color: transparent;
}
.tree .marker-container {
  background-color: white;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
}
.tree .invisible {
  visibility: hidden;
  z-index: -1;
}
.tree .hole-marker {
  background-color: lime;
  border: 1px solid darkgreen;
  padding: 1px;
  z-index: 1;
}
`;var Oe=`/* modifications for tree quiz */
/* bsltree[quiz="true"] .tree {
  --border-pending: orange;
  --tooltip-bg: var(--hole-yellow);
  --tooltip-border: var(--branch-color);
  --wrong-border: darkred;
  --correct-border: darkgreen;
  --selection-tentative: yellow;
  --selection-border: var(--branch-color);
  --selection-correct: green;
  --selection-wrong: red;
}
bsltree[quiz="true"] .tree {
  margin-top: 4em;
}
bsltree[quiz="true"] .tree span {
  cursor: auto;
  border: 1px solid var(--correct-border);
}
bsltree[quiz="true"] .tree span[data-collapsed="true"] {
  border: 1px solid var(--border-pending);
}
bsltree[quiz="true"] .tree span[data-wrong="true"] {
  border: 1px solid var(--wrong-border);
} */

/* ######### style production and select */
/* bsltree[quiz="true"] .tree .name {
  font-size: inherit;
}

bsltree[quiz="true"] .tree .name {
  position: relative;
  display: block;
  text-align: left;
}

bsltree[quiz="true"] .tree .name > select {
  position: absolute;
  display: inline-block;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
} */

/* ############ hide name tooltip by default */
/* bsltree[quiz="true"] .tree .tip {
  display: none;
} */

/* ############# display tooltip over root */
/* bsltree[quiz="true"] .tree > li > span[data-quiz="production"] .name > .tip,
bsltree[quiz="true"] .tree > li > span[data-quiz="holes"] .codeblock > .tip {
  display: block;
  position: absolute;
  left: 80%;
  bottom: 150%;
  width: 18em;
  background-color: var(--tooltip-bg);
  border: 1px solid var(--tooltip-border);
  padding: .5em;
}
bsltree[quiz="true"] .tree > li > span[data-quiz="production"] .name > .tip::after,
bsltree[quiz="true"] .tree > li > span[data-quiz="holes"] .codeblock > .tip::after {
  content: "";
  position: absolute;
  width: 1em;
  height: 1em;
  left: 0.5em;
  bottom: calc(-0.5em - 1px);
  transform: rotate(45deg);
  background-color: var(--tooltip-bg);
  border-right: 1px solid var(--tooltip-border);
  border-bottom: 1px solid var(--tooltip-border);
} */

/* ########## showing/hiding code without holes */
/* bsltree[quiz="true"] .tree .codeblock {
  position: relative;
  display: block;
}
bsltree[quiz="true"] .tree .actualcode {
  display: none;
}
bsltree[quiz="true"] .tree span[data-quiz="production"] .actualcode,
bsltree[quiz="true"] .tree span[data-quiz="holes"] .actualcode {
  position: absolute;
  display: block;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: var(--node-background);
}

bsltree[quiz="true"] .tree .selection-start {
  background-color: var(--selection-tentative);
  border: 1px solid var(--selection-border);
  border-right: none;
}
bsltree[quiz="true"] .tree .selection-start ~ span {
  background-color: var(--selection-tentative);
  border-top: 1px solid var(--selection-border);
  border-bottom: 1px solid var(--selection-border);
}

bsltree[quiz="true"] .tree .selection-end {
  border: 1px solid var(--selection-border);
  border-left: none;
}
bsltree[quiz="true"] .tree .selection-end ~ span {
  border: none;
  background-color: transparent;
}

bsltree[quiz="true"] .tree .correct-selection-start,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .correct-selection-end {
  user-select: none;
  background-color: var(--selection-correct);
  border: 1px solid var(--selection-border);
}
bsltree[quiz="true"] .tree .wrong-selection-start,
bsltree[quiz="true"] .tree .wrong-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-end {
  user-select: none;
  background-color: var(--selection-wrong);
  border: 1px solid var(--selection-border);
}

bsltree[quiz="true"] .tree .correct-selection-start,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-start,
bsltree[quiz="true"] .tree .wrong-selection-middle, {
  border-right: none;
}

bsltree[quiz="true"] .tree .correct-selection-end,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-end,
bsltree[quiz="true"] .tree .wrong-selection-middle, {
  border-left: none;
} */
`;var He=`/* css for errors */
.error-wrapper{
    display:flex;
    flex-direction:column;
    margin:2vw;
    font-size:inherit;
}

.error{
    font-size:1.2em;
}
`;var te=document.createElement("style");te.innerHTML=Ie;te.innerHTML+=Oe;te.innerHTML+=He;document.getElementsByTagName("head")[0].appendChild(te);function Yt(){Array.from(document.getElementsByTagName("bsltree")).map(t=>{try{let r=Me(t.innerHTML),e=t.getAttribute("quiz")==="true";qe(r,t,e)}catch(r){Zt(t,`${r.location.start.line}:${r.location.start.column} ${r}`)}})}window.onload=()=>{Yt()};function Zt(t,r){let e=t.innerHTML;t.innerHTML="";let a=document.createElement("div");a.classList.add("error-wrapper"),t.appendChild(a);let l=`<p> BSL-Tree could not be parsed! </p>
                  <p> Input: <b style="font-size:0.9em;">${e}</b> </p>`,u=document.createElement("div");u.classList.add("origin"),u.innerHTML=l,a.appendChild(u);let f=document.createElement("pre");f.classList.add("error");let b=document.createElement("code");b.textContent=r,a.appendChild(f),f.appendChild(b)}})();
//# sourceMappingURL=data:application/json;base64,
