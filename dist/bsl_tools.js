(()=>{var V=(x=>(x.FunctionDefinition="Function Definition",x.ConstantDefinition="Constant Definition",x.StructDefinition="Struct Definition",x.FunctionCall="Function Call",x.CondExpression="Cond-Expression",x.CondOption="Cond-Option",x.Symbol="Symbol",x.Literal="Literal Value",x.Number="Number",x))(V||{});function ne(t){return W(t)||G(t)||Q(t)}function W(t){return t.type==="Function Definition"}function G(t){return t.type==="Constant Definition"}function Q(t){return t.type==="Struct Definition"}function He(t){return w(t)||j(t)||O(t)||C(t)}function w(t){return t.type==="Function Call"}function j(t){return t.type==="Cond-Expression"}function O(t){return t.type==="Symbol"}function C(t){return t.type==="Literal Value"}function U(t){return t.map(Nt).join(`
`)}function Nt(t){return ne(t)?Dt(t):E(t)}function Dt(t){if(W(t))return`(define ${R(t.name)} (${t.args.map(R).join(" ")}) ${E(t.body)})`;if(G(t))return`(define ${R(t.name)} ${E(t.value)})`;if(Q(t))return`(define-struct ${R(t.binding)} (${t.properties.map(R).join(" ")}))`;console.error("Invalid input to printDefinition")}function E(t){return w(t)?`(${R(t.name)} ${t.args.map(E).join(" ")})`:j(t)?`(cond ${t.options.map(ie).join(" ")})`:O(t)?R(t):C(t)?typeof t.value=="string"&&t.value!=="'()"?`"${t.value}"`:typeof t.value=="boolean"?t.value?"#true":"#false":`${t.value}`:(console.error("Invalid input to printE"),`<${t}>`)}function ie(t){return`[${E(t.condition)} ${E(t.result)}]`}function R(t){return t.symbol}var bn=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{type:"Cond-Option",condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},{type:"Literal Value",value:3}]},result:{type:"Literal Value",value:"isThree"}},{type:"Cond-Option",condition:{type:"Literal Value",value:!1},result:{type:"Literal Value",value:"'()"}}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:{type:"Literal Value",value:42}},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function Ne(t,s,e=!1){let a=e?Ot:jt;s.innerHTML=t.map(l=>qt(l,a)).join(`
`),Vt(s),Wt(s),e||Gt(s)}function qt(t,s){return`<ul class="tree ast"><li>${ne(t)?Kt(t,s):K(t,s)}</li></ul>`}function De(t){return typeof t.code=="string"&&(t.code=[t.code]),`
    <div class="${["hole",t.pos?`hole-${t.pos}`:"",t.placeholder==="name"?"hole-name":"",["name+","name*"].includes(t.placeholder)?"hole-names":""].join(" ")}">
      ${t.code.map(e=>`<div class="code">${e}</div>`).join(" ")}
      <div class="placeholder">${t.placeholder}</div>
    </div>
  `}function ze(t){return typeof t.code=="string"&&(t.code=[t.code]),le(t.code.join(" "))}function jt(t){return`
    <span>
      <div class="name">${t.production}</div>
      <div>
        ${t.code.map(s=>typeof s=="string"?s:De(s)).join(" ")}
      </div>
    </span>
  `}function le(t){return t.split(" ").map(s=>s.trim()).filter(s=>s.length>0).join(" ").replaceAll("( ","(").replaceAll(" )",")")}function Ot(t){let s=le(t.code.map(a=>typeof a=="string"?a:ze(a)).join(" "));return`
    <span data-collapsed="true"
          data-holes="${JSON.stringify(t.code.filter(a=>typeof a!="string").map(a=>ze(a))).replaceAll('"',"&quot;")}"
          data-quiz="production">
      <div class="name">
         ${t.production}
         <select data-solution="${t.production}"
                 onchange="guessProduction(event)">
            <option>---</option>
            ${Object.values(V).map(a=>`<option value="${a}">${a}</option>`)}
         </select>
         <div class="tip">
            First, select the correct production...
         </div>
      </div>
      <div class="codeblock">
        ${le(t.code.map(a=>typeof a=="string"?a:De(a)).join(" "))}
        <div class="actualcode">
          ${s.split("").map(a=>`<span class="char"
                   onmouseup="endSelection(event)">${a}</span>`).join("")}
        </div>
        <div class="tip">
           Second, select all subexpressions to expand the node!
        </div>
      </div>
    </span>
  `}function Ut(t){let s=t.target,e=s.getAttribute("data-solution"),a=s.parentElement,l=a.parentElement;s.value===e?(a.innerHTML=e,l.removeAttribute("data-wrong"),l.getAttribute("data-holes")==="[]"?(l.setAttribute("data-quiz","done"),l.removeAttribute("data-collapsed")):(l.setAttribute("data-quiz","holes"),Ft(a.nextElementSibling))):l.setAttribute("data-wrong","true")}window.guessProduction=Ut;function Ft(t){let s=I([t],".actualcode/span");if(s.length<1)return;let e=document.createRange();e.setStart(s[0],0);let a=s.length<10?s.length:10,l=window.getSelection();for(let c=0;c<a;c++)window.setTimeout(()=>{e.setEnd(s[c],0),l.addRange(e)},c*100);window.setTimeout(()=>l.empty(),1500)}function kt(t){let e=t.target.parentElement,a=I([e],"../..")[0];if(a.getAttribute("data-quiz")!=="holes")return;let l=window.getSelection();if(!l)return;let c=Array.from(e.children).filter(y=>l.containsNode(y,!0)),d=c.map(y=>y.innerHTML).join(""),g=JSON.parse(a.getAttribute("data-holes").replaceAll("&quot;",'"'));if(!(!g.length||g.length<1)){if(g.includes(d)){g=g.filter(b=>b!==d),c.map(b=>b.classList.add("correct-selection-middle"));let y=c[0];y.classList.remove("correct-selection-middle"),y.classList.remove("selection-start"),y.classList.add("correct-selection-start");let x=c[c.length-1];x.classList.remove("correct-selection-middle"),x.classList.remove("selection-end"),x.classList.add("correct-selection-end"),g.length<=0?(a.removeAttribute("data-holes"),a.setAttribute("data-quiz","done"),window.setTimeout(()=>a.removeAttribute("data-collapsed"),1e3)):a.setAttribute("data-holes",JSON.stringify(g).replaceAll('"',"&quot;"))}else{c.map(b=>b.classList.add("wrong-selection-middle"));let y=c[0];y.classList.remove("wrong-selection-middle"),y.classList.remove("selection-start"),y.classList.add("wrong-selection-start");let x=c[c.length-1];x.classList.remove("wrong-selection-middle"),x.classList.remove("selection-end"),x.classList.add("wrong-selection-end"),window.setTimeout(()=>{c.map(b=>b.classList.remove("wrong-selection-middle")),y.classList.remove("wrong-selection-start"),x.classList.remove("wrong-selection-end")},1e3)}l.empty()}}window.endSelection=kt;function Kt(t,s){if(W(t)){let e={production:t.type,code:["( define (",{pos:1,code:U([t.name]),placeholder:"name"},{pos:2,code:t.args.map(R),placeholder:"name+"},") ",{pos:3,code:U([t.body]),placeholder:"e"},")"]};return`
      ${s(e)}
      <ul>
        <li class="child-1">${F(t.name,s)}</li>
        ${t.args.map(a=>`<li class="child-2">${F(a,s)}</li>`).join("")}
        <li class="child-3">${K(t.body,s)}</li>
      </ul>`}else if(G(t)){let e={production:t.type,code:["( define ",{pos:1,code:U([t.name]),placeholder:"name"},{pos:2,code:U([t.value]),placeholder:"e"},")"]};return`
      ${s(e)}
      <ul>
        <li class="child-1">${F(t.name,s)}</li>
        <li class="child-2">${K(t.value,s)}</li>
      </ul>`}else if(Q(t)){let e={production:t.type,code:["( define-struct ",{pos:1,code:U([t.binding]),placeholder:"name"},"(",{pos:2,code:t.properties.map(R),placeholder:"name*"},") )"]};return`
      ${s(e)}
      <ul>
        <li class="child-1">${F(t.binding,s)}</li>
        ${t.properties.map(a=>`<li class="child-2">${F(a,s)}</li>`).join("")}
      </ul>`}else console.error("Invalid input to printDefinition")}function K(t,s){if(w(t)){let e={production:t.type,code:["( ",{pos:1,code:U([t.name]),placeholder:"name"}," ",{pos:2,code:t.args.map(E),placeholder:"e*"},")"]};return`
      ${s(e)}
      <ul>
        <li class="child-1">${F(t.name,s)}</li>
        ${t.args.map(a=>`<li class="child-2">${K(a,s)}</li>`).join("")}
      </ul>`}else if(j(t)){let e={production:t.type,code:["( cond ",{pos:2,code:t.options.map(ie),placeholder:"[ e e ]+"},")"]};return`
      ${s(e)}
      <ul>
        ${t.options.map(a=>`<li class="child-2">${Jt(a,s)}</li>`).join(" ")}
      </ul>`}else{if(O(t))return F(t,s);if(C(t)){let e={production:t.type,code:[E(t)]};return s(e)}else return console.error("Invalid input to treeE"),console.error(t),`
      <span>
        <div class="name">Invalid input to treeE</div>
        <div>${t}</div>
      </span>
    `}}function Jt(t,s){let e={production:t.type,code:["[",{pos:1,code:E(t.condition),placeholder:"e"}," ",{pos:2,code:E(t.result),placeholder:"e"},"]"]};return`
    ${s(e)}
    <ul>
      <li class="child-1">${K(t.condition,s)}</li>
      <li class="child-2">${K(t.result,s)}</li>
    </ul>
  `}function F(t,s){let e={production:t.type,code:[R(t)]};return s(e)}function Vt(t){ae(t,"hole-1","child-1"),ae(t,"hole-2","child-2"),ae(t,"hole-3","child-3")}function ae(t,s,e){Array.from(t.getElementsByClassName(s)).map(a=>{let l=a,c=.5*(l.getBoundingClientRect().x+l.getBoundingClientRect().right);if(c==0)return;let d=I([l],"../../+")[0];Array.from(d.children).filter(g=>g.classList.contains(e)).map(g=>{let y=g,x=.5*(y.getBoundingClientRect().x+y.getBoundingClientRect().right),b=c-x,S="";b<0?S+=`
          --connector-left: auto;
          --connector-right: 50%;
          --connector-border-left-style: solid;
          --connector-border-right-style: none;`:S+=`
          --connector-left: 50%;
          --connector-right: auto;
          --connector-border-left-style: none;
          --connector-border-right-style: solid;`,S+=`--connector-width: ${Math.abs(b)+1}px;`,y.style.cssText=S})})}function Wt(t){Array.from(t.getElementsByClassName("name")).map(s=>{let e=I([s],"+/.hole/.code");if(e.length==0)return;let a=I([s],"../+/li/span/.name/+");if(e.length!=a.length){console.error("Error: More or less children than code figments",s,e,a);return}for(let l=0;l<e.length;l++){let c=e[l],d=a[l],g=c.getBoundingClientRect(),y=d.getBoundingClientRect();c.style.cssText=`
        --translate-x: ${(y.x+y.right)/2-(g.x+g.right)/2}px;
        --translate-y: ${y.y-g.y}px;
      `}})}function I(t,s){let e=s.split("/"),a=e.shift();if(a=="")return t;let l=e.join("/");if(a==".."){let c=t.map(d=>d.parentElement);return c.every(d=>d)?I(c,l):(console.error(`Error traversing ${s}: Missing parentElement`,t),[])}else if(a=="+"){let c=t.map(d=>d.nextElementSibling);return c.every(d=>d)?I(c,l):(console.error(`Error traversing ${s}: Missing nextElementSibling`,t),[])}else if(a.startsWith(".")){let c=a.slice(1),d=t.flatMap(g=>Array.from(g.children).filter(y=>y.classList.contains(c)));return I(d,l)}else{let c=t.flatMap(d=>Array.from(d.children).filter(g=>g.tagName==a.toUpperCase()));return I(c,l)}}function Gt(t){Array.from(t.getElementsByTagName("span")).map(s=>{s.onclick=()=>{let e=s;if(e.getAttribute("data-collapsed"))e.removeAttribute("data-collapsed");else{e.setAttribute("data-collapsed","true");let a=e.nextElementSibling;if(!a)return;Array.from(a.getElementsByTagName("span")).map(l=>{l.setAttribute("data-collapsed","true")})}}})}function ce(t,s,e){return e=e||" ",t.length>s?t:(s-=t.length,e+=e.repeat(s),t+e.slice(0,s))}var H=class extends Error{constructor(e,a,l,c){super();this.message=e,this.expected=a,this.found=l,this.location=c,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,H.prototype):this.__proto__=H.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,H)}static buildMessage(e,a){function l(b){return b.charCodeAt(0).toString(16).toUpperCase()}function c(b){return b.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,S=>"\\x0"+l(S)).replace(/[\x10-\x1F\x7F-\x9F]/g,S=>"\\x"+l(S))}function d(b){return b.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,S=>"\\x0"+l(S)).replace(/[\x10-\x1F\x7F-\x9F]/g,S=>"\\x"+l(S))}function g(b){switch(b.type){case"literal":return'"'+c(b.text)+'"';case"class":let S=b.parts.map(L=>Array.isArray(L)?d(L[0])+"-"+d(L[1]):d(L));return"["+(b.inverted?"^":"")+S+"]";case"any":return"any character";case"end":return"end of input";case"other":return b.description}}function y(b){let S=b.map(g),L,z;if(S.sort(),S.length>0){for(L=1,z=1;L<S.length;L++)S[L-1]!==S[L]&&(S[z]=S[L],z++);S.length=z}switch(S.length){case 1:return S[0];case 2:return S[0]+" or "+S[1];default:return S.slice(0,-1).join(", ")+", or "+S[S.length-1]}}function x(b){return b?'"'+c(b)+'"':"end of input"}return"Expected "+y(e)+" but "+x(a)+" found."}format(e){let a="Error: "+this.message;if(this.location){let l=null,c;for(c=0;c<e.length;c++)if(e[c].source===this.location.source){l=e[c].text.split(/\r\n|\n|\r/g);break}let d=this.location.start,g=this.location.source+":"+d.line+":"+d.column;if(l){let y=this.location.end,x=ce("",d.line.toString().length," "),b=l[d.line-1],S=d.line===y.line?y.column:b.length+1;a+=`
 --> `+g+`
`+x+` |
`+d.line+" | "+b+`
`+x+" | "+ce("",d.column-1," ")+ce("",S-d.column,"^")}else a+=`
 at `+g}return a}};function Xt(t,s){s=s!==void 0?s:{};let e={},a=s.grammarSource,l={Program:Pe},c=Pe,d=function(n){return n},g=/^[\t \n \r]/,y=te(["	"," ",`
`," ","\r"],!1,!1),x=function(n){return n},b="(define-struct",S=$("(define-struct",!1),L="(",z=$("(",!1),N=")",D=$(")",!1),Qe=function(n,o){return{type:"Struct Definition",binding:n,properties:o}},Y="(define",de=$("(define",!1),Xe=function(n,o,i){return{type:"Function Definition",name:n,args:o,body:i}},Ye=function(n,o){return{type:"Constant Definition",name:n,value:o}},Ze=function(n){return n},fe="(cond",et=$("(cond",!1),tt=function(n){return{type:"Cond-Expression",options:n}},nt="[",rt=$("[",!1),ot="]",st=$("]",!1),it=function(n,o){return{type:"Cond-Option",condition:n,result:o}},at=function(n,o){return{type:"Function Call",name:n,args:o}},ge="define",lt=$("define",!1),me=/^[^",'`()[\]{}|#\n\t\r0-9 ]/,ye=te(['"',",","'","`","(",")","[","]","{","}","|","#",`
`,"	","\r",["0","9"]," "],!0,!1),ct=function(n){return{type:"Symbol",symbol:n.join("")}},pt=function(n){return{type:"Literal Value",value:n}},Se=/^[0-9]/,be=te([["0","9"]],!1,!1),ut=function(){return parseInt(Lt(),10)},xe="#true",dt=$("#true",!1),he="#false",ft=$("#false",!1),Te="#t",gt=$("#t",!1),Le="#f",mt=$("#f",!1),yt=function(n){return n==="#true"||n==="#t"},ve="'()",St=$("'()",!1),bt=function(){return"'()"},Ae='"',$e=$('"',!1),Ce=/^[^"]/,_e=te(['"'],!0,!1),xt=function(n){return n.join("")},ht=Re("whitespace"),Tt=function(){},r=0,h=0,Z=[{line:1,column:1}],B=0,oe=[],f=0,ee;if(s.startRule!==void 0){if(!(s.startRule in l))throw new Error(`Can't start parsing from rule "`+s.startRule+'".');c=l[s.startRule]}function Lt(){return t.substring(h,r)}function gn(){return J(h,r)}function mn(n,o){throw o=o!==void 0?o:J(h,r),Be([Re(n)],t.substring(h,r),o)}function yn(n,o){throw o=o!==void 0?o:J(h,r),At(n,o)}function $(n,o){return{type:"literal",text:n,ignoreCase:o}}function te(n,o,i){return{type:"class",parts:n,inverted:o,ignoreCase:i}}function Sn(){return{type:"any"}}function vt(){return{type:"end"}}function Re(n){return{type:"other",description:n}}function Ee(n){let o=Z[n],i;if(o)return o;for(i=n-1;!Z[i];)i--;for(o=Z[i],o={line:o.line,column:o.column};i<n;)t.charCodeAt(i)===10?(o.line++,o.column=1):o.column++,i++;return Z[n]=o,o}function J(n,o){let i=Ee(n),p=Ee(o);return{source:a,start:{offset:n,line:i.line,column:i.column},end:{offset:o,line:p.line,column:p.column}}}function m(n){r<B||(r>B&&(B=r,oe=[]),oe.push(n))}function At(n,o){return new H(n,[],"",o)}function Be(n,o,i){return new H(H.buildMessage(n,o),n,o,i)}function Pe(){let n,o,i;if(n=r,o=[],i=we(),i!==e)for(;i!==e;)o.push(i),i=we();else o=e;return o!==e&&(h=n,o=d(o)),n=o,n}function we(){let n,o,i,p;if(n=r,o=$t(),o===e&&(o=M()),o!==e){if(i=[],g.test(t.charAt(r))?(p=t.charAt(r),r++):(p=e,f===0&&m(y)),p!==e)for(;p!==e;)i.push(p),g.test(t.charAt(r))?(p=t.charAt(r),r++):(p=e,f===0&&m(y));else i=e;i!==e?(h=n,o=d(o),n=o):(r=n,n=e)}else r=n,n=e;return n}function $t(){let n,o,i;return n=r,o=v(),o!==e?(i=Ct(),i===e&&(i=_t(),i===e&&(i=Rt())),i!==e?(h=n,o=x(i),n=o):(r=n,n=e)):(r=n,n=e),n}function Ct(){let n,o,i,p,u,_,T,A,q;if(n=r,t.substr(r,14)===b?(o=b,r+=14):(o=e,f===0&&m(S)),o!==e)if(i=P(),i!==e)if(p=v(),p!==e)if(t.charCodeAt(r)===40?(u=L,r++):(u=e,f===0&&m(z)),u!==e){if(_=[],T=P(),T!==e)for(;T!==e;)_.push(T),T=P();else _=e;_!==e?(t.charCodeAt(r)===41?(T=N,r++):(T=e,f===0&&m(D)),T!==e?(A=v(),A!==e?(t.charCodeAt(r)===41?(q=N,r++):(q=e,f===0&&m(D)),q!==e?(h=n,o=Qe(i,_),n=o):(r=n,n=e)):(r=n,n=e)):(r=n,n=e)):(r=n,n=e)}else r=n,n=e;else r=n,n=e;else r=n,n=e;else r=n,n=e;return n}function _t(){let n,o,i,p,u,_,T,A,q,se;if(n=r,t.substr(r,7)===Y?(o=Y,r+=7):(o=e,f===0&&m(de)),o!==e)if(i=v(),i!==e)if(t.charCodeAt(r)===40?(p=L,r++):(p=e,f===0&&m(z)),p!==e)if(u=P(),u!==e)if(_=v(),_!==e){if(T=[],A=P(),A!==e)for(;A!==e;)T.push(A),A=P();else T=e;T!==e?(t.charCodeAt(r)===41?(A=N,r++):(A=e,f===0&&m(D)),A!==e?(q=M(),q!==e?(t.charCodeAt(r)===41?(se=N,r++):(se=e,f===0&&m(D)),se!==e?(h=n,o=Xe(u,T,q),n=o):(r=n,n=e)):(r=n,n=e)):(r=n,n=e)):(r=n,n=e)}else r=n,n=e;else r=n,n=e;else r=n,n=e;else r=n,n=e;else r=n,n=e;return n}function Rt(){let n,o,i,p,u;return n=r,t.substr(r,7)===Y?(o=Y,r+=7):(o=e,f===0&&m(de)),o!==e?(i=P(),i!==e?(p=M(),p!==e?(t.charCodeAt(r)===41?(u=N,r++):(u=e,f===0&&m(D)),u!==e?(h=n,o=Ye(i,p),n=o):(r=n,n=e)):(r=n,n=e)):(r=n,n=e)):(r=n,n=e),n}function M(){let n,o,i;return n=r,o=v(),o!==e?(i=Et(),i===e&&(i=Bt(),i===e&&(i=P(),i===e&&(i=Pt()))),i!==e?(h=n,o=Ze(i),n=o):(r=n,n=e)):(r=n,n=e),n}function Et(){let n,o,i,p,u;if(n=r,t.substr(r,5)===fe?(o=fe,r+=5):(o=e,f===0&&m(et)),o!==e){if(i=[],p=Ie(),p!==e)for(;p!==e;)i.push(p),p=Ie();else i=e;i!==e?(p=v(),p!==e?(t.charCodeAt(r)===41?(u=N,r++):(u=e,f===0&&m(D)),u!==e?(h=n,o=tt(i),n=o):(r=n,n=e)):(r=n,n=e)):(r=n,n=e)}else r=n,n=e;return n}function Ie(){let n,o,i,p,u,_,T,A;return n=r,o=v(),o!==e?(t.charCodeAt(r)===91?(i=nt,r++):(i=e,f===0&&m(rt)),i!==e?(p=v(),p!==e?(u=M(),u!==e?(_=v(),_!==e?(T=M(),T!==e?(t.charCodeAt(r)===93?(A=ot,r++):(A=e,f===0&&m(st)),A!==e?(h=n,o=it(u,T),n=o):(r=n,n=e)):(r=n,n=e)):(r=n,n=e)):(r=n,n=e)):(r=n,n=e)):(r=n,n=e)):(r=n,n=e),n}function Bt(){let n,o,i,p,u;if(n=r,t.charCodeAt(r)===40?(o=L,r++):(o=e,f===0&&m(z)),o!==e)if(i=P(),i!==e){for(p=[],u=M();u!==e;)p.push(u),u=M();p!==e?(t.charCodeAt(r)===41?(u=N,r++):(u=e,f===0&&m(D)),u!==e?(h=n,o=at(i,p),n=o):(r=n,n=e)):(r=n,n=e)}else r=n,n=e;else r=n,n=e;return n}function P(){let n,o,i,p,u;if(n=r,o=v(),o!==e)if(i=r,f++,t.substr(r,6)===ge?(p=ge,r+=6):(p=e,f===0&&m(lt)),f--,p===e?i=void 0:(r=i,i=e),i!==e){if(p=[],me.test(t.charAt(r))?(u=t.charAt(r),r++):(u=e,f===0&&m(ye)),u!==e)for(;u!==e;)p.push(u),me.test(t.charAt(r))?(u=t.charAt(r),r++):(u=e,f===0&&m(ye));else p=e;p!==e?(h=n,o=ct(p),n=o):(r=n,n=e)}else r=n,n=e;else r=n,n=e;return n}function Pt(){let n,o;return n=r,o=wt(),o===e&&(o=It(),o===e&&(o=Ht(),o===e&&(o=zt()))),o!==e&&(h=n,o=pt(o)),n=o,n}function wt(){let n,o,i,p;if(n=r,o=v(),o!==e){if(i=[],Se.test(t.charAt(r))?(p=t.charAt(r),r++):(p=e,f===0&&m(be)),p!==e)for(;p!==e;)i.push(p),Se.test(t.charAt(r))?(p=t.charAt(r),r++):(p=e,f===0&&m(be));else i=e;i!==e?(h=n,o=ut(),n=o):(r=n,n=e)}else r=n,n=e;return n}function It(){let n,o,i;return n=r,o=v(),o!==e?(t.substr(r,5)===xe?(i=xe,r+=5):(i=e,f===0&&m(dt)),i===e&&(t.substr(r,6)===he?(i=he,r+=6):(i=e,f===0&&m(ft)),i===e&&(t.substr(r,2)===Te?(i=Te,r+=2):(i=e,f===0&&m(gt)),i===e&&(t.substr(r,2)===Le?(i=Le,r+=2):(i=e,f===0&&m(mt))))),i!==e?(h=n,o=yt(i),n=o):(r=n,n=e)):(r=n,n=e),n}function Ht(){let n,o,i;return n=r,o=v(),o!==e?(t.substr(r,3)===ve?(i=ve,r+=3):(i=e,f===0&&m(St)),i!==e?(h=n,o=bt(),n=o):(r=n,n=e)):(r=n,n=e),n}function zt(){let n,o,i,p,u;if(n=r,o=v(),o!==e)if(t.charCodeAt(r)===34?(i=Ae,r++):(i=e,f===0&&m($e)),i!==e){if(p=[],Ce.test(t.charAt(r))?(u=t.charAt(r),r++):(u=e,f===0&&m(_e)),u!==e)for(;u!==e;)p.push(u),Ce.test(t.charAt(r))?(u=t.charAt(r),r++):(u=e,f===0&&m(_e));else p=e;p!==e?(t.charCodeAt(r)===34?(u=Ae,r++):(u=e,f===0&&m($e)),u!==e?(h=n,o=xt(p),n=o):(r=n,n=e)):(r=n,n=e)}else r=n,n=e;else r=n,n=e;return n}function v(){let n,o,i;for(f++,n=r,o=[],g.test(t.charAt(r))?(i=t.charAt(r),r++):(i=e,f===0&&m(y));i!==e;)o.push(i),g.test(t.charAt(r))?(i=t.charAt(r),r++):(i=e,f===0&&m(y));return o!==e&&(h=n,o=Tt()),n=o,f--,n===e&&(o=e,f===0&&m(ht)),n}if(ee=c(),ee!==e&&r===t.length)return ee;throw ee!==e&&r<t.length&&m(vt()),Be(oe,B<t.length?t.charAt(B):null,B<t.length?J(B,B+1):J(B,B))}var pe=Xt;function Me(t){return t.type==="Hole"}function ue(t){return t.type==="Split"}function qe(t){return t.type==="Prim"}function je(t,s){let e=t[0];console.log("expression",e);let a={type:"Stepper",root:s,originExpr:e,stepperTree:[],currentStep:0},l=Oe(e,a);console.log("stepper",l),s.innerHTML=rn(l)}function Oe(t,s){if(C(t))return s;{let e=Zt(t),a=C(e)?e:e.plugResult.expr,l={type:"Stepper",root:s.root,originExpr:s.originExpr,stepperTree:[...s.stepperTree,e],currentStep:s.currentStep};return Oe(a,l)}}function Zt(t){let s=en(t);if(ue(s)){let e=tn(s.redex),a=nn(e,s.context);return{type:"StepResult",splitResult:s,plugResult:a}}else return t}function en(t){if(w(t)){let s=t.name,e=t.args,a={type:"Hole",index:0};console.log("split",t);for(let l=0;l<e.length;l++)if(w(e[l])){let c=e[l];return a.index=l,{type:"Split",redex:{type:"Redex",name:c.name,args:c.args},context:{type:"Context",name:s,args:[...e.slice(0,l),a,...e.slice(l+1)]}}}return{type:"Split",redex:{type:"Redex",name:s,args:e},context:{type:"Context",name:null,args:[a]}}}else{if(C(t))return t;if(j(t)||O(t)||t==null){console.log("error: expr is either Cond, Name, or undefined");return}}}function tn(t){if(t.name.symbol==="+"){let s=0;return t.args.forEach(e=>{if(C(e))s+=e.value;else{console.error("error: argument is not a literal: "+e);return}}),{type:"Prim",redex:t,literal:{type:"Literal Value",value:s}}}else{console.error("error: Operation is not +");return}}function nn(t,s){let e=s.args,a=s.name,l=t.literal;for(let c=0;c<e.length;c++){if(a==null)return{type:"PlugResult",rule:t,expr:l};if(Me(e[c])){let d=[...e.slice(0,c),l,...e.slice(c+1)],g={type:"Function Call",name:a,args:d},y={type:"Kong",context:s,redexRule:t};return{type:"PlugResult",rule:y,expr:g}}}console.error("error: no hole found")}function rn(t){let s=t.stepperTree,e=t.originExpr,a=t.currentStep,l=s.slice(0,a).map(x=>x.plugResult.expr),c=s[a].splitResult,d=s[a].plugResult.rule,g=s[a].plugResult.expr;return`<stepper>
        <div class="program-wrapper">
            Original Expression:
            <pre><code>${k(e)}</code></pre>
        </div>
        <div class="eval-wrapper">
            <div class="program-overview">
                <ul>
                ${l.map(x=>k(x)).join(`
`)}
                </ul>
            </div>
            <div class="split-rule-plug">
                <div class="split">
                    Split:
                    ${on(c)}
                </div>
                <div class="rule">
                    ${qe(d)?ke(d):sn(d)}
                </div>
                <div class="plug">
                    Plug Result: <pre><code>${k(g)}</code></pre>
                </div>
            </div>
        </div>
    </stepper>`}function k(t){if(w(t)){let s=t.name.symbol,e=t.args.map(l=>k(l)).join(" ");return`(${s} ${e})`}else return C(t)?`${t.value}`:(console.error("error: expr is neither Call nor Literal"),"Neither Call nor Literal")}function on(t){if(ue(t)){let s=t.redex,e=t.context,a=Ue(s);return`
        <div class="context">
            Context: ${Fe(e)}
        </div>
        <div class="redex">
            Redex: ${a}
        </div>`}else return`${t}`}function Ue(t){let s=t.name.symbol,e=t.args.map(l=>k(l)).join(" ");return`<pre><code>(${s} ${e})</code></pre>`}function Fe(t){let s=t.name?t.name.symbol:"",e=t.args.map(l=>He(l)?k(l):'<span class="hole">[    ]</span>').join(" ");return`<pre><code>(${s} ${e})</code></pre>`}function ke(t){let e=`${t.type}
                Redex:
                ${Ue(t.redex)}
                Evaluated Redex:
                <pre><code>${k(t.literal)}</code></pre>`;return console.log(e),e}function sn(t){let s=t.type,e=t.context,a=t.redexRule;return`<p>${s} with ${a.type}:</p>
                 ${Fe(e)} 
                 ${ke(a)} `}var Ke=`.tree {
  --branch-color: #666;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: .5em 0;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin: 0 .2em .5em;
    padding: .2em .5em;
    position: relative;
}

/* ########### custom AST node  styles ######## */
.tree {
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
}
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background); /* racket azure */
}
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: small;
  text-align: left;
  margin-bottom: 0.5em;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    height: .5em;
    left: 50%;
    position: absolute;
    top: calc(-.5em - 2px);
}
/* horizontal part + part pointing to corresp. hole
   -> width etc will be set via JavaScript
      Javascript cannot style ::before elements directly
      (since they are not part of the DOM),
      the variables will be set on the parent li element */
.tree li::before {
  box-sizing: border-box;
  content: "";
  position: absolute;
  height: .5em; /* overridden for some */
  top: -.5em;
  left: var(--connector-left, auto);
  right: var(--connector-right, auto);
  width: var(--connector-width, 100%);

  border: solid 2px var(--branch-color);
  border-top-style: none;
  border-left-style: var(--connector-border-left-style, none);
  border-right-style: var(--connector-border-right-style, none);
}

/* prevent up to 3 connectors from crossing */
.tree li.child-1::before {
  height: .3em;
}
.tree li.child-1 > span::before {
  top: calc(-.7em - 2px);
  height: 0.7em;
}

.tree li.child-3::before {
  height: .7em;
}
.tree li.child-3 > span::before {
  top: calc(-.3em - 2px);
  height: 0.3em;
}

/* ####### highlight way back up from a node ###### */
.tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
}

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree span:hover {
  cursor: pointer;
}

/* smooth transition between hiding and showing */
@keyframes hide-delayed {
  99% {
    visibility: visible;
  }
  100% {
    visibility: hidden;
  }
}
.tree span[data-collapsed] ~ ul {
  opacity: 0%;
  visibility: hidden;
  animation: hide-delayed 1s;
  transition: opacity 0.5s ease-out 0.5s;
}
.tree ul {
  opacity: 100%;
  transition: opacity 1s ease-out;
}

/* ######### holes ########## */
.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}
/* show/hide parts/holes  and float them into place */
.tree .code, .tree .placeholder {
  display: inline-block;
}
.tree .code {
  color: transparent;
  transform: translate(var(--translate-x,0), var(--translate-y,0));
  transition: transform 1s ease-out, color 1s steps(1,end);
}
.tree span[data-collapsed] .code {
  color: var(--text-grey);
  transform: translate(0,0);
  transition: transform 1s ease-out, color 1s steps(1,start);
}
.tree .placeholder {
  color: var(--text-grey);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  text-align: center;
}
.tree span[data-collapsed] .placeholder {
  display: none;
}

.tree .hole-name {
  min-width: 2em;
}
.tree .hole-names {
  min-width: 2.5em;
}
`;var Je=`/* modifications for tree quiz */
bsltree[quiz="true"] .tree {
  --border-pending: orange;
  --tooltip-bg: var(--hole-yellow);
  --tooltip-border: var(--branch-color);
  --wrong-border: darkred;
  --correct-border: darkgreen;
  --selection-tentative: yellow;
  --selection-border: var(--branch-color);
  --selection-correct: green;
  --selection-wrong: red;
}
bsltree[quiz="true"] .tree {
  margin-top: 4em;
}
bsltree[quiz="true"] .tree span {
  cursor: auto;
  border: 1px solid var(--correct-border);
}
bsltree[quiz="true"] .tree span[data-collapsed="true"] {
  border: 1px solid var(--border-pending);
}
bsltree[quiz="true"] .tree span[data-wrong="true"] {
  border: 1px solid var(--wrong-border);
}

/* style production and select */
bsltree[quiz="true"] .tree .name {
  font-size: inherit;
}

bsltree[quiz="true"] .tree .name {
  position: relative;
  display: block;
  text-align: left;
}

bsltree[quiz="true"] .tree .name > select {
  position: absolute;
  display: inline-block;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

/* hide name tooltip by default */
bsltree[quiz="true"] .tree .tip {
  display: none;
}

/* display tooltip over root */
bsltree[quiz="true"] .tree > li > span[data-quiz="production"] .name > .tip,
bsltree[quiz="true"] .tree > li > span[data-quiz="holes"] .codeblock > .tip {
  display: block;
  position: absolute;
  left: 80%;
  bottom: 150%;
  width: 18em;
  background-color: var(--tooltip-bg);
  border: 1px solid var(--tooltip-border);
  padding: .5em;
}
bsltree[quiz="true"] .tree > li > span[data-quiz="production"] .name > .tip::after,
bsltree[quiz="true"] .tree > li > span[data-quiz="holes"] .codeblock > .tip::after {
  content: "";
  position: absolute;
  width: 1em;
  height: 1em;
  left: 0.5em;
  bottom: calc(-0.5em - 1px);
  transform: rotate(45deg);
  background-color: var(--tooltip-bg);
  border-right: 1px solid var(--tooltip-border);
  border-bottom: 1px solid var(--tooltip-border);
}

/* showing/hiding code without holes */
bsltree[quiz="true"] .tree .codeblock {
  position: relative;
  display: block;
}
bsltree[quiz="true"] .tree .actualcode {
  display: none;
}
bsltree[quiz="true"] .tree span[data-quiz="production"] .actualcode,
bsltree[quiz="true"] .tree span[data-quiz="holes"] .actualcode {
  position: absolute;
  display: block;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: var(--node-background);
}
bsltree[quiz="true"] .tree .char {
  display: inline;
  margin: 0;
  border: none;
  padding: 0;
  border-radius: 0;
  background-color: transparent;
  transition: background-color 1s ease-out;
}
bsltree[quiz="true"] .tree .char::before {
  display: none;
}
bsltree[quiz="true"] .tree .selection-start {
  background-color: var(--selection-tentative);
  border: 1px solid var(--selection-border);
  border-right: none;
}
bsltree[quiz="true"] .tree .selection-start ~ span {
  background-color: var(--selection-tentative);
  border-top: 1px solid var(--selection-border);
  border-bottom: 1px solid var(--selection-border);
}

bsltree[quiz="true"] .tree .selection-end {
  border: 1px solid var(--selection-border);
  border-left: none;
}
bsltree[quiz="true"] .tree .selection-end ~ span {
  border: none;
  background-color: transparent;
}

bsltree[quiz="true"] .tree .correct-selection-start,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .correct-selection-end {
  user-select: none;
  background-color: var(--selection-correct);
  border: 1px solid var(--selection-border);
}
bsltree[quiz="true"] .tree .wrong-selection-start,
bsltree[quiz="true"] .tree .wrong-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-end {
  user-select: none;
  background-color: var(--selection-wrong);
  border: 1px solid var(--selection-border);
}

bsltree[quiz="true"] .tree .correct-selection-start,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-start,
bsltree[quiz="true"] .tree .wrong-selection-middle, {
  border-right: none;
}

bsltree[quiz="true"] .tree .correct-selection-end,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-end,
bsltree[quiz="true"] .tree .wrong-selection-middle, {
  border-left: none;
}
`;var Ve=`/* css for errors */
.error-wrapper{
    display:flex;
    flex-direction:column;
    margin:2vw;
    font-size:inherit;
}

.error{
    font-size:1.2em;
}
`;var We=`stepper{
    display:flex;
    flex-direction:column;
    align-items:center;
    font-size: 1.2em;
}
/* .eval-wrapper{
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: left;
    max-width: 1200px;
    margin: 2vh auto;
} */
.program-wrapper{
margin:2vw;
padding: 1vh 2vw; 
font-size: 1.1em;
font-weight: 600;
border: 1px solid #000;
}

.split-rule-plug{
    display: flex;
    flex-direction: row;
    max-width:1200px;
    margin: 2vh auto;
    padding: 1vw;
}
.split,.rule,.plug{
    border: 2px solid #000;
    padding: 1vh 1.3vw;
}
pre{
    margin: 3vh 0;
    font-size: 1.1em;
}`;var X=document.createElement("style");X.innerHTML=Ke;X.innerHTML+=Je;X.innerHTML+=Ve;X.innerHTML+=We;document.getElementsByTagName("head")[0].appendChild(X);function dn(){Array.from(document.getElementsByTagName("bsltree")).map(t=>{try{let s=pe(t.innerHTML),e=t.getAttribute("quiz")==="true";Ne(s,t,e)}catch(s){Ge(t,`${s.location.start.line}:${s.location.start.column} ${s}`)}})}function fn(){Array.from(document.getElementsByTagName("stepper")).map(t=>{try{let s=pe(t.innerHTML);je(s,t)}catch(s){Ge(t,`${s.location.start.line}:${s.location.start.column} ${s}`)}})}window.onload=()=>{dn(),fn()};function Ge(t,s){let e=t.innerHTML;t.innerHTML="";let a=document.createElement("div");a.classList.add("error-wrapper"),t.appendChild(a);let l=`<p> BSL-Tree could not be parsed! </p>
                  <p> Input: <b style="font-size:0.9em;">${e}</b> </p>`,c=document.createElement("div");c.classList.add("origin"),c.innerHTML=l,a.appendChild(c);let d=document.createElement("pre");d.classList.add("error");let g=document.createElement("code");g.textContent=s,a.appendChild(d),d.appendChild(g)}})();
//# sourceMappingURL=data:application/json;base64,
