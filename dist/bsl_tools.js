(()=>{function U(e){return j(e)||O(e)||R(e)}function j(e){return e.type==="Function Definition"}function O(e){return e.type==="Constant Definition"}function R(e){return e.type==="Struct Definition"}function J(e){return e.type==="Function Call"}function Q(e){return e.type==="Cond-Expression"}function W(e){return e.type==="Symbol"}function q(e){return["boolean","string","number"].includes(typeof e)||e=="'()"}function $(e){return e.map(vn).join(`
`)}function vn(e){return U(e)?Sn(e):P(e)}function Sn(e){if(j(e))return`(define ${E(e.name)} (${e.args.map(E).join(" ")}) ${P(e.body)})`;if(O(e))return`(define ${E(e.name)} ${P(e.value)})`;if(R(e))return`(define-struct ${E(e.binding)} (${e.properties.map(E).join(" ")}))`;console.error("Invalid input to printDefinition")}function P(e){return J(e)?`(${E(e.name)} ${e.args.map(P).join(" ")})`:Q(e)?`(cond ${e.options.map(Y).join(" ")})`:W(e)?E(e):q(e)?typeof e=="string"&&e!=="'()"?`"${e}"`:typeof e=="boolean"?e?"#true":"#false":`${e}`:(console.error("Invalid input to printE"),`<${e}>`)}function Y(e){return`[${P(e.condition)} ${P(e.result)}]`}function E(e){return e.symbol}var Vn=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},3]},result:"isThree"},{condition:!1,result:"'()"}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:42},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function _e(e,o){o.innerHTML=e.map(xn).join(`
`),Ln(o),An(o),En(o)}function xn(e){return`<ul class="tree ast"><li>${U(e)?$n(e):G(e)}</li></ul>`}function $n(e){if(j(e))return`
      <span>
        <div class="name">Function Definition</div>
        <div>( define
          (
            <div class="hole hole-1 hole-name">
              <div class="code">${$([e.name])}</div>
              <div class="placeholder">name</div>
            </div>
            <div class="hole hole-2 hole-names">
              ${e.args.map(o=>`<div class="code">${E(o)}</div>`).join(" ")}
              <div class="placeholder">name+</div>
            </div>
          )
          <div class="hole hole-3">
            <div class="code">${$([e.body])}</div>
            <div class="placeholder">e</div>
          </div>
        )</div>
      </span>
      <ul>
        <li class="child-1">${k(e.name)}</li>
        ${e.args.map(o=>`<li class="child-2">${k(o)}</li>`).join("")}
        <li class="child-3">${G(e.body)}</li>
      </ul>`;if(O(e))return`
      <span>
        <div class="name">Constant Definition</div>
        <div>( define
          <div class="hole hole-1 hole-name">
            <div class="code">${$([e.name])}</div>
            <div class="placeholder">name</div>
          </div>

          <div class="hole hole-2">
            <div class="code">${$([e.value])}</div>
            <div class="placeholder">e</div>
          </div>
        )</div>
      </span>
      <ul>
        <li class="child-1">${k(e.name)}</li>
        <li class="child-2">${G(e.value)}</li>
      </ul>`;if(R(e))return`
      <span>
        <div class="name">Struct Definition</div>

        <div>(define-struct
          <div class="hole hole-1 hole-name">
            <div class="code">${$([e.binding])}</div>
            <div class="placeholder">name</div>
          </div>
          (
            <div class="hole hole-2 hole-names">
              ${e.properties.map(o=>`<div class="code">${E(o)}</div>`).join(" ")}
              <div class="placeholder">name*</div>
            </div>
          )
        )</div>
      </span>
      <ul>
        <li class="child-1">${k(e.binding)}</li>
        ${e.properties.map(o=>`<li class="child-2">${k(o)}</li>`).join("")}
      </ul>`;console.error("Invalid input to printDefinition")}function G(e){return J(e)?`
      <span>
        <div class="name">Function Call</div>

        <div>(
          <div class="hole hole-1 hole-name">
            <div class="code">${$([e.name])}</div>
            <div class="placeholder">name</div>
          </div>

          <div class="hole hole-2">
            ${e.args.map(o=>`<div class="code">${P(o)}</div>`).join(" ")}
            <div class="placeholder">e*</div>
          </div>
        )</div>
      </span>
      <ul>
        <li class="child-1">${k(e.name)}</li>
        ${e.args.map(o=>`<li class="child-2">${G(o)}</li>`).join("")}
      </ul>`:Q(e)?`
      <span>
        <div class="name">Cond-Expression</div>
        <div>( cond
          <div class="hole hole-2">
            ${e.options.map(o=>`<div class="code">${Y(o)}</div>`).join(" ")}
            <div class="placeholder">[ e e ]+</div>
          </div>
         )</div>
      </span>
      <ul>
        ${e.options.map(o=>`<li class="child-2">${bn(o)}</li>`).join(" ")}
      </ul>`:W(e)?k(e):q(e)?`
      <span>
        <div class="name">Literal Value</div>
        <div>${$([e])}</div>
      </span>`:(console.error("Invalid input to treeE"),`<span>${e}</span>`)}function bn(e){return`
    <span>
      <div class="name">Cond-Option</div>
      <div>[
        <div class="hole hole-1">
          <div class="code">${$([e.condition])}</div>
          <div class="placeholder">e</div>
        </div>

        <div class="hole hole-2">
          <div class="code">${$([e.result])}</div>
          <div class="placeholder">e</div>
        </div>
       ]
      </div>
    </span>
    <ul>
      <li class="child-1">${G(e.condition)}</li>
      <li class="child-2">${G(e.result)}</li>
    </ul>
  `}function k(e){return`
    <span>
      <div class="name">Symbol</div>
      <div>${e.symbol}</div>
    </span>`}function Ln(e){oe(e,"hole-1","child-1"),oe(e,"hole-2","child-2"),oe(e,"hole-3","child-3")}function oe(e,o,t){Array.from(e.getElementsByClassName(o)).map(f=>{let p=f,c=.5*(p.getBoundingClientRect().x+p.getBoundingClientRect().right);if(c==0)return;let l=z([p],"../../+")[0];Array.from(l.children).filter(g=>g.classList.contains(t)).map(g=>{let h=g,B=.5*(h.getBoundingClientRect().x+h.getBoundingClientRect().right),v=c-B,d="";v<0?d+=`
          --connector-left: auto;
          --connector-right: 50%;
          --connector-border-left-style: solid;
          --connector-border-right-style: none;`:d+=`
          --connector-left: 50%;
          --connector-right: auto;
          --connector-border-left-style: none;
          --connector-border-right-style: solid;`,d+=`--connector-width: ${Math.abs(v)+1}px;`,h.style.cssText=d})})}function An(e){Array.from(e.getElementsByClassName("name")).map(o=>{let t=z([o],"+/.hole/.code");if(t.length==0)return;let f=z([o],"../+/li/span/.name/+");if(t.length!=f.length){console.error("Error: More or less children than code figments",o,t,f);return}for(let p=0;p<t.length;p++){let c=t[p],l=f[p],g=c.getBoundingClientRect(),h=l.getBoundingClientRect();c.style.cssText=`
        --translate-x: ${(h.x+h.right)/2-(g.x+g.right)/2}px;
        --translate-y: ${h.y-g.y}px;
      `}})}function z(e,o){let t=o.split("/"),f=t.shift();if(f=="")return e;let p=t.join("/");if(f==".."){let c=e.map(l=>l.parentElement);return c.every(l=>l)?z(c,p):(console.error(`Error traversing ${o}: Missing parentElement`,e),[])}else if(f=="+"){let c=e.map(l=>l.nextElementSibling);return c.every(l=>l)?z(c,p):(console.error(`Error traversing ${o}: Missing nextElementSibling`,e),[])}else if(f.startsWith(".")){let c=f.slice(1),l=e.flatMap(g=>Array.from(g.children).filter(h=>h.classList.contains(c)));return z(l,p)}else{let c=e.flatMap(l=>Array.from(l.children).filter(g=>g.tagName==f.toUpperCase()));return z(c,p)}}function En(e){Array.from(e.getElementsByTagName("span")).map(o=>{o.onclick=()=>{let t=o;if(t.getAttribute("data-collapsed"))t.removeAttribute("data-collapsed");else{t.setAttribute("data-collapsed","true");let f=t.nextElementSibling;if(!f)return;Array.from(f.getElementsByTagName("span")).map(p=>{p.setAttribute("data-collapsed","true")})}}})}function Pe(e,o){o.innerHTML=e.map(Bn).join(`
`),Mn(o),Fn(o)}function Bn(e){return`<ul class="tree ast"><li>${U(e)?Pn(e):K(e)}</li></ul>`}function Cn(e){var o;return typeof e.code=="string"&&(e.code=[e.code]),`
    <div class="hole ${e.pos?"hole-"+e.pos:""} ${(o=e.extra_classes)==null?void 0:o.join(" ")}">
      ${e.code.map(t=>`<div class="code">${t}</div>`).join(" ")}
      <div class="placeholder">${e.placeholder}</div>
    </div>
  `}function _n(e){return`
    <span data-collapsed="true">
      <div class="name">${e.production}</div>
      <div>
        ${e.code.map(o=>typeof o=="string"?o:Cn(o)).join(" ")}
      </div>
    </span>
  `}function Pn(e){if(j(e)){let o={production:"Function Definition",code:["( define ( ",{pos:1,code:$([e.name]),placeholder:"name",extra_classes:["hole-name"]},{pos:2,code:e.args.map(E),placeholder:"name+",extra_classes:["hole-names"]},") ",{pos:3,code:$([e.body]),placeholder:"e"},")"]};return`
      ${_n(o)}
      <ul>
        <li class="child-1">${V(e.name)}</li>
        ${e.args.map(t=>`<li class="child-2">${V(t)}</li>`).join("")}
        <li class="child-3">${K(e.body)}</li>
      </ul>`}else{if(O(e))return`
      <span data-collapsed="true">
        <div class="name">Constant Definition</div>
        <div>( define
          <div class="hole hole-1 hole-name">
            <div class="code">${$([e.name])}</div>
            <div class="placeholder">name</div>
          </div>

          <div class="hole hole-2">
            <div class="code">${$([e.value])}</div>
            <div class="placeholder">e</div>
          </div>
        )</div>
      </span>
      <ul>
        <li class="child-1">${V(e.name)}</li>
        <li class="child-2">${K(e.value)}</li>
      </ul>`;if(R(e))return`
      <span data-collapsed="true">
        <div class="name">Struct Definition</div>

        <div>(define-struct
          <div class="hole hole-1 hole-name">
            <div class="code">${$([e.binding])}</div>
            <div class="placeholder">name</div>
          </div>
          (
            <div class="hole hole-2 hole-names">
              ${e.properties.map(o=>`<div class="code">${E(o)}</div>`).join(" ")}
              <div class="placeholder">name*</div>
            </div>
          )
        )</div>
      </span>
      <ul>
        <li class="child-1">${V(e.binding)}</li>
        ${e.properties.map(o=>`<li class="child-2">${V(o)}</li>`).join("")}
      </ul>`;console.error("Invalid input to printDefinition")}}function K(e){return J(e)?`
      <span data-collapsed="true">
        <div class="name">Function Call</div>

        <div>(
          <div class="hole hole-1 hole-name">
            <div class="code">${$([e.name])}</div>
            <div class="placeholder">name</div>
          </div>

          <div class="hole hole-2">
            ${e.args.map(o=>`<div class="code">${P(o)}</div>`).join(" ")}
            <div class="placeholder">e*</div>
          </div>
        )</div>
      </span>
      <ul>
        <li class="child-1">${V(e.name)}</li>
        ${e.args.map(o=>`<li class="child-2">${K(o)}</li>`).join("")}
      </ul>`:Q(e)?`
      <span data-collapsed="true">
        <div class="name">Cond-Expression</div>
        <div>( cond
          <div class="hole hole-2">
            ${e.options.map(o=>`<div class="code">${Y(o)}</div>`).join(" ")}
            <div class="placeholder">[ e e ]+</div>
          </div>
         )</div>
      </span>
      <ul>
        ${e.options.map(o=>`<li class="child-2">${Dn(o)}</li>`).join(" ")}
      </ul>`:W(e)?V(e):q(e)?`
      <span>
        <div class="name">Literal Value</div>
        <div>${$([e])}</div>
      </span>`:(console.error("Invalid input to treeE"),`<span>${e}</span>`)}function Dn(e){return`
    <span data-collapsed="true">
      <div class="name">Cond-Option</div>
      <div>[
        <div class="hole hole-1">
          <div class="code">${$([e.condition])}</div>
          <div class="placeholder">e</div>
        </div>

        <div class="hole hole-2">
          <div class="code">${$([e.result])}</div>
          <div class="placeholder">e</div>
        </div>
       ]
      </div>
    </span>
    <ul>
      <li class="child-1">${K(e.condition)}</li>
      <li class="child-2">${K(e.result)}</li>
    </ul>
  `}function V(e){return`
    <span>
      <div class="name">Symbol</div>
      <div>${e.symbol}</div>
    </span>`}function Mn(e){ae(e,"hole-1","child-1"),ae(e,"hole-2","child-2"),ae(e,"hole-3","child-3")}function ae(e,o,t){Array.from(e.getElementsByClassName(o)).map(f=>{let p=f,c=.5*(p.getBoundingClientRect().x+p.getBoundingClientRect().right);if(c==0)return;let l=Z([p],"../../+")[0];Array.from(l.children).filter(g=>g.classList.contains(t)).map(g=>{let h=g,B=.5*(h.getBoundingClientRect().x+h.getBoundingClientRect().right),v=c-B,d="";v<0?d+=`
          --connector-left: auto;
          --connector-right: 50%;
          --connector-border-left-style: solid;
          --connector-border-right-style: none;`:d+=`
          --connector-left: 50%;
          --connector-right: auto;
          --connector-border-left-style: none;
          --connector-border-right-style: solid;`,d+=`--connector-width: ${Math.abs(v)+1}px;`,h.style.cssText=d})})}function Fn(e){Array.from(e.getElementsByClassName("name")).map(o=>{let t=Z([o],"+/.hole/.code");if(t.length==0)return;let f=Z([o],"../+/li/span/.name/+");if(t.length!=f.length){console.error("Error: More or less children than code figments",o,t,f);return}for(let p=0;p<t.length;p++){let c=t[p],l=f[p],g=c.getBoundingClientRect(),h=l.getBoundingClientRect();c.style.cssText=`
        --translate-x: ${(h.x+h.right)/2-(g.x+g.right)/2}px;
        --translate-y: ${h.y-g.y}px;
      `}})}function Z(e,o){let t=o.split("/"),f=t.shift();if(f=="")return e;let p=t.join("/");if(f==".."){let c=e.map(l=>l.parentElement);return c.every(l=>l)?Z(c,p):(console.error(`Error traversing ${o}: Missing parentElement`,e),[])}else if(f=="+"){let c=e.map(l=>l.nextElementSibling);return c.every(l=>l)?Z(c,p):(console.error(`Error traversing ${o}: Missing nextElementSibling`,e),[])}else if(f.startsWith(".")){let c=f.slice(1),l=e.flatMap(g=>Array.from(g.children).filter(h=>h.classList.contains(c)));return Z(l,p)}else{let c=e.flatMap(l=>Array.from(l.children).filter(g=>g.tagName==f.toUpperCase()));return Z(c,p)}}function le(e,o,t){return t=t||" ",e.length>o?e:(o-=e.length,t+=t.repeat(o),e+t.slice(0,o))}var M=class extends Error{constructor(t,f,p,c){super();this.message=t,this.expected=f,this.found=p,this.location=c,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,M.prototype):this.__proto__=M.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,M)}static buildMessage(t,f){function p(v){return v.charCodeAt(0).toString(16).toUpperCase()}function c(v){return v.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,d=>"\\x0"+p(d)).replace(/[\x10-\x1F\x7F-\x9F]/g,d=>"\\x"+p(d))}function l(v){return v.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,d=>"\\x0"+p(d)).replace(/[\x10-\x1F\x7F-\x9F]/g,d=>"\\x"+p(d))}function g(v){switch(v.type){case"literal":return'"'+c(v.text)+'"';case"class":let d=v.parts.map(b=>Array.isArray(b)?l(b[0])+"-"+l(b[1]):l(b));return"["+(v.inverted?"^":"")+d+"]";case"any":return"any character";case"end":return"end of input";case"other":return v.description}}function h(v){let d=v.map(g),b,F;if(d.sort(),d.length>0){for(b=1,F=1;b<d.length;b++)d[b-1]!==d[b]&&(d[F]=d[b],F++);d.length=F}switch(d.length){case 1:return d[0];case 2:return d[0]+" or "+d[1];default:return d.slice(0,-1).join(", ")+", or "+d[d.length-1]}}function B(v){return v?'"'+c(v)+'"':"end of input"}return"Expected "+h(t)+" but "+B(f)+" found."}format(t){let f="Error: "+this.message;if(this.location){let p=null,c;for(c=0;c<t.length;c++)if(t[c].source===this.location.source){p=t[c].text.split(/\r\n|\n|\r/g);break}let l=this.location.start,g=this.location.source+":"+l.line+":"+l.column;if(p){let h=this.location.end,B=le("",l.line.toString().length," "),v=p[l.line-1],d=l.line===h.line?h.column:v.length+1;f+=`
 --> `+g+`
`+B+` |
`+l.line+" | "+v+`
`+B+" | "+le("",l.column-1," ")+le("",d-l.column,"^")}else f+=`
 at `+g}return f}};function Hn(e,o){o=o!==void 0?o:{};let t={},f=o.grammarSource,p={Program:Ee},c=Ee,l=function(n){return n},g=/^[\t \n \r]/,h=ie(["	"," ",`
`," ","\r"],!1,!1),B=function(n){return n},v="(define-struct",d=T("(define-struct",!1),b="(",F=T("(",!1),w=")",H=T(")",!1),we=function(n,s){return{type:"Struct Definition",binding:n,properties:s}},ee="(define",ce=T("(define",!1),He=function(n,s,r){return{type:"Function Definition",name:n,args:s,body:r}},Ne=function(n,s){return{type:"Constant Definition",name:n,value:s}},Ie=function(n){return n},pe="(cond",je=T("(cond",!1),Oe=function(n){return{type:"Cond-Expression",options:n}},Re="[",ke=T("[",!1),ze="]",Ve=T("]",!1),Ze=function(n,s){return{condition:n,result:s}},Ue=function(n,s){return{type:"Function Call",name:n,args:s}},de=/^[A-Za-z+-\/*=]/,fe=ie([["A","Z"],["a","z"],["+","/"],"*","="],!1,!1),Je=function(n){return{type:"Symbol",symbol:n.join("")}},Qe=function(n){return n},ue=/^[0-9]/,me=ie([["0","9"]],!1,!1),We=function(){return parseInt(sn(),10)},ge="#true",qe=T("#true",!1),ye="#false",Ge=T("#false",!1),Ke=function(n){return n==="#true"},he="'()",Xe=T("'()",!1),Ye=function(){return"'()"},ve='"',Se=T('"',!1),xe=/^[A-Za-z]/,$e=ie([["A","Z"],["a","z"]],!1,!1),en=function(n){return n.join("")},nn=be("whitespace"),tn=function(){},i=0,S=0,ne=[{line:1,column:1}],C=0,se=[],m=0,te;if(o.startRule!==void 0){if(!(o.startRule in p))throw new Error(`Can't start parsing from rule "`+o.startRule+'".');c=p[o.startRule]}function sn(){return e.substring(S,i)}function jn(){return X(S,i)}function On(n,s){throw s=s!==void 0?s:X(S,i),Ae([be(n)],e.substring(S,i),s)}function Rn(n,s){throw s=s!==void 0?s:X(S,i),on(n,s)}function T(n,s){return{type:"literal",text:n,ignoreCase:s}}function ie(n,s,r){return{type:"class",parts:n,inverted:s,ignoreCase:r}}function kn(){return{type:"any"}}function rn(){return{type:"end"}}function be(n){return{type:"other",description:n}}function Le(n){let s=ne[n],r;if(s)return s;for(r=n-1;!ne[r];)r--;for(s=ne[r],s={line:s.line,column:s.column};r<n;)e.charCodeAt(r)===10?(s.line++,s.column=1):s.column++,r++;return ne[n]=s,s}function X(n,s){let r=Le(n),a=Le(s);return{source:f,start:{offset:n,line:r.line,column:r.column},end:{offset:s,line:a.line,column:a.column}}}function y(n){i<C||(i>C&&(C=i,se=[]),se.push(n))}function on(n,s){return new M(n,[],"",s)}function Ae(n,s,r){return new M(M.buildMessage(n,s),n,s,r)}function Ee(){let n,s,r;if(n=i,s=[],r=Te(),r!==t)for(;r!==t;)s.push(r),r=Te();else s=t;return s!==t&&(S=n,s=l(s)),n=s,n}function Te(){let n,s,r,a;if(n=i,s=an(),s===t&&(s=N()),s!==t){if(r=[],g.test(e.charAt(i))?(a=e.charAt(i),i++):(a=t,m===0&&y(h)),a!==t)for(;a!==t;)r.push(a),g.test(e.charAt(i))?(a=e.charAt(i),i++):(a=t,m===0&&y(h));else r=t;r!==t?(S=n,s=l(s),n=s):(i=n,n=t)}else i=n,n=t;return n}function an(){let n,s,r;return n=i,s=L(),s!==t?(r=ln(),r===t&&(r=cn(),r===t&&(r=pn())),r!==t?(S=n,s=B(r),n=s):(i=n,n=t)):(i=n,n=t),n}function ln(){let n,s,r,a,u,A,x,_,I;if(n=i,e.substr(i,14)===v?(s=v,i+=14):(s=t,m===0&&y(d)),s!==t)if(r=D(),r!==t)if(a=L(),a!==t)if(e.charCodeAt(i)===40?(u=b,i++):(u=t,m===0&&y(F)),u!==t){if(A=[],x=D(),x!==t)for(;x!==t;)A.push(x),x=D();else A=t;A!==t?(e.charCodeAt(i)===41?(x=w,i++):(x=t,m===0&&y(H)),x!==t?(_=L(),_!==t?(e.charCodeAt(i)===41?(I=w,i++):(I=t,m===0&&y(H)),I!==t?(S=n,s=we(r,A),n=s):(i=n,n=t)):(i=n,n=t)):(i=n,n=t)):(i=n,n=t)}else i=n,n=t;else i=n,n=t;else i=n,n=t;else i=n,n=t;return n}function cn(){let n,s,r,a,u,A,x,_,I;if(n=i,e.substr(i,7)===ee?(s=ee,i+=7):(s=t,m===0&&y(ce)),s!==t)if(r=D(),r!==t)if(a=L(),a!==t)if(e.charCodeAt(i)===40?(u=b,i++):(u=t,m===0&&y(F)),u!==t){if(A=[],x=D(),x!==t)for(;x!==t;)A.push(x),x=D();else A=t;A!==t?(e.charCodeAt(i)===41?(x=w,i++):(x=t,m===0&&y(H)),x!==t?(_=N(),_!==t?(e.charCodeAt(i)===41?(I=w,i++):(I=t,m===0&&y(H)),I!==t?(S=n,s=He(r,A,_),n=s):(i=n,n=t)):(i=n,n=t)):(i=n,n=t)):(i=n,n=t)}else i=n,n=t;else i=n,n=t;else i=n,n=t;else i=n,n=t;return n}function pn(){let n,s,r,a,u;return n=i,e.substr(i,7)===ee?(s=ee,i+=7):(s=t,m===0&&y(ce)),s!==t?(r=D(),r!==t?(a=N(),a!==t?(e.charCodeAt(i)===41?(u=w,i++):(u=t,m===0&&y(H)),u!==t?(S=n,s=Ne(r,a),n=s):(i=n,n=t)):(i=n,n=t)):(i=n,n=t)):(i=n,n=t),n}function N(){let n,s,r;return n=i,s=L(),s!==t?(r=dn(),r===t&&(r=fn(),r===t&&(r=D(),r===t&&(r=un()))),r!==t?(S=n,s=Ie(r),n=s):(i=n,n=t)):(i=n,n=t),n}function dn(){let n,s,r,a,u;if(n=i,e.substr(i,5)===pe?(s=pe,i+=5):(s=t,m===0&&y(je)),s!==t){if(r=[],a=Be(),a!==t)for(;a!==t;)r.push(a),a=Be();else r=t;r!==t?(a=L(),a!==t?(e.charCodeAt(i)===41?(u=w,i++):(u=t,m===0&&y(H)),u!==t?(S=n,s=Oe(r),n=s):(i=n,n=t)):(i=n,n=t)):(i=n,n=t)}else i=n,n=t;return n}function Be(){let n,s,r,a,u,A,x,_;return n=i,s=L(),s!==t?(e.charCodeAt(i)===91?(r=Re,i++):(r=t,m===0&&y(ke)),r!==t?(a=L(),a!==t?(u=N(),u!==t?(A=L(),A!==t?(x=N(),x!==t?(e.charCodeAt(i)===93?(_=ze,i++):(_=t,m===0&&y(Ve)),_!==t?(S=n,s=Ze(u,x),n=s):(i=n,n=t)):(i=n,n=t)):(i=n,n=t)):(i=n,n=t)):(i=n,n=t)):(i=n,n=t)):(i=n,n=t),n}function fn(){let n,s,r,a,u;if(n=i,e.charCodeAt(i)===40?(s=b,i++):(s=t,m===0&&y(F)),s!==t)if(r=D(),r!==t){for(a=[],u=N();u!==t;)a.push(u),u=N();a!==t?(e.charCodeAt(i)===41?(u=w,i++):(u=t,m===0&&y(H)),u!==t?(S=n,s=Ue(r,a),n=s):(i=n,n=t)):(i=n,n=t)}else i=n,n=t;else i=n,n=t;return n}function D(){let n,s,r,a;if(n=i,s=L(),s!==t){if(r=[],de.test(e.charAt(i))?(a=e.charAt(i),i++):(a=t,m===0&&y(fe)),a!==t)for(;a!==t;)r.push(a),de.test(e.charAt(i))?(a=e.charAt(i),i++):(a=t,m===0&&y(fe));else r=t;r!==t?(S=n,s=Je(r),n=s):(i=n,n=t)}else i=n,n=t;return n}function un(){let n,s;return n=i,s=mn(),s===t&&(s=gn(),s===t&&(s=yn(),s===t&&(s=hn()))),s!==t&&(S=n,s=Qe(s)),n=s,n}function mn(){let n,s,r,a;if(n=i,s=L(),s!==t){if(r=[],ue.test(e.charAt(i))?(a=e.charAt(i),i++):(a=t,m===0&&y(me)),a!==t)for(;a!==t;)r.push(a),ue.test(e.charAt(i))?(a=e.charAt(i),i++):(a=t,m===0&&y(me));else r=t;r!==t?(S=n,s=We(),n=s):(i=n,n=t)}else i=n,n=t;return n}function gn(){let n,s,r;return n=i,s=L(),s!==t?(e.substr(i,5)===ge?(r=ge,i+=5):(r=t,m===0&&y(qe)),r===t&&(e.substr(i,6)===ye?(r=ye,i+=6):(r=t,m===0&&y(Ge))),r!==t?(S=n,s=Ke(r),n=s):(i=n,n=t)):(i=n,n=t),n}function yn(){let n,s,r;return n=i,s=L(),s!==t?(e.substr(i,3)===he?(r=he,i+=3):(r=t,m===0&&y(Xe)),r!==t?(S=n,s=Ye(),n=s):(i=n,n=t)):(i=n,n=t),n}function hn(){let n,s,r,a,u;if(n=i,s=L(),s!==t)if(e.charCodeAt(i)===34?(r=ve,i++):(r=t,m===0&&y(Se)),r!==t){if(a=[],xe.test(e.charAt(i))?(u=e.charAt(i),i++):(u=t,m===0&&y($e)),u!==t)for(;u!==t;)a.push(u),xe.test(e.charAt(i))?(u=e.charAt(i),i++):(u=t,m===0&&y($e));else a=t;a!==t?(e.charCodeAt(i)===34?(u=ve,i++):(u=t,m===0&&y(Se)),u!==t?(S=n,s=en(a),n=s):(i=n,n=t)):(i=n,n=t)}else i=n,n=t;else i=n,n=t;return n}function L(){let n,s,r;for(m++,n=i,s=[],g.test(e.charAt(i))?(r=e.charAt(i),i++):(r=t,m===0&&y(h));r!==t;)s.push(r),g.test(e.charAt(i))?(r=e.charAt(i),i++):(r=t,m===0&&y(h));return s!==t&&(S=n,s=tn()),n=s,m--,n===t&&(s=t,m===0&&y(nn)),n}if(te=c(),te!==t&&i===e.length)return te;throw te!==t&&i<e.length&&y(rn()),Ae(se,C<e.length?e.charAt(C):null,C<e.length?X(C,C+1):X(C,C))}var De=Hn;var Me=`.tree {
  --branch-color: #666;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: .5em 0;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin: 0 .2em .5em;
    padding: .2em .5em;
    position: relative;
}

/* ########### custom AST node  styles ######## */
.tree {
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
}
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background); /* racket azure */
}
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: small;
  text-align: left;
  margin-bottom: 0.5em;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    height: .5em;
    left: 50%;
    position: absolute;
    top: calc(-.5em - 2px);
}
/* horizontal part + part pointing to corresp. hole
   -> width etc will be set via JavaScript
      Javascript cannot style ::before elements directly
      (since they are not part of the DOM),
      the variables will be set on the parent li element */
.tree li::before {
  box-sizing: border-box;
  content: "";
  position: absolute;
  height: .5em; /* overridden for some */
  top: -.5em;
  left: var(--connector-left, auto);
  right: var(--connector-right, auto);
  width: var(--connector-width, 100%);

  border: solid 2px var(--branch-color);
  border-top-style: none;
  border-left-style: var(--connector-border-left-style, none);
  border-right-style: var(--connector-border-right-style, none);
}

/* prevent up to 3 connectors from crossing */
.tree li.child-1::before {
  height: .3em;
}
.tree li.child-1 > span::before {
  top: calc(-.7em - 2px);
  height: 0.7em;
}

.tree li.child-3::before {
  height: .7em;
}
.tree li.child-3 > span::before {
  top: calc(-.3em - 2px);
  height: 0.3em;
}

/* ####### highlight way back up from a node ###### */
.tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
}

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree span:hover {
  cursor: pointer;
}

/* smooth transition between hiding and showing */
@keyframes hide-delayed {
  99% {
    visibility: visible;
  }
  100% {
    visibility: hidden;
  }
}
.tree span[data-collapsed] ~ ul {
  opacity: 0%;
  visibility: hidden;
  animation: hide-delayed 1s;
  transition: opacity 0.5s ease-out 0.5s;
}
.tree ul {
  opacity: 100%;
  transition: opacity 1s ease-out;
}

/* ######### holes ########## */
.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}
/* show/hide parts/holes  and float them into place */
.tree .code, .tree .placeholder {
  display: inline-block;
}
.tree .code {
  /* color: transparent; */
  transform: translate(var(--translate-x,0), var(--translate-y,0));
  transition: transform 1s ease-out;
}
.tree span[data-collapsed] .code {
  color: var(--text-grey);
  transform: translate(0,0);
}
.tree .placeholder {
  color: var(--text-grey);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  text-align: center;
}
.tree span[data-collapsed] .placeholder {
  display: none;
}

.tree .hole-name {
  min-width: 2em;
}
.tree .hole-names {
  min-width: 2.5em;
}
`;var Fe=document.createElement("style");Fe.innerHTML=Me;document.getElementsByTagName("head")[0].appendChild(Fe);function In(){Array.from(document.getElementsByTagName("bsl-tree")).map(e=>{try{let o=De(e.innerHTML);e.getAttribute("quiz")?Pe(o,e):_e(o,e)}catch(o){e.innerHTML+=`<br>${o}`}})}window.onload=()=>{In()};})();
//# sourceMappingURL=data:application/json;base64,
