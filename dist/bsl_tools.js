(()=>{var Xt=Object.defineProperty;var Oe=Object.getOwnPropertySymbols;var Yt=Object.prototype.hasOwnProperty,Zt=Object.prototype.propertyIsEnumerable;var Fe=(e,n,t)=>n in e?Xt(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,je=(e,n)=>{for(var t in n||(n={}))Yt.call(n,t)&&Fe(e,t,n[t]);if(Oe)for(var t of Oe(n))Zt.call(n,t)&&Fe(e,t,n[t]);return e};function ne(e){return G(e)||X(e)||pe(e)}function G(e){return e.type==="Function Definition"}function X(e){return e.type==="Constant Definition"}function pe(e){return e.type==="Struct Definition"}function ze(e){return H(e)||D(e)||j(e)||k(e)}function H(e){return e.type==="Function Call"}function D(e){return e.type==="Cond-Expression"}function j(e){return e.type==="Symbol"}function k(e){return e.type==="Literal Value"}function de(e){return ne(e)?tn(e):A(e)}function tn(e){if(G(e))return`(define (${$(e.name)} ${e.args.map($).join(" ")}) ${A(e.body)})`;if(X(e))return`(define ${$(e.name)} ${A(e.value)})`;if(pe(e))return`(define-struct ${$(e.binding)} (${e.properties.map($).join(" ")}))`;console.error("Invalid input to printDefinition")}function A(e){return H(e)?`(${$(e.name)} ${e.args.map(A).join(" ")})`:D(e)?`(cond ${e.options.map(re).join(" ")})`:j(e)?$(e):k(e)?typeof e.value=="string"&&e.value!=="'()"?`"${e.value}"`:typeof e.value=="boolean"?e.value?"#true":"#false":`${e.value}`:(console.error("Invalid input to printE"),`<${e}>`)}function re(e){return`[${A(e.condition)} ${A(e.result)}]`}function $(e){return e.symbol}var Vn=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{type:"Cond-Option",condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},{type:"Literal Value",value:3}]},result:{type:"Literal Value",value:"isThree"}},{type:"Cond-Option",condition:{type:"Literal Value",value:!1},result:{type:"Literal Value",value:"'()"}}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:{type:"Literal Value",value:42}},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function I(e,n,t=!1){if(e.length===0)return[];let o=n.split("/"),a=o.shift();if(a=="")return e;let c=o.join("/"),d=[];if(a=="..")d=e.map(u=>u.parentElement).filter(u=>u);else if(a=="+")d=e.map(u=>u.nextElementSibling).filter(u=>u);else if(a.startsWith(".")){let u=a.slice(1);d=e.flatMap(S=>Array.from(S.children).filter(x=>x.classList.contains(u)))}else d=e.flatMap(u=>Array.from(u.children).filter(S=>S.tagName==a.toUpperCase()));return d.length===0&&t&&console.error(`Error traversing ${n}: No element found`),I(d,c)}function z(e,n){if(e.tagName==n.toUpperCase())return e;{let t=e.parentElement;return t?z(t,n):(console.error("Could not find parent element with requested tag ",n),null)}}function K(e,n){if(e.classList.contains(n))return e;{let t=e.parentElement;return t?K(t,n):(console.error("Could not find parent element with requested class ",n),null)}}var qe=`/* ######## color variables ###### */
.tree {
  --branch-color: #666;
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
  --wrong-background: red;
  --correct-background: lime;
  --hole-selection-background: white;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
    white-space: nowrap;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: 0;
    padding-top: 1.5em;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin-left: 1em;
    margin-right: 1em;
    margin-top: 1.5em;
    padding: .2em .5em;
    position: relative;
    box-sizing: border-box;
}

/* ########### custom AST node  styles ######## */
/* node */
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background);
  transition: 1s background-color ease-out;
}
.tree .terminal-symbol {
  border-width: .2em;
  border-style: double;
}
/* node label */
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: 0.85em;
  text-align: right;

  position: absolute;
  top: calc(-0.85em - 1.5em);
  right: var(--edgetext-right, 50%); /* to be set dynamically */
  margin-right: -1.5em;
  background-color: rgba(255,255,255,0.7);
}
/* tooltip */
.tree .name .tooltip {
  display: none;
}
.tree .name:hover .tooltip {
  display: block;
  position: absolute;
  left: 100%;
  bottom: calc(-0.5em - 1px);
  background-color: var(--node-background);
  border: 1px solid var(--branch-color);
  text-align: left;
  padding: 0.5em;
  z-index: 1000;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    width: var(--connector-width, 0px); /* to be set dynamically */
    left: var(--connector-left, 50%); /* to be set dynamically */
    position: absolute;
    top: -1.5em;
    transform: var(--connector-transform); /* to be set dynamically */
}
.tree span.terminal-symbol:before {
  top: calc(-1.5em - .2em);
}

/* ####### highlight way back up from a node ###### */
/* .tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
} */

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree .hole:hover {
  cursor: pointer;
}

.tree [data-collapsed="true"] {
  display: none;
}

/* ######### holes ########## */
.tree .char {
  display: inline;
  margin: 0;
  border: none;
  padding: 0;
  border-radius: 0;
  background-color: transparent;
  transition: background-color 1s ease-out;
}
.tree .char::before {
  display: none;
}

.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}

/* ########### quiz ########## */

/* quiz stages */
.tree span[data-quiz-state="production"] .name,
.tree span[data-quiz-state="production"] .code,
.tree span[data-quiz-state="production"] .hole-marking {
  display: none;
}

.tree span[data-quiz-state="hole-marking"] .code,
.tree span[data-quiz-state="hole-marking"] .production {
  display: none;
}

.tree span[data-quiz-state="done"] .production,
.tree span[data-quiz-state="done"] .hole-marking {
  display: none;
}

/* highlighting text by putting a div behind a textarea */
.tree textarea,
.tree .marker-container {
  font-family: inherit;
  resize: none;
  font-size: calc(1em);
  padding: 2px;
  margin: .2em;
  border: none;
  box-sizing: border-box;
}

.tree .textarea-container {
  position: relative;
  display: inline-block;
}
.tree textarea {
  position: relative;
  background-color: transparent;
  z-index: 2;
}
.tree .marker-container {
  text-align: left;
  background-color: var(--hole-selection-background);
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
}
.tree .marker {
  color: transparent;
  background-color: transparent;
  transition: 1s background-color ease-out;
}

/* feedback for wrong answer */
.tree .wrong {
  background-color: var(--wrong-background);
  transition: none;
}
.tree .correct {
  background-color: var(--correct-background);
  transition: none;
}
`;function oe(e,n,t,o=!1,a="en"){if(t||(t=on(e)),!document.getElementById("bsl-tools-tree-style")){let c=document.createElement("style");c.innerHTML=qe,c.id="bsl-tools-tree-style",document.getElementsByTagName("head")[0].appendChild(c)}Ve.includes(a)||(console.error(`
      Selected language "${a}" is not implemented, defaulting to "en".
      Available language codes: ${Ve.join(", ")}
    `),a="en"),n.innerHTML=`
    <ul class="tree ast">
      ${o?Xe(e,a,t):Qe(e,t)}
    </ul>
  `,o&&I([n],"ul/li/ul/li").map(c=>c.setAttribute("data-collapsed","false")),se(n)}function on(e){let n={};return Ke(e,n),n}function Ke(e,n){n[e.production]=[],e.holes.map(t=>Ke(t.content,n))}var Ve=["en","de"],Je={en:{"select production":"Select production","mark selected text as hole":"Mark selected text as hole"},de:{"select production":"Produktion ausw\xE4hlen","mark selected text as hole":"Auswahl als Loch markieren"}};function se(e){let n=parseFloat(getComputedStyle(e).fontSize)*3;for(let t=1;;t++){let o=Array.from(e.getElementsByClassName(`hole-${t}`));if(o.length<1)return;o.map(a=>{let c=a,d=.5*(c.getBoundingClientRect().x+c.getBoundingClientRect().right);if(d==0)return;let u=z(c,"li");!u||I([u],`ul/.child-${t}/span`).map(S=>{let x=S,g=.5*(x.getBoundingClientRect().x+x.getBoundingClientRect().right),m=d-g,b=-Math.atan2(n,m),v=Math.sqrt(m*m+n*n),w=m/2-v/2;x.style.cssText=`
          --connector-width: ${v}px;
          --connector-left: calc(50% + ${w}px);
          --edgetext-right: calc(50% - ${m/2}px);
          --connector-transform: rotate(${b}rad);
        `})})}}function Qe(e,n,t=-1){return`
    <li class="${t>=0?`child-${t+1}`:""}"
        data-collapsed="${t>=0?"true":"false"}">
      <span class="${e.holes.length>0?"":"terminal-symbol"}">

        ${Ge(e,n)}

        ${We(e)}

      </span>
      ${e.holes.length>0?`<ul>${e.holes.map((o,a)=>Qe(o.content,n,a)).join("")}</ul>`:""}
    </li>
  `}function fe(e){return e.replaceAll("<","&lt;").replaceAll(">","&gt;")}function J(e){return e.replaceAll("&lt;","<").replaceAll("&gt;",">")}function We(e){return`
  <div class="code">${sn(e).map(t=>`<span class="char ${t.pos?`hole hole-${t.pos}`:""}"
             ${t.pos?`onclick="toggleChild(event,${t.pos})"`:""}
             >${e.code.slice(t.start,t.end)}</span>`).join("")}
  </div>
  `}window.toggleChild=(e,n)=>{let t=e.target,o=z(t,"li"),a=K(t,"tree");if(!o||!a){console.error("toggleChild called from .hole not in .tree");return}I([o],`ul/.child-${n}`).map(c=>{c.setAttribute("data-collapsed",c.getAttribute("data-collapsed")==="true"?"false":"true")}),se(a)};function sn(e){let n=[],t=0;for(let o=0;o<e.holes.length;o++)e.holes[o].start>t&&n.push({pos:!1,start:t,end:e.holes[o].start}),n.push(je({pos:o+1},e.holes[o])),t=e.holes[o].end;return t<e.code.length&&n.push({pos:!1,start:t,end:e.code.length}),n}function Ge(e,n){return`
    <div class="name">${fe(e.production)}${n[e.production]&&n[e.production].length>0?`<div class="tooltip">::= ${n[e.production].map(fe).join("<br>&nbsp;|&nbsp;&nbsp;")}</div>`:""}</div>
  `}function Xe(e,n,t,o=-1){return`
    <li class="${o>=0?`child-${o+1}`:""}"
        data-collapsed="${o>=0?"true":"false"}">
      <span class="${e.holes.length>0?"":"terminal-symbol"}"
            data-quiz-state="${o>=0?"production":"done"}"
            data-is-terminal="${e.holes.length<=0}"
            data-is-trivial-hole="${e.holes.length===1&&e.holes[0].start===0&&e.holes[0].end===e.code.length}">

        ${an(e,n,t)}

        ${ln(e,n)}

        ${Ge(e,t)}
        ${We(e)}
      </span>
      ${e.holes.length>0?`<ul>${e.holes.map((a,c)=>Xe(a.content,n,t,c)).join("")}</ul>`:""}
    </li>
  `}function an(e,n,t){return`
  <div class="production">
    <select onchange="checkProduction(event, '${e.production}')">
      <option selected="true">${Je[n]["select production"]}</option>
      ${Object.keys(t).map(o=>`
          <option value="${o}">${fe(o)}</option>
        `).join("")}
    </select>
  </div>
  `}window.checkProduction=(e,n)=>{let t=e.target;if(t.value===n){let o=z(t,"span");if(o){o.getAttribute("data-is-terminal")==="true"?o.setAttribute("data-quiz-state","done"):o.getAttribute("data-is-trivial-hole")==="true"?(o.setAttribute("data-quiz-state","done"),I([o],"+/li",!0).map(c=>c.setAttribute("data-collapsed","false"))):o.setAttribute("data-quiz-state","hole-marking"),I([o],"../+").map(c=>c.setAttribute("data-collapsed","false"));let a=K(o,"tree");a&&se(a)}}else{Array.from(t.selectedOptions).map(a=>a.remove());let o=z(t,"span");o&&(o.classList.add("wrong"),window.setTimeout(()=>{o.classList.remove("wrong")},100))}};function ln(e,n){return`
  <div class="hole-marking"
       data-holes="${btoa(JSON.stringify(e.holes.map(t=>[t.start,t.end,!1])))}">
    <div class="textarea-container">
      <div class="marker-container">
        ${e.code.split(`
`).map(t=>t.split("").map(o=>`<span class="char marker">${o}</span>`).join("")).join('<span class="char marker"></span><br>')}
      </div>
      <textarea autocorrect="off"
                spellcheck="false"
                cols="${e.code.split(`
`).map(t=>t.length).reduce((t,o)=>t>o?t:o)}"
                rows="${e.code.split(`
`).length}"
                oninput="stopInput(event, '${btoa(e.code)}')">${e.code}</textarea>
    </div><br>
    <button onclick="checkSelection(event)">
      ${Je[n]["mark selected text as hole"]}
    </button>
  </div>
  `}window.stopInput=(e,n)=>{e.target.value=atob(n)};window.checkSelection=e=>{let n=e.target,t=K(n,"hole-marking");if(!t){console.error("checkProduction called from el. not wrapped in div.hole-marking");return}let o=JSON.parse(atob(t.getAttribute("data-holes"))),a=t.getElementsByTagName("textarea")[0],c=a.selectionStart,d=a.selectionEnd,u=c<d?c:d,S=c<d?d:c,x=-1;if(o.map((g,m)=>{g[0]===u&&g[1]===S&&(g[2]=!0,x=m)}),x>=0)t.setAttribute("data-holes",btoa(JSON.stringify(o))),I([t],".textarea-container/.marker-container/.marker",!0).slice(u,S).map(g=>g.classList.add("correct"));else{let g=I([t],".textarea-container/.marker-container/.marker",!0).slice(u,S);g.map(m=>m.classList.add("wrong")),window.setTimeout(()=>{g.map(m=>m.classList.remove("wrong"))},100)}if(o.every(g=>g[2])){let g=z(t,"span");if(g){g.setAttribute("data-quiz-state","done"),I([g],"../ul/.child-1").map(b=>b.setAttribute("data-collapsed","false"));let m=K(g,"tree");m&&se(m)}}};function ge(e,n,t){return t=t||" ",e.length>n?e:(n-=e.length,t+=t.repeat(n),e+t.slice(0,n))}var N=class extends Error{constructor(t,o,a,c){super();this.message=t,this.expected=o,this.found=a,this.location=c,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,N.prototype):this.__proto__=N.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,N)}static buildMessage(t,o){function a(g){return g.charCodeAt(0).toString(16).toUpperCase()}function c(g){return g.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,m=>"\\x0"+a(m)).replace(/[\x10-\x1F\x7F-\x9F]/g,m=>"\\x"+a(m))}function d(g){return g.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,m=>"\\x0"+a(m)).replace(/[\x10-\x1F\x7F-\x9F]/g,m=>"\\x"+a(m))}function u(g){switch(g.type){case"literal":return'"'+c(g.text)+'"';case"class":let m=g.parts.map(b=>Array.isArray(b)?d(b[0])+"-"+d(b[1]):d(b));return"["+(g.inverted?"^":"")+m+"]";case"any":return"any character";case"end":return"end of input";case"other":return g.description}}function S(g){let m=g.map(u),b,v;if(m.sort(),m.length>0){for(b=1,v=1;b<m.length;b++)m[b-1]!==m[b]&&(m[v]=m[b],v++);m.length=v}switch(m.length){case 1:return m[0];case 2:return m[0]+" or "+m[1];default:return m.slice(0,-1).join(", ")+", or "+m[m.length-1]}}function x(g){return g?'"'+c(g)+'"':"end of input"}return"Expected "+S(t)+" but "+x(o)+" found."}format(t){let o="Error: "+this.message;if(this.location){let a=null,c;for(c=0;c<t.length;c++)if(t[c].source===this.location.source){a=t[c].text.split(/\r\n|\n|\r/g);break}let d=this.location.start,u=this.location.source+":"+d.line+":"+d.column;if(a){let S=this.location.end,x=ge("",d.line.toString().length," "),g=a[d.line-1],m=d.line===S.line?S.column:g.length+1;o+=`
 --> `+u+`
`+x+` |
`+d.line+" | "+g+`
`+x+" | "+ge("",d.column-1," ")+ge("",m-d.column,"^")}else o+=`
 at `+u}return o}};function cn(e,n){n=n!==void 0?n:{};let t={},o=n.grammarSource,a={Program:He},c=He,d=function(r){return r},u=/^[\t \n \r]/,S=te(["	"," ",`
`," ","\r"],!1,!1),x=function(r){return r},g="(define-struct",m=R("(define-struct",!1),b="(",v=R("(",!1),w=")",M=R(")",!1),ut=function(r,i){return{type:"Struct Definition",binding:r,properties:i}},Y="(define",he=R("(define",!1),dt=function(r,i,l){return{type:"Function Definition",name:r,args:i,body:l}},ft=function(r,i){return{type:"Constant Definition",name:r,value:i}},gt=function(r){return r},xe="(cond",mt=R("(cond",!1),St=function(r){return{type:"Cond-Expression",options:r}},yt="[",ht=R("[",!1),xt="]",Tt=R("]",!1),bt=function(r,i){return{type:"Cond-Option",condition:r,result:i}},Ct=function(r,i){return{type:"Function Call",name:r,args:i}},Te="define",$t=R("define",!1),be=/^[^",'`()[\]{}|#\n\t\r0-9 ]/,Ce=te(['"',",","'","`","(",")","[","]","{","}","|","#",`
`,"	","\r",["0","9"]," "],!0,!1),Lt=function(r){return{type:"Symbol",symbol:r.join("")}},_t=function(r){return{type:"Literal Value",value:r}},$e=/^[0-9]/,Le=te([["0","9"]],!1,!1),At=function(){return parseInt(Ht(),10)},_e="#true",Rt=R("#true",!1),Ae="#false",Et=R("#false",!1),Re="#t",vt=R("#t",!1),Ee="#f",Bt=R("#f",!1),Pt=function(r){return r==="#true"||r==="#t"},ve="'()",It=R("'()",!1),wt=function(){return"'()"},Be='"',Pe=R('"',!1),Ie=/^[^"]/,we=te(['"'],!0,!1),Ut=function(r){return r.join("")},kt=Ue("whitespace"),Nt=function(){},s=0,T=0,Z=[{line:1,column:1}],P=0,le=[],y=0,ee;if(n.startRule!==void 0){if(!(n.startRule in a))throw new Error(`Can't start parsing from rule "`+n.startRule+'".');c=a[n.startRule]}function Ht(){return e.substring(T,s)}function On(){return W(T,s)}function Fn(r,i){throw i=i!==void 0?i:W(T,s),Ne([Ue(r)],e.substring(T,s),i)}function jn(r,i){throw i=i!==void 0?i:W(T,s),Mt(r,i)}function R(r,i){return{type:"literal",text:r,ignoreCase:i}}function te(r,i,l){return{type:"class",parts:r,inverted:i,ignoreCase:l}}function zn(){return{type:"any"}}function Dt(){return{type:"end"}}function Ue(r){return{type:"other",description:r}}function ke(r){let i=Z[r],l;if(i)return i;for(l=r-1;!Z[l];)l--;for(i=Z[l],i={line:i.line,column:i.column};l<r;)e.charCodeAt(l)===10?(i.line++,i.column=1):i.column++,l++;return Z[r]=i,i}function W(r,i){let l=ke(r),p=ke(i);return{source:o,start:{offset:r,line:l.line,column:l.column},end:{offset:i,line:p.line,column:p.column}}}function h(r){s<P||(s>P&&(P=s,le=[]),le.push(r))}function Mt(r,i){return new N(r,[],"",i)}function Ne(r,i,l){return new N(N.buildMessage(r,i),r,i,l)}function He(){let r,i,l;if(r=s,i=[],l=De(),l!==t)for(;l!==t;)i.push(l),l=De();else i=t;return i!==t&&(T=r,i=d(i)),r=i,r}function De(){let r,i,l,p;if(r=s,i=Ot(),i===t&&(i=O()),i!==t){if(l=[],u.test(e.charAt(s))?(p=e.charAt(s),s++):(p=t,y===0&&h(S)),p!==t)for(;p!==t;)l.push(p),u.test(e.charAt(s))?(p=e.charAt(s),s++):(p=t,y===0&&h(S));else l=t;l!==t?(T=r,i=d(i),r=i):(s=r,r=t)}else s=r,r=t;return r}function Ot(){let r,i,l;return r=s,i=L(),i!==t?(l=Ft(),l===t&&(l=jt(),l===t&&(l=zt())),l!==t?(T=r,i=x(l),r=i):(s=r,r=t)):(s=r,r=t),r}function Ft(){let r,i,l,p,f,B,C,_,F;if(r=s,e.substr(s,14)===g?(i=g,s+=14):(i=t,y===0&&h(m)),i!==t)if(l=U(),l!==t)if(p=L(),p!==t)if(e.charCodeAt(s)===40?(f=b,s++):(f=t,y===0&&h(v)),f!==t){if(B=[],C=U(),C!==t)for(;C!==t;)B.push(C),C=U();else B=t;B!==t?(e.charCodeAt(s)===41?(C=w,s++):(C=t,y===0&&h(M)),C!==t?(_=L(),_!==t?(e.charCodeAt(s)===41?(F=w,s++):(F=t,y===0&&h(M)),F!==t?(T=r,i=ut(l,B),r=i):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)}else s=r,r=t;else s=r,r=t;else s=r,r=t;else s=r,r=t;return r}function jt(){let r,i,l,p,f,B,C,_,F,ce;if(r=s,e.substr(s,7)===Y?(i=Y,s+=7):(i=t,y===0&&h(he)),i!==t)if(l=L(),l!==t)if(e.charCodeAt(s)===40?(p=b,s++):(p=t,y===0&&h(v)),p!==t)if(f=U(),f!==t)if(B=L(),B!==t){if(C=[],_=U(),_!==t)for(;_!==t;)C.push(_),_=U();else C=t;C!==t?(e.charCodeAt(s)===41?(_=w,s++):(_=t,y===0&&h(M)),_!==t?(F=O(),F!==t?(e.charCodeAt(s)===41?(ce=w,s++):(ce=t,y===0&&h(M)),ce!==t?(T=r,i=dt(f,C,F),r=i):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)}else s=r,r=t;else s=r,r=t;else s=r,r=t;else s=r,r=t;else s=r,r=t;return r}function zt(){let r,i,l,p,f;return r=s,e.substr(s,7)===Y?(i=Y,s+=7):(i=t,y===0&&h(he)),i!==t?(l=U(),l!==t?(p=O(),p!==t?(e.charCodeAt(s)===41?(f=w,s++):(f=t,y===0&&h(M)),f!==t?(T=r,i=ft(l,p),r=i):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t),r}function O(){let r,i,l;return r=s,i=L(),i!==t?(l=qt(),l===t&&(l=Vt(),l===t&&(l=U(),l===t&&(l=Kt()))),l!==t?(T=r,i=gt(l),r=i):(s=r,r=t)):(s=r,r=t),r}function qt(){let r,i,l,p,f;if(r=s,e.substr(s,5)===xe?(i=xe,s+=5):(i=t,y===0&&h(mt)),i!==t){if(l=[],p=Me(),p!==t)for(;p!==t;)l.push(p),p=Me();else l=t;l!==t?(p=L(),p!==t?(e.charCodeAt(s)===41?(f=w,s++):(f=t,y===0&&h(M)),f!==t?(T=r,i=St(l),r=i):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)}else s=r,r=t;return r}function Me(){let r,i,l,p,f,B,C,_;return r=s,i=L(),i!==t?(e.charCodeAt(s)===91?(l=yt,s++):(l=t,y===0&&h(ht)),l!==t?(p=L(),p!==t?(f=O(),f!==t?(B=L(),B!==t?(C=O(),C!==t?(e.charCodeAt(s)===93?(_=xt,s++):(_=t,y===0&&h(Tt)),_!==t?(T=r,i=bt(f,C),r=i):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t),r}function Vt(){let r,i,l,p,f;if(r=s,e.charCodeAt(s)===40?(i=b,s++):(i=t,y===0&&h(v)),i!==t)if(l=U(),l!==t){for(p=[],f=O();f!==t;)p.push(f),f=O();p!==t?(e.charCodeAt(s)===41?(f=w,s++):(f=t,y===0&&h(M)),f!==t?(T=r,i=Ct(l,p),r=i):(s=r,r=t)):(s=r,r=t)}else s=r,r=t;else s=r,r=t;return r}function U(){let r,i,l,p,f;if(r=s,i=L(),i!==t)if(l=s,y++,e.substr(s,6)===Te?(p=Te,s+=6):(p=t,y===0&&h($t)),y--,p===t?l=void 0:(s=l,l=t),l!==t){if(p=[],be.test(e.charAt(s))?(f=e.charAt(s),s++):(f=t,y===0&&h(Ce)),f!==t)for(;f!==t;)p.push(f),be.test(e.charAt(s))?(f=e.charAt(s),s++):(f=t,y===0&&h(Ce));else p=t;p!==t?(T=r,i=Lt(p),r=i):(s=r,r=t)}else s=r,r=t;else s=r,r=t;return r}function Kt(){let r,i;return r=s,i=Jt(),i===t&&(i=Qt(),i===t&&(i=Wt(),i===t&&(i=Gt()))),i!==t&&(T=r,i=_t(i)),r=i,r}function Jt(){let r,i,l,p;if(r=s,i=L(),i!==t){if(l=[],$e.test(e.charAt(s))?(p=e.charAt(s),s++):(p=t,y===0&&h(Le)),p!==t)for(;p!==t;)l.push(p),$e.test(e.charAt(s))?(p=e.charAt(s),s++):(p=t,y===0&&h(Le));else l=t;l!==t?(T=r,i=At(),r=i):(s=r,r=t)}else s=r,r=t;return r}function Qt(){let r,i,l;return r=s,i=L(),i!==t?(e.substr(s,5)===_e?(l=_e,s+=5):(l=t,y===0&&h(Rt)),l===t&&(e.substr(s,6)===Ae?(l=Ae,s+=6):(l=t,y===0&&h(Et)),l===t&&(e.substr(s,2)===Re?(l=Re,s+=2):(l=t,y===0&&h(vt)),l===t&&(e.substr(s,2)===Ee?(l=Ee,s+=2):(l=t,y===0&&h(Bt))))),l!==t?(T=r,i=Pt(l),r=i):(s=r,r=t)):(s=r,r=t),r}function Wt(){let r,i,l;return r=s,i=L(),i!==t?(e.substr(s,3)===ve?(l=ve,s+=3):(l=t,y===0&&h(It)),l!==t?(T=r,i=wt(),r=i):(s=r,r=t)):(s=r,r=t),r}function Gt(){let r,i,l,p,f;if(r=s,i=L(),i!==t)if(e.charCodeAt(s)===34?(l=Be,s++):(l=t,y===0&&h(Pe)),l!==t){if(p=[],Ie.test(e.charAt(s))?(f=e.charAt(s),s++):(f=t,y===0&&h(we)),f!==t)for(;f!==t;)p.push(f),Ie.test(e.charAt(s))?(f=e.charAt(s),s++):(f=t,y===0&&h(we));else p=t;p!==t?(e.charCodeAt(s)===34?(f=Be,s++):(f=t,y===0&&h(Pe)),f!==t?(T=r,i=Ut(p),r=i):(s=r,r=t)):(s=r,r=t)}else s=r,r=t;else s=r,r=t;return r}function L(){let r,i,l;for(y++,r=s,i=[],u.test(e.charAt(s))?(l=e.charAt(s),s++):(l=t,y===0&&h(S));l!==t;)i.push(l),u.test(e.charAt(s))?(l=e.charAt(s),s++):(l=t,y===0&&h(S));return i!==t&&(T=r,i=Nt()),r=i,y--,r===t&&(i=t,y===0&&h(kt)),r}if(ee=c(),ee!==t&&s===e.length)return ee;throw ee!==t&&s<e.length&&h(Dt()),Ne(le,P<e.length?e.charAt(P):null,P<e.length?W(P,P+1):W(P,P))}var ie=cn;var Ye=`/* css for errors */
.error-wrapper{
    display:flex;
    flex-direction:column;
    margin:2vw;
    font-size:inherit;
}

.error{
    font-size:1.2em;
}
`;function Ze(){Array.from(document.getElementsByTagName("bsltree")).map(e=>{try{let n=ie(J(e.innerHTML)),t=fn(n),o=e.getAttribute("quiz")==="true",a=e.getAttribute("lang")?e.getAttribute("lang"):void 0;oe(t,e,dn,o,a)}catch(n){un(e,`${n.location.start.line}:${n.location.start.column} ${n}`)}})}function un(e,n){if(!document.getElementById("bsl-tools-error-style")){let S=document.createElement("style");S.innerHTML=Ye,S.id="bsl-tools-error-style",document.getElementsByTagName("head")[0].appendChild(S)}let t=e.innerHTML;e.innerHTML="";let o=document.createElement("div");o.classList.add("error-wrapper"),e.appendChild(o);let a=`<p> BSL-Tree could not be parsed! </p>
                  <p> Input: <b style="font-size:0.9em;">${t}</b> </p>`,c=document.createElement("div");c.classList.add("origin"),c.innerHTML=a,o.appendChild(c);let d=document.createElement("pre");d.classList.add("error");let u=document.createElement("code");u.textContent=n,o.appendChild(d),d.appendChild(u)}var dn={"<program>":["<def-or-expr>*"],"<def-or-expr>*":[],"<def-or-expr>":["<definition>","<e>"],"<definition>":["(define (<name> <name>+) <e>)","(define <name> <e>)","(define-struct <name> (<name>*))"],"<e>":["(name <e>*)","(cond {[<e>,<e>]}+)","<name>","<v>"],"<e>*":[],"{[ <e> <e> ]}+":[],"[ <e> <e> ]":[],"<name>*":[],"<name>+":[],"<name>":[],"<v>":[]};function fn(e){let n=e.map(de),t=[],o="";for(let a=0;a<n.length;a++){a>0&&(o=`${o}
`);let c=o.length;o=`${o}${n[a]}`;let d=o.length;t.push({start:c,end:d})}return{production:"<program>",code:o,holes:[{start:0,end:o.length,content:{production:"<def-or-expr>*",code:o,holes:t.map((a,c)=>({start:a.start,end:a.end,content:gn(e[c])}))}}]}}function gn(e){let n=de(e);return{production:"<def-or-expr>",code:n,holes:[{start:0,end:n.length,content:ne(e)?mn(e):Q(e)}]}}function mn(e){let n="",t=[];if(G(e)){n="(define (";let o=n.length;n=`${n}${$(e.name)}`,t.push({start:o,end:n.length,content:q(e.name)}),n=`${n} `,o=n.length,n=`${n}${e.args.map($).join(" ")}`,t.push({start:o,end:n.length,content:Sn(e.args)}),n=`${n}) `,o=n.length,n=`${n}${A(e.body)}`,t.push({start:o,end:n.length,content:Q(e.body)}),n=`${n})`}else if(X(e)){n="(define ";let o=n.length;n=`${n}${$(e.name)}`,t.push({start:o,end:n.length,content:q(e.name)}),n=`${n} `,o=n.length,n=`${n}${A(e.value)}`,t.push({start:o,end:n.length,content:Q(e.value)}),n=`${n})`}else{n="(define-struct ";let o=n.length;n=`${n}${$(e.binding)}`,t.push({start:o,end:n.length,content:q(e.binding)}),n=`${n} (`,o=n.length,n=`${n}${e.properties.map($).join(" ")}`,t.push({start:o,end:n.length,content:yn(e.properties)}),n=`${n}))`}return{production:"<definition>",code:n,holes:t}}function Q(e){let n="",t=[];if(H(e)){n="(";let o=n.length;n=`${n}${$(e.name)}`,t.push({start:o,end:n.length,content:q(e.name)}),n=`${n} `,o=n.length,n=`${n}${e.args.map(A).join(" ")}`,t.push({start:o,end:n.length,content:hn(e.args)}),n=`${n})`}else if(D(e)){n="(cond ";let o=n.length;n=`${n}${e.options.map(re).join(" ")}`,t.push({start:o,end:n.length,content:xn(e.options)}),n=`${n})`}else j(e)?(n=$(e),t.push({start:0,end:n.length,content:q(e)})):(n=A(e),t.push({start:0,end:n.length,content:bn(e)}));return{production:"<e>",code:n,holes:t}}function q(e){return{production:"<name>",code:$(e),holes:[]}}function Sn(e){e.length<1&&console.error("<name>+ but used but names are empty");let n="",t=[];for(let o=0;o<e.length;o++){let a=n.length;n=`${n}${$(e[o])}`,t.push({start:a,end:n.length,content:q(e[o])}),o<e.length-1&&(n=`${n} `)}return{production:"<name>+",code:n,holes:t}}function yn(e){let n="",t=[];for(let o=0;o<e.length;o++){let a=n.length;n=`${n}${$(e[o])}`,t.push({start:a,end:n.length,content:q(e[o])}),o<e.length-1&&(n=`${n} `)}return{production:"<name>*",code:n,holes:t}}function hn(e){let n="",t=[];for(let o=0;o<e.length;o++){let a=n.length;n=`${n}${A(e[o])}`,t.push({start:a,end:n.length,content:Q(e[o])}),o<e.length-1&&(n=`${n} `)}return{production:"<e>*",code:n,holes:t}}function xn(e){let n="",t=[];for(let o=0;o<e.length;o++){let a=n.length;n=`${n}${re(e[o])}`,t.push({start:a,end:n.length,content:Tn(e[o])}),o<e.length-1&&(n=`${n} `)}return{production:"{[ <e> <e> ]}+",code:n,holes:t}}function Tn(e){let n="",t=[];n=`${n}[`;let o=n.length;return n=`${n}${A(e.condition)}`,t.push({start:o,end:n.length,content:Q(e.condition)}),n=`${n} `,o=n.length,n=`${n}${A(e.result)}`,t.push({start:o,end:n.length,content:Q(e.result)}),n=`${n}]`,{production:"[ <e> <e> ]",code:n,holes:t}}function bn(e){return{production:"<v>",code:A(e),holes:[]}}function et(){Array.from(document.getElementsByTagName("jsontree")).map(e=>{try{let n=Cn(J(e.innerHTML)),t=n.root,o=n.grammar,a=e.getAttribute("quiz")==="true",c=e.getAttribute("lang")?e.getAttribute("lang"):void 0;oe(t,e,o,a,c)}catch(n){console.error(n),e.innerHTML=`${n}`,e.style.cssText=`
        padding: 2em;
        color: darkred;
        display: block;
      `}})}function Cn(e){let n=JSON.parse(e.trim()),t=n.grammar;return{root:tt(n),grammar:t}}function tt(e){let n=e.production;if(!n||typeof n!="string")throw`${JSON.stringify(e,void 0,2).replaceAll(`
`,"<br>")} has wrong structure, production needs to be a string`;let t=e.code;if(!t||typeof t!="string")throw`${JSON.stringify(e,void 0,2).replaceAll(`
`,"<br>")} has wrong structure, code needs to be a string`;e.holes||(e.holes=[]);let o=t.split("|"),a="",c=[];for(let d=0;d<o.length;d++)if(a=`${a}${o[d]}`,d++,d<o.length&&o[d]){let u=a.length;a=`${a}${o[d]}`;let S=e.holes[c.length];if(!S)throw`${JSON.stringify(e,void 0,2).replaceAll(`
`,"<br>")} has wrong structure: less holes than marked with || in the code`;c.push({start:u,end:a.length,content:tt(S)})}return{production:n,code:a,holes:c}}function me(e){return e.type==="CallRedex"}function Se(e){return e.type==="CondRedex"}function nt(e){return e.type==="Hole"}function rt(e){return e.type==="AppContext"}function ye(e){return e.type==="Split"}function ot(e){return e.type==="Prim"}function E(e){return typeof e=="number"||typeof e=="string"||typeof e=="boolean"||e==="'()"}var st=`stepper{
    display:flex;
    flex-direction:column;
    align-items:center;
    font-size: 1.2em;
}
/* .eval-step{
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: left;
    max-width: 1200px;
    margin: 2vh auto;
} */
.program-wrapper{
margin:2vw;
padding: 1vh 2vw; 
font-size: 1.1em;
font-weight: 600;
border: 1px solid #000;
}
.program-overview{
    display: flex;
    flex-direction: column;
    margin: 1vh auto;
}

.step-result{
}

[visible="false"]{
    display: none;
}

[visible="true"]{
    display: block;
}

.split-rule-plug{
    display: flex;
    flex-direction: row;
    max-width:1200px;
    margin: 2vh auto;
    padding: 1vw;
    border: 1px solid #000;
}
.split,.rule,.plug{
    padding: 0 1.3vw;
    margin:0 1.2vw;
}
pre{
    margin: 1vh 0 3vh 0;
    font-size: 1.1em;
}

.step-button{
    padding: 2vw;
    font-size:1.1em;
}`;function at(){Array.from(document.getElementsByTagName("stepper")).map(e=>{try{let n=ie(J(e.innerHTML));_n(n,e)}catch(n){console.error(n),e.innerHTML=`${n}`,e.style.cssText=`
        padding: 2em;
        color: darkred;
        display: block;
      `}})}function _n(e,n){if(!document.getElementById("bsl-tools-stepper-style")){let u=document.createElement("style");u.innerHTML=st,u.id="bsl-tools-stepper-style",document.getElementsByTagName("head")[0].appendChild(u)}let t=e[0];console.log("expression",t);let o={type:"Stepper",root:n,originExpr:t,stepperTree:[]},a=An(t,o);console.log("stepper",a),n.innerHTML=Bn(a);let c=n.querySelector("#prevButton"),d=n.querySelector("#nextButton");c.addEventListener("click",Dn),d.addEventListener("click",Mn)}function An(e,n){if(E(e))return n;{let t=n.stepperTree;for(;!E(e);){let a=Rn(e);e=E(a)?a:a.plugResult.expr,t.push(a)}let o={type:"Stepper",root:n.root,originExpr:n.originExpr,stepperTree:t};return o.stepperTree.map((a,c)=>a.currentStep=c),o}}function Rn(e){let n=lt(e);if(console.log("splitExpr",n),ye(n)){let t=En(n.redex);console.log("stepExpr",t);let o=ct(t,n.context);return console.log("plugExpr",o),{type:"StepResult",splitResult:n,plugResult:o}}else return e.value}function lt(e){let n={type:"Hole"};if(H(e)){let t=e.name,o=e.args,a=-1,c=[],d=[];for(let u=0;u<o.length;u++){let S=o[u];if(k(S))c.push(S.value);else if(E(S))c.push(S);else{a=u;break}}if(a==-1){let u={type:"CallRedex",name:t,args:c};return{type:"Split",redex:u,context:n}}else{for(let x=a+1;x<o.length;x++){let g=o[x];if(ze(g))d.push(g);else return new Error("split: argument is not an expression "+g+x)}let u=o[a],S=lt(u);return{type:"Split",redex:S.redex,context:{type:"AppContext",op:t,values:c,ctx:S.context,args:d}}}}else if(D(e)){let t=e.options[0];if(k(t.condition)){let o=t.condition;return{type:"Split",redex:{type:"CondRedex",options:[{condition:o,result:t.result},...e.options.slice(1)]},context:n}}else return Error("not implemented")}else return j(e)?(console.log("error: expr is  Name, or undefined"),Error("error: expr is Name, or undefined")):Error("error: something unexpected occured")}function En(e){if(me(e))return it(e)!=null?{type:"Prim",redex:e,result:it(e)}:Error("error: prim is not applicable");if(Se(e)){let n=e.options[0];return{type:"CondRule",redex:e,result:vn(e)}}else return Error("error: redex is neither a call nor cond")}function ct(e,n){if(nt(n))return{type:"PlugResult",expr:e.result,rule:e};{let t={type:"Function Call",name:n.op,args:[n.values,ct(e,n.ctx).expr,n.args].flat()};return{type:"PlugResult",expr:t,rule:{type:"Kong",redexRule:e}}}}function it(e){if(e.name.symbol==="+"){let n=0;return e.args.forEach(t=>{if(E(t))n+=t;else return Error("error: argument is not a literal: "+t)}),n}else if(e.name.symbol==="*"){let n=1;return e.args.forEach(t=>{if(E(t))n*=t;else return Error("error: argument is not a literal: "+t)}),n}else if(e.name.symbol==="-"){let n=e.args[0];for(let t=1;t<e.args.length;t++){let o=e.args[t];if(E(o))n-=o;else return Error("error: argument is not a literal: "+e.args[t])}return n}else if(e.name.symbol==="/"){let n=e.args[0];for(let t=1;t<e.args.length;t++){let o=e.args[t];if(E(o)&&o!=0)n/=o;else return E(o)&&o==0?Error("error: division by zero"):Error("error: argument is not a literal: "+o)}return n}else return null}function vn(e){let n=e.options[0];if(k(n.condition)&&n.condition.value==!0)return n.result;if(k(n.condition)&&n.condition.value==!1){console.log("r.options",e.options);let t=e.options.slice(1).map(o=>({type:"Cond-Option",condition:o.condition,result:o.result}));return console.log("newOptions",t),{type:"Cond-Expression",options:t}}else return Error("error: condition is not a boolean")}function Bn(e){let n=e.stepperTree,t=e.originExpr;return`<stepper>
        <div class="program-wrapper">
            Original Expression:
            <pre><code>${V(t)}</code></pre>
        </div>
        <div class="step-result-wrapper">
        ${n.map(a=>Pn(n,a)).join("")}
        </div>
        <div class="buttons">
            <button class="step-button" id="prevButton" style="visibility: hidden">Previous Step</button>
            <button class="step-button" id="nextButton">Next Step</button>
        </div>
    </stepper>`}function Pn(e,n){let t=n.currentStep,o=e.slice(0,t).map(u=>u.plugResult.expr),a=n.splitResult,c=n.plugResult;return`<div class="step-result" currentStep="${t}" visible=${t==0?"true":"false"}>
                    <div class="program-overview">
                        Program Overview:
                        <ul>
                        ${o.map(u=>E(u)?ae(u):V(u)).join(`
`)}
                        </ul>
                    </div>
                    <div class="split-rule-plug">
                        <div class="split">
                            Split:
                            ${In(a)}
                        </div>
                        ${wn(c)}
                    </div>
                </div>`}function V(e){if(H(e)){let n=e.name.symbol,t=e.args.map(a=>V(a)).join(" ");return`(${n} ${t})`}else return k(e)?`${e.value}`:E(e)?`${e}`:D(e)?e.options.map(t=>V(t.condition)+" -> "+V(t.result)).join(`
`):(console.error("error: expr is neither Call nor Literal: "+e),"Neither Call nor Literal")}function ae(e){return`${e}`}function In(e){if(ye(e)){let n=e.redex,t=e.context,o=Un(n);return`
        <div class="context">
            Context: ${rt(t)?kn(t):Nn(t)}
        </div>
        <div class="redex">
            Redex: ${o}
        </div>`}else return`${e}`}function wn(e){let n=e.expr,t=e.rule;return`
    <div class="rule">
        ${ot(t)?pt(t):Hn(t)}
    </div>
    <div class="plug">
        Plug Result: <pre><code>${E(n)?ae(n):V(n)}</code></pre>
    </div>`}function Un(e){if(me(e)){let n=e.name.symbol,t=e.args.map(a=>ae(a)).join(" ");return`<pre><code>(${n} ${t})</code></pre>`}else return Se(e)?"Conditional Redex":"Something went wrong: renderRedex"}function kn(e){let n=e.op?e.op:"",t=e.args.map(a=>E(a)?ae(a):V(a)).join(" ");return`<pre><code>(${n} ${t})</code></pre>`}function Nn(e){return'<span class="hole">[    ]</span>'}function pt(e){let t=`${e.type}`;return console.log(t),t}function Hn(e){let n=e.type,t=e.redexRule;return`${n} with ${pt(t)} `}function Dn(e){var d,u,S;let n=e.target,t=(u=(d=n.parentElement)==null?void 0:d.parentElement)==null?void 0:u.getElementsByClassName("step-result-wrapper")[0],o=t==null?void 0:t.querySelector(".step-result[visible=true]"),a=o==null?void 0:o.previousElementSibling;o==null||o.setAttribute("visible","false"),a==null||a.setAttribute("visible","true");let c=(S=n.parentElement)==null?void 0:S.querySelector("#nextButton");c.style.visibility=="hidden"&&c.setAttribute("style","visibility: visible"),(a==null?void 0:a.getAttribute("currentStep"))=="0"&&n.setAttribute("style","visibility: hidden")}function Mn(e){var u,S,x;let n=e.target,t=(S=(u=n.parentElement)==null?void 0:u.parentElement)==null?void 0:S.getElementsByClassName("step-result-wrapper")[0],o=t==null?void 0:t.querySelector(".step-result[visible=true]"),a=o==null?void 0:o.nextElementSibling,c=t==null?void 0:t.getElementsByClassName("step-result").length;o==null||o.setAttribute("visible","false"),a==null||a.setAttribute("visible","true");let d=(x=n.parentElement)==null?void 0:x.querySelector("#prevButton");d.style.visibility=="hidden"&&d.setAttribute("style","visibility: visible"),(a==null?void 0:a.getAttribute("currentStep"))==(c-1).toString()&&n.setAttribute("style","visibility: hidden")}window.onload=()=>{Ze(),et(),at()};})();
//# sourceMappingURL=data:application/json;base64,
