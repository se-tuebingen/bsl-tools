(()=>{var tn=Object.defineProperty;var je=Object.getOwnPropertySymbols;var nn=Object.prototype.hasOwnProperty,rn=Object.prototype.propertyIsEnumerable;var ze=(e,n,t)=>n in e?tn(e,n,{enumerable:!0,configurable:!0,writable:!0,value:t}):e[n]=t,qe=(e,n)=>{for(var t in n||(n={}))nn.call(n,t)&&ze(e,t,n[t]);if(je)for(var t of je(n))rn.call(n,t)&&ze(e,t,n[t]);return e};function re(e){return G(e)||X(e)||me(e)}function G(e){return e.type==="Function Definition"}function X(e){return e.type==="Constant Definition"}function me(e){return e.type==="Struct Definition"}function Ve(e){return U(e)||H(e)||j(e)||R(e)}function U(e){return e.type==="Function Call"}function H(e){return e.type==="Cond-Expression"}function j(e){return e.type==="Symbol"}function R(e){return e.type==="Literal Value"}function ye(e){return re(e)?sn(e):E(e)}function sn(e){if(G(e))return`(define (${$(e.name)} ${e.args.map($).join(" ")}) ${E(e.body)})`;if(X(e))return`(define ${$(e.name)} ${E(e.value)})`;if(me(e))return`(define-struct ${$(e.binding)} (${e.properties.map($).join(" ")}))`;console.error("Invalid input to printDefinition")}function E(e){return U(e)?`(${$(e.name)} ${e.args.map(E).join(" ")})`:H(e)?`(cond ${e.options.map(se).join(" ")})`:j(e)?$(e):R(e)?typeof e.value=="string"&&e.value!=="'()"?`"${e.value}"`:typeof e.value=="boolean"?e.value?"#true":"#false":`${e.value}`:(console.error("Invalid input to printE"),`<${e}>`)}function se(e){return`[${E(e.condition)} ${E(e.result)}]`}function $(e){return e.symbol}var Wn=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{type:"Cond-Option",condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},{type:"Literal Value",value:3}]},result:{type:"Literal Value",value:"isThree"}},{type:"Cond-Option",condition:{type:"Literal Value",value:!1},result:{type:"Literal Value",value:"'()"}}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:{type:"Literal Value",value:42}},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function w(e,n,t=!1){if(e.length===0)return[];let o=n.split("/"),a=o.shift();if(a=="")return e;let c=o.join("/"),p=[];if(a=="..")p=e.map(d=>d.parentElement).filter(d=>d);else if(a=="+")p=e.map(d=>d.nextElementSibling).filter(d=>d);else if(a.startsWith(".")){let d=a.slice(1);p=e.flatMap(h=>Array.from(h.children).filter(x=>x.classList.contains(d)))}else p=e.flatMap(d=>Array.from(d.children).filter(h=>h.tagName==a.toUpperCase()));return p.length===0&&t&&console.error(`Error traversing ${n}: No element found`),w(p,c)}function z(e,n){if(e.tagName==n.toUpperCase())return e;{let t=e.parentElement;return t?z(t,n):(console.error("Could not find parent element with requested tag ",n),null)}}function K(e,n){if(e.classList.contains(n))return e;{let t=e.parentElement;return t?K(t,n):(console.error("Could not find parent element with requested class ",n),null)}}var Ke=`/* ######## color variables ###### */
.tree {
  --branch-color: #666;
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
  --wrong-background: red;
  --correct-background: lime;
  --hole-selection-background: white;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
    white-space: nowrap;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: 0;
    padding-top: 1.5em;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin-left: 1em;
    margin-right: 1em;
    margin-top: 1.5em;
    padding: .2em .5em;
    position: relative;
    box-sizing: border-box;
}

/* ########### custom AST node  styles ######## */
/* node */
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background);
  transition: 1s background-color ease-out;
}
.tree .terminal-symbol {
  border-width: .2em;
  border-style: double;
}
/* node label */
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: 0.85em;
  text-align: right;

  position: absolute;
  top: calc(-0.85em - 1.5em);
  right: var(--edgetext-right, 50%); /* to be set dynamically */
  margin-right: -1.5em;
  background-color: rgba(255,255,255,0.7);
}
/* tooltip */
.tree .name .tooltip {
  display: none;
}
.tree .name:hover .tooltip {
  display: block;
  position: absolute;
  left: 100%;
  bottom: calc(-0.5em - 1px);
  background-color: var(--node-background);
  border: 1px solid var(--branch-color);
  text-align: left;
  padding: 0.5em;
  z-index: 1000;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    width: var(--connector-width, 0px); /* to be set dynamically */
    left: var(--connector-left, 50%); /* to be set dynamically */
    position: absolute;
    top: -1.5em;
    transform: var(--connector-transform); /* to be set dynamically */
}
.tree span.terminal-symbol:before {
  top: calc(-1.5em - .2em);
}

/* ####### highlight way back up from a node ###### */
/* .tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
} */

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree .hole:hover {
  cursor: pointer;
}

.tree [data-collapsed="true"] {
  display: none;
}

/* ######### holes ########## */
.tree .char {
  display: inline;
  margin: 0;
  border: none;
  padding: 0;
  border-radius: 0;
  background-color: transparent;
  transition: background-color 1s ease-out;
}
.tree .char::before {
  display: none;
}

.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}

/* ########### quiz ########## */

/* quiz stages */
.tree span[data-quiz-state="production"] .name,
.tree span[data-quiz-state="production"] .code,
.tree span[data-quiz-state="production"] .hole-marking {
  display: none;
}

.tree span[data-quiz-state="hole-marking"] .code,
.tree span[data-quiz-state="hole-marking"] .production {
  display: none;
}

.tree span[data-quiz-state="done"] .production,
.tree span[data-quiz-state="done"] .hole-marking {
  display: none;
}

/* highlighting text by putting a div behind a textarea */
.tree textarea,
.tree .marker-container {
  font-family: inherit;
  resize: none;
  font-size: calc(1em);
  padding: 2px;
  margin: .2em;
  border: none;
  box-sizing: border-box;
}

.tree .textarea-container {
  position: relative;
  display: inline-block;
}
.tree textarea {
  position: relative;
  background-color: transparent;
  z-index: 2;
}
.tree .marker-container {
  text-align: left;
  background-color: var(--hole-selection-background);
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
}
.tree .marker {
  color: transparent;
  background-color: transparent;
  transition: 1s background-color ease-out;
}

/* feedback for wrong answer */
.tree .wrong {
  background-color: var(--wrong-background);
  transition: none;
}
.tree .correct {
  background-color: var(--correct-background);
  transition: none;
}
`;function ie(e,n,t,o=!1,a="en"){if(t||(t=cn(e)),!document.getElementById("bsl-tools-tree-style")){let c=document.createElement("style");c.innerHTML=Ke,c.id="bsl-tools-tree-style",document.getElementsByTagName("head")[0].appendChild(c)}Je.includes(a)||(console.error(`
      Selected language "${a}" is not implemented, defaulting to "en".
      Available language codes: ${Je.join(", ")}
    `),a="en"),n.innerHTML=`
    <ul class="tree ast">
      ${o?Ze(e,a,t):Ge(e,t)}
    </ul>
  `,o&&w([n],"ul/li/ul/li").map(c=>c.setAttribute("data-collapsed","false")),ae(n)}function cn(e){let n={};return Qe(e,n),n}function Qe(e,n){n[e.production]=[],e.holes.map(t=>Qe(t.content,n))}var Je=["en","de"],We={en:{"select production":"Select production","mark selected text as hole":"Mark selected text as hole"},de:{"select production":"Produktion ausw\xE4hlen","mark selected text as hole":"Auswahl als Loch markieren"}};function ae(e){let n=parseFloat(getComputedStyle(e).fontSize)*3;for(let t=1;;t++){let o=Array.from(e.getElementsByClassName(`hole-${t}`));if(o.length<1)return;o.map(a=>{let c=a,p=.5*(c.getBoundingClientRect().x+c.getBoundingClientRect().right);if(p==0)return;let d=z(c,"li");!d||w([d],`ul/.child-${t}/span`).map(h=>{let x=h,f=.5*(x.getBoundingClientRect().x+x.getBoundingClientRect().right),m=p-f,b=-Math.atan2(n,m),v=Math.sqrt(m*m+n*n),k=m/2-v/2;x.style.cssText=`
          --connector-width: ${v}px;
          --connector-left: calc(50% + ${k}px);
          --edgetext-right: calc(50% - ${m/2}px);
          --connector-transform: rotate(${b}rad);
        `})})}}function Ge(e,n,t=-1){return`
    <li class="${t>=0?`child-${t+1}`:""}"
        data-collapsed="${t>=0?"true":"false"}">
      <span class="${e.holes.length>0?"":"terminal-symbol"}">

        ${Ye(e,n)}

        ${Xe(e)}

      </span>
      ${e.holes.length>0?`<ul>${e.holes.map((o,a)=>Ge(o.content,n,a)).join("")}</ul>`:""}
    </li>
  `}function Se(e){return e.replaceAll("<","&lt;").replaceAll(">","&gt;")}function J(e){return e.replaceAll("&lt;","<").replaceAll("&gt;",">")}function Xe(e){return`
  <div class="code">${pn(e).map(t=>`<span class="char ${t.pos?`hole hole-${t.pos}`:""}"
             ${t.pos?`onclick="toggleChild(event,${t.pos})"`:""}
             >${e.code.slice(t.start,t.end)}</span>`).join("")}
  </div>
  `}window.toggleChild=(e,n)=>{let t=e.target,o=z(t,"li"),a=K(t,"tree");if(!o||!a){console.error("toggleChild called from .hole not in .tree");return}w([o],`ul/.child-${n}`).map(c=>{c.setAttribute("data-collapsed",c.getAttribute("data-collapsed")==="true"?"false":"true")}),ae(a)};function pn(e){let n=[],t=0;for(let o=0;o<e.holes.length;o++)e.holes[o].start>t&&n.push({pos:!1,start:t,end:e.holes[o].start}),n.push(qe({pos:o+1},e.holes[o])),t=e.holes[o].end;return t<e.code.length&&n.push({pos:!1,start:t,end:e.code.length}),n}function Ye(e,n){return`
    <div class="name">${Se(e.production)}${n[e.production]&&n[e.production].length>0?`<div class="tooltip">::= ${n[e.production].map(Se).join("<br>&nbsp;|&nbsp;&nbsp;")}</div>`:""}</div>
  `}function Ze(e,n,t,o=-1){return`
    <li class="${o>=0?`child-${o+1}`:""}"
        data-collapsed="${o>=0?"true":"false"}">
      <span class="${e.holes.length>0?"":"terminal-symbol"}"
            data-quiz-state="${o>=0?"production":"done"}"
            data-is-terminal="${e.holes.length<=0}"
            data-is-trivial-hole="${e.holes.length===1&&e.holes[0].start===0&&e.holes[0].end===e.code.length}">

        ${un(e,n,t)}

        ${dn(e,n)}

        ${Ye(e,t)}
        ${Xe(e)}
      </span>
      ${e.holes.length>0?`<ul>${e.holes.map((a,c)=>Ze(a.content,n,t,c)).join("")}</ul>`:""}
    </li>
  `}function un(e,n,t){return`
  <div class="production">
    <select onchange="checkProduction(event, '${e.production}')">
      <option selected="true">${We[n]["select production"]}</option>
      ${Object.keys(t).map(o=>`
          <option value="${o}">${Se(o)}</option>
        `).join("")}
    </select>
  </div>
  `}window.checkProduction=(e,n)=>{let t=e.target;if(t.value===n){let o=z(t,"span");if(o){o.getAttribute("data-is-terminal")==="true"?o.setAttribute("data-quiz-state","done"):o.getAttribute("data-is-trivial-hole")==="true"?(o.setAttribute("data-quiz-state","done"),w([o],"+/li",!0).map(c=>c.setAttribute("data-collapsed","false"))):o.setAttribute("data-quiz-state","hole-marking"),w([o],"../+").map(c=>c.setAttribute("data-collapsed","false"));let a=K(o,"tree");a&&ae(a)}}else{Array.from(t.selectedOptions).map(a=>a.remove());let o=z(t,"span");o&&(o.classList.add("wrong"),window.setTimeout(()=>{o.classList.remove("wrong")},100))}};function dn(e,n){return`
  <div class="hole-marking"
       data-holes="${btoa(JSON.stringify(e.holes.map(t=>[t.start,t.end,!1])))}">
    <div class="textarea-container">
      <div class="marker-container">
        ${e.code.split(`
`).map(t=>t.split("").map(o=>`<span class="char marker">${o}</span>`).join("")).join('<span class="char marker"></span><br>')}
      </div>
      <textarea autocorrect="off"
                spellcheck="false"
                cols="${e.code.split(`
`).map(t=>t.length).reduce((t,o)=>t>o?t:o)}"
                rows="${e.code.split(`
`).length}"
                oninput="stopInput(event, '${btoa(e.code)}')">${e.code}</textarea>
    </div><br>
    <button onclick="checkSelection(event)">
      ${We[n]["mark selected text as hole"]}
    </button>
  </div>
  `}window.stopInput=(e,n)=>{e.target.value=atob(n)};window.checkSelection=e=>{let n=e.target,t=K(n,"hole-marking");if(!t){console.error("checkProduction called from el. not wrapped in div.hole-marking");return}let o=JSON.parse(atob(t.getAttribute("data-holes"))),a=t.getElementsByTagName("textarea")[0],c=a.selectionStart,p=a.selectionEnd,d=c<p?c:p,h=c<p?p:c,x=-1;if(o.map((f,m)=>{f[0]===d&&f[1]===h&&(f[2]=!0,x=m)}),x>=0)t.setAttribute("data-holes",btoa(JSON.stringify(o))),w([t],".textarea-container/.marker-container/.marker",!0).slice(d,h).map(f=>f.classList.add("correct"));else{let f=w([t],".textarea-container/.marker-container/.marker",!0).slice(d,h);f.map(m=>m.classList.add("wrong")),window.setTimeout(()=>{f.map(m=>m.classList.remove("wrong"))},100)}if(o.every(f=>f[2])){let f=z(t,"span");if(f){f.setAttribute("data-quiz-state","done"),w([f],"../ul/.child-1").map(b=>b.setAttribute("data-collapsed","false"));let m=K(f,"tree");m&&ae(m)}}};function he(e,n,t){return t=t||" ",e.length>n?e:(n-=e.length,t+=t.repeat(n),e+t.slice(0,n))}var M=class extends Error{constructor(t,o,a,c){super();this.message=t,this.expected=o,this.found=a,this.location=c,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,M.prototype):this.__proto__=M.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,M)}static buildMessage(t,o){function a(f){return f.charCodeAt(0).toString(16).toUpperCase()}function c(f){return f.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,m=>"\\x0"+a(m)).replace(/[\x10-\x1F\x7F-\x9F]/g,m=>"\\x"+a(m))}function p(f){return f.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,m=>"\\x0"+a(m)).replace(/[\x10-\x1F\x7F-\x9F]/g,m=>"\\x"+a(m))}function d(f){switch(f.type){case"literal":return'"'+c(f.text)+'"';case"class":let m=f.parts.map(b=>Array.isArray(b)?p(b[0])+"-"+p(b[1]):p(b));return"["+(f.inverted?"^":"")+m+"]";case"any":return"any character";case"end":return"end of input";case"other":return f.description}}function h(f){let m=f.map(d),b,v;if(m.sort(),m.length>0){for(b=1,v=1;b<m.length;b++)m[b-1]!==m[b]&&(m[v]=m[b],v++);m.length=v}switch(m.length){case 1:return m[0];case 2:return m[0]+" or "+m[1];default:return m.slice(0,-1).join(", ")+", or "+m[m.length-1]}}function x(f){return f?'"'+c(f)+'"':"end of input"}return"Expected "+h(t)+" but "+x(o)+" found."}format(t){let o="Error: "+this.message;if(this.location){let a=null,c;for(c=0;c<t.length;c++)if(t[c].source===this.location.source){a=t[c].text.split(/\r\n|\n|\r/g);break}let p=this.location.start,d=this.location.source+":"+p.line+":"+p.column;if(a){let h=this.location.end,x=he("",p.line.toString().length," "),f=a[p.line-1],m=p.line===h.line?h.column:f.length+1;o+=`
 --> `+d+`
`+x+` |
`+p.line+" | "+f+`
`+x+" | "+he("",p.column-1," ")+he("",m-p.column,"^")}else o+=`
 at `+d}return o}};function fn(e,n){n=n!==void 0?n:{};let t={},o=n.grammarSource,a={Program:De},c=De,p=function(r){return r},d=/^[\t \n \r]/,h=ne(["	"," ",`
`," ","\r"],!1,!1),x=function(r){return r},f="(define-struct",m=_("(define-struct",!1),b="(",v=_("(",!1),k=")",D=_(")",!1),mt=function(r,i){return{type:"Struct Definition",binding:r,properties:i}},Z="(define",Te=_("(define",!1),yt=function(r,i,l){return{type:"Function Definition",name:r,args:i,body:l}},St=function(r,i){return{type:"Constant Definition",name:r,value:i}},ht=function(r){return r},be="(cond",xt=_("(cond",!1),Tt=function(r){return{type:"Cond-Expression",options:r}},bt="[",Ct=_("[",!1),$t="]",Lt=_("]",!1),At=function(r,i){return{type:"Cond-Option",condition:r,result:i}},Et=function(r,i){return{type:"Function Call",name:r,args:i}},Ce="define",_t=_("define",!1),$e=/^[^",'`()[\]{}|#\n\t\r0-9 ]/,Le=ne(['"',",","'","`","(",")","[","]","{","}","|","#",`
`,"	","\r",["0","9"]," "],!0,!1),Rt=function(r){return{type:"Symbol",symbol:r.join("")}},vt=function(r){return{type:"Literal Value",value:r}},Ae=/^[0-9]/,Ee=ne([["0","9"]],!1,!1),Bt=function(){return parseInt(Ft(),10)},_e="#true",Pt=_("#true",!1),Re="#false",It=_("#false",!1),ve="#t",wt=_("#t",!1),Be="#f",kt=_("#f",!1),Nt=function(r){return r==="#true"||r==="#t"},Pe="'()",Ut=_("'()",!1),Ht=function(){return"'()"},Ie='"',we=_('"',!1),ke=/^[^"]/,Ne=ne(['"'],!0,!1),Mt=function(r){return r.join("")},Dt=Ue("whitespace"),Ot=function(){},s=0,T=0,ee=[{line:1,column:1}],I=0,fe=[],y=0,te;if(n.startRule!==void 0){if(!(n.startRule in a))throw new Error(`Can't start parsing from rule "`+n.startRule+'".');c=a[n.startRule]}function Ft(){return e.substring(T,s)}function qn(){return W(T,s)}function Vn(r,i){throw i=i!==void 0?i:W(T,s),Me([Ue(r)],e.substring(T,s),i)}function Kn(r,i){throw i=i!==void 0?i:W(T,s),zt(r,i)}function _(r,i){return{type:"literal",text:r,ignoreCase:i}}function ne(r,i,l){return{type:"class",parts:r,inverted:i,ignoreCase:l}}function Jn(){return{type:"any"}}function jt(){return{type:"end"}}function Ue(r){return{type:"other",description:r}}function He(r){let i=ee[r],l;if(i)return i;for(l=r-1;!ee[l];)l--;for(i=ee[l],i={line:i.line,column:i.column};l<r;)e.charCodeAt(l)===10?(i.line++,i.column=1):i.column++,l++;return ee[r]=i,i}function W(r,i){let l=He(r),u=He(i);return{source:o,start:{offset:r,line:l.line,column:l.column},end:{offset:i,line:u.line,column:u.column}}}function S(r){s<I||(s>I&&(I=s,fe=[]),fe.push(r))}function zt(r,i){return new M(r,[],"",i)}function Me(r,i,l){return new M(M.buildMessage(r,i),r,i,l)}function De(){let r,i,l;if(r=s,i=[],l=Oe(),l!==t)for(;l!==t;)i.push(l),l=Oe();else i=t;return i!==t&&(T=r,i=p(i)),r=i,r}function Oe(){let r,i,l,u;if(r=s,i=qt(),i===t&&(i=O()),i!==t){if(l=[],d.test(e.charAt(s))?(u=e.charAt(s),s++):(u=t,y===0&&S(h)),u!==t)for(;u!==t;)l.push(u),d.test(e.charAt(s))?(u=e.charAt(s),s++):(u=t,y===0&&S(h));else l=t;l!==t?(T=r,i=p(i),r=i):(s=r,r=t)}else s=r,r=t;return r}function qt(){let r,i,l;return r=s,i=L(),i!==t?(l=Vt(),l===t&&(l=Kt(),l===t&&(l=Jt())),l!==t?(T=r,i=x(l),r=i):(s=r,r=t)):(s=r,r=t),r}function Vt(){let r,i,l,u,g,B,C,A,F;if(r=s,e.substr(s,14)===f?(i=f,s+=14):(i=t,y===0&&S(m)),i!==t)if(l=N(),l!==t)if(u=L(),u!==t)if(e.charCodeAt(s)===40?(g=b,s++):(g=t,y===0&&S(v)),g!==t){if(B=[],C=N(),C!==t)for(;C!==t;)B.push(C),C=N();else B=t;B!==t?(e.charCodeAt(s)===41?(C=k,s++):(C=t,y===0&&S(D)),C!==t?(A=L(),A!==t?(e.charCodeAt(s)===41?(F=k,s++):(F=t,y===0&&S(D)),F!==t?(T=r,i=mt(l,B),r=i):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)}else s=r,r=t;else s=r,r=t;else s=r,r=t;else s=r,r=t;return r}function Kt(){let r,i,l,u,g,B,C,A,F,ge;if(r=s,e.substr(s,7)===Z?(i=Z,s+=7):(i=t,y===0&&S(Te)),i!==t)if(l=L(),l!==t)if(e.charCodeAt(s)===40?(u=b,s++):(u=t,y===0&&S(v)),u!==t)if(g=N(),g!==t)if(B=L(),B!==t){if(C=[],A=N(),A!==t)for(;A!==t;)C.push(A),A=N();else C=t;C!==t?(e.charCodeAt(s)===41?(A=k,s++):(A=t,y===0&&S(D)),A!==t?(F=O(),F!==t?(e.charCodeAt(s)===41?(ge=k,s++):(ge=t,y===0&&S(D)),ge!==t?(T=r,i=yt(g,C,F),r=i):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)}else s=r,r=t;else s=r,r=t;else s=r,r=t;else s=r,r=t;else s=r,r=t;return r}function Jt(){let r,i,l,u,g;return r=s,e.substr(s,7)===Z?(i=Z,s+=7):(i=t,y===0&&S(Te)),i!==t?(l=N(),l!==t?(u=O(),u!==t?(e.charCodeAt(s)===41?(g=k,s++):(g=t,y===0&&S(D)),g!==t?(T=r,i=St(l,u),r=i):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t),r}function O(){let r,i,l;return r=s,i=L(),i!==t?(l=Qt(),l===t&&(l=Wt(),l===t&&(l=N(),l===t&&(l=Gt()))),l!==t?(T=r,i=ht(l),r=i):(s=r,r=t)):(s=r,r=t),r}function Qt(){let r,i,l,u,g;if(r=s,e.substr(s,5)===be?(i=be,s+=5):(i=t,y===0&&S(xt)),i!==t){if(l=[],u=Fe(),u!==t)for(;u!==t;)l.push(u),u=Fe();else l=t;l!==t?(u=L(),u!==t?(e.charCodeAt(s)===41?(g=k,s++):(g=t,y===0&&S(D)),g!==t?(T=r,i=Tt(l),r=i):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)}else s=r,r=t;return r}function Fe(){let r,i,l,u,g,B,C,A;return r=s,i=L(),i!==t?(e.charCodeAt(s)===91?(l=bt,s++):(l=t,y===0&&S(Ct)),l!==t?(u=L(),u!==t?(g=O(),g!==t?(B=L(),B!==t?(C=O(),C!==t?(e.charCodeAt(s)===93?(A=$t,s++):(A=t,y===0&&S(Lt)),A!==t?(T=r,i=At(g,C),r=i):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t)):(s=r,r=t),r}function Wt(){let r,i,l,u,g;if(r=s,e.charCodeAt(s)===40?(i=b,s++):(i=t,y===0&&S(v)),i!==t)if(l=N(),l!==t){for(u=[],g=O();g!==t;)u.push(g),g=O();u!==t?(e.charCodeAt(s)===41?(g=k,s++):(g=t,y===0&&S(D)),g!==t?(T=r,i=Et(l,u),r=i):(s=r,r=t)):(s=r,r=t)}else s=r,r=t;else s=r,r=t;return r}function N(){let r,i,l,u,g;if(r=s,i=L(),i!==t)if(l=s,y++,e.substr(s,6)===Ce?(u=Ce,s+=6):(u=t,y===0&&S(_t)),y--,u===t?l=void 0:(s=l,l=t),l!==t){if(u=[],$e.test(e.charAt(s))?(g=e.charAt(s),s++):(g=t,y===0&&S(Le)),g!==t)for(;g!==t;)u.push(g),$e.test(e.charAt(s))?(g=e.charAt(s),s++):(g=t,y===0&&S(Le));else u=t;u!==t?(T=r,i=Rt(u),r=i):(s=r,r=t)}else s=r,r=t;else s=r,r=t;return r}function Gt(){let r,i;return r=s,i=Xt(),i===t&&(i=Yt(),i===t&&(i=Zt(),i===t&&(i=en()))),i!==t&&(T=r,i=vt(i)),r=i,r}function Xt(){let r,i,l,u;if(r=s,i=L(),i!==t){if(l=[],Ae.test(e.charAt(s))?(u=e.charAt(s),s++):(u=t,y===0&&S(Ee)),u!==t)for(;u!==t;)l.push(u),Ae.test(e.charAt(s))?(u=e.charAt(s),s++):(u=t,y===0&&S(Ee));else l=t;l!==t?(T=r,i=Bt(),r=i):(s=r,r=t)}else s=r,r=t;return r}function Yt(){let r,i,l;return r=s,i=L(),i!==t?(e.substr(s,5)===_e?(l=_e,s+=5):(l=t,y===0&&S(Pt)),l===t&&(e.substr(s,6)===Re?(l=Re,s+=6):(l=t,y===0&&S(It)),l===t&&(e.substr(s,2)===ve?(l=ve,s+=2):(l=t,y===0&&S(wt)),l===t&&(e.substr(s,2)===Be?(l=Be,s+=2):(l=t,y===0&&S(kt))))),l!==t?(T=r,i=Nt(l),r=i):(s=r,r=t)):(s=r,r=t),r}function Zt(){let r,i,l;return r=s,i=L(),i!==t?(e.substr(s,3)===Pe?(l=Pe,s+=3):(l=t,y===0&&S(Ut)),l!==t?(T=r,i=Ht(),r=i):(s=r,r=t)):(s=r,r=t),r}function en(){let r,i,l,u,g;if(r=s,i=L(),i!==t)if(e.charCodeAt(s)===34?(l=Ie,s++):(l=t,y===0&&S(we)),l!==t){if(u=[],ke.test(e.charAt(s))?(g=e.charAt(s),s++):(g=t,y===0&&S(Ne)),g!==t)for(;g!==t;)u.push(g),ke.test(e.charAt(s))?(g=e.charAt(s),s++):(g=t,y===0&&S(Ne));else u=t;u!==t?(e.charCodeAt(s)===34?(g=Ie,s++):(g=t,y===0&&S(we)),g!==t?(T=r,i=Mt(u),r=i):(s=r,r=t)):(s=r,r=t)}else s=r,r=t;else s=r,r=t;return r}function L(){let r,i,l;for(y++,r=s,i=[],d.test(e.charAt(s))?(l=e.charAt(s),s++):(l=t,y===0&&S(h));l!==t;)i.push(l),d.test(e.charAt(s))?(l=e.charAt(s),s++):(l=t,y===0&&S(h));return i!==t&&(T=r,i=Ot()),r=i,y--,r===t&&(i=t,y===0&&S(Dt)),r}if(te=c(),te!==t&&s===e.length)return te;throw te!==t&&s<e.length&&S(jt()),Me(fe,I<e.length?e.charAt(I):null,I<e.length?W(I,I+1):W(I,I))}var le=fn;var et=`/* css for errors */
.error-wrapper{
    display:flex;
    flex-direction:column;
    margin:2vw;
    font-size:inherit;
}

.error{
    font-size:1.2em;
}
`;function tt(){Array.from(document.getElementsByTagName("bsltree")).map(e=>{try{let n=le(J(e.innerHTML)),t=Sn(n),o=e.getAttribute("quiz")==="true",a=e.getAttribute("lang")?e.getAttribute("lang"):void 0;ie(t,e,yn,o,a)}catch(n){mn(e,`${n.location.start.line}:${n.location.start.column} ${n}`)}})}function mn(e,n){if(!document.getElementById("bsl-tools-error-style")){let h=document.createElement("style");h.innerHTML=et,h.id="bsl-tools-error-style",document.getElementsByTagName("head")[0].appendChild(h)}let t=e.innerHTML;e.innerHTML="";let o=document.createElement("div");o.classList.add("error-wrapper"),e.appendChild(o);let a=`<p> BSL-Tree could not be parsed! </p>
                  <p> Input: <b style="font-size:0.9em;">${t}</b> </p>`,c=document.createElement("div");c.classList.add("origin"),c.innerHTML=a,o.appendChild(c);let p=document.createElement("pre");p.classList.add("error");let d=document.createElement("code");d.textContent=n,o.appendChild(p),p.appendChild(d)}var yn={"<program>":["<def-or-expr>*"],"<def-or-expr>*":[],"<def-or-expr>":["<definition>","<e>"],"<definition>":["(define (<name> <name>+) <e>)","(define <name> <e>)","(define-struct <name> (<name>*))"],"<e>":["(name <e>*)","(cond {[<e>,<e>]}+)","<name>","<v>"],"<e>*":[],"{[ <e> <e> ]}+":[],"[ <e> <e> ]":[],"<name>*":[],"<name>+":[],"<name>":[],"<v>":[]};function Sn(e){let n=e.map(ye),t=[],o="";for(let a=0;a<n.length;a++){a>0&&(o=`${o}
`);let c=o.length;o=`${o}${n[a]}`;let p=o.length;t.push({start:c,end:p})}return{production:"<program>",code:o,holes:[{start:0,end:o.length,content:{production:"<def-or-expr>*",code:o,holes:t.map((a,c)=>({start:a.start,end:a.end,content:hn(e[c])}))}}]}}function hn(e){let n=ye(e);return{production:"<def-or-expr>",code:n,holes:[{start:0,end:n.length,content:re(e)?xn(e):Q(e)}]}}function xn(e){let n="",t=[];if(G(e)){n="(define (";let o=n.length;n=`${n}${$(e.name)}`,t.push({start:o,end:n.length,content:q(e.name)}),n=`${n} `,o=n.length,n=`${n}${e.args.map($).join(" ")}`,t.push({start:o,end:n.length,content:Tn(e.args)}),n=`${n}) `,o=n.length,n=`${n}${E(e.body)}`,t.push({start:o,end:n.length,content:Q(e.body)}),n=`${n})`}else if(X(e)){n="(define ";let o=n.length;n=`${n}${$(e.name)}`,t.push({start:o,end:n.length,content:q(e.name)}),n=`${n} `,o=n.length,n=`${n}${E(e.value)}`,t.push({start:o,end:n.length,content:Q(e.value)}),n=`${n})`}else{n="(define-struct ";let o=n.length;n=`${n}${$(e.binding)}`,t.push({start:o,end:n.length,content:q(e.binding)}),n=`${n} (`,o=n.length,n=`${n}${e.properties.map($).join(" ")}`,t.push({start:o,end:n.length,content:bn(e.properties)}),n=`${n}))`}return{production:"<definition>",code:n,holes:t}}function Q(e){let n="",t=[];if(U(e)){n="(";let o=n.length;n=`${n}${$(e.name)}`,t.push({start:o,end:n.length,content:q(e.name)}),n=`${n} `,o=n.length,n=`${n}${e.args.map(E).join(" ")}`,t.push({start:o,end:n.length,content:Cn(e.args)}),n=`${n})`}else if(H(e)){n="(cond ";let o=n.length;n=`${n}${e.options.map(se).join(" ")}`,t.push({start:o,end:n.length,content:$n(e.options)}),n=`${n})`}else j(e)?(n=$(e),t.push({start:0,end:n.length,content:q(e)})):(n=E(e),t.push({start:0,end:n.length,content:An(e)}));return{production:"<e>",code:n,holes:t}}function q(e){return{production:"<name>",code:$(e),holes:[]}}function Tn(e){e.length<1&&console.error("<name>+ but used but names are empty");let n="",t=[];for(let o=0;o<e.length;o++){let a=n.length;n=`${n}${$(e[o])}`,t.push({start:a,end:n.length,content:q(e[o])}),o<e.length-1&&(n=`${n} `)}return{production:"<name>+",code:n,holes:t}}function bn(e){let n="",t=[];for(let o=0;o<e.length;o++){let a=n.length;n=`${n}${$(e[o])}`,t.push({start:a,end:n.length,content:q(e[o])}),o<e.length-1&&(n=`${n} `)}return{production:"<name>*",code:n,holes:t}}function Cn(e){let n="",t=[];for(let o=0;o<e.length;o++){let a=n.length;n=`${n}${E(e[o])}`,t.push({start:a,end:n.length,content:Q(e[o])}),o<e.length-1&&(n=`${n} `)}return{production:"<e>*",code:n,holes:t}}function $n(e){let n="",t=[];for(let o=0;o<e.length;o++){let a=n.length;n=`${n}${se(e[o])}`,t.push({start:a,end:n.length,content:Ln(e[o])}),o<e.length-1&&(n=`${n} `)}return{production:"{[ <e> <e> ]}+",code:n,holes:t}}function Ln(e){let n="",t=[];n=`${n}[`;let o=n.length;return n=`${n}${E(e.condition)}`,t.push({start:o,end:n.length,content:Q(e.condition)}),n=`${n} `,o=n.length,n=`${n}${E(e.result)}`,t.push({start:o,end:n.length,content:Q(e.result)}),n=`${n}]`,{production:"[ <e> <e> ]",code:n,holes:t}}function An(e){return{production:"<v>",code:E(e),holes:[]}}function nt(){Array.from(document.getElementsByTagName("jsontree")).map(e=>{try{let n=En(J(e.innerHTML)),t=n.root,o=n.grammar,a=e.getAttribute("quiz")==="true",c=e.getAttribute("lang")?e.getAttribute("lang"):void 0;ie(t,e,o,a,c)}catch(n){console.error(n),e.innerHTML=`${n}`,e.style.cssText=`
        padding: 2em;
        color: darkred;
        display: block;
      `}})}function En(e){let n=JSON.parse(e.trim()),t=n.grammar;return{root:rt(n),grammar:t}}function rt(e){let n=e.production;if(!n||typeof n!="string")throw`${JSON.stringify(e,void 0,2).replaceAll(`
`,"<br>")} has wrong structure, production needs to be a string`;let t=e.code;if(!t||typeof t!="string")throw`${JSON.stringify(e,void 0,2).replaceAll(`
`,"<br>")} has wrong structure, code needs to be a string`;e.holes||(e.holes=[]);let o=t.split("|"),a="",c=[];for(let p=0;p<o.length;p++)if(a=`${a}${o[p]}`,p++,p<o.length&&o[p]){let d=a.length;a=`${a}${o[p]}`;let h=e.holes[c.length];if(!h)throw`${JSON.stringify(e,void 0,2).replaceAll(`
`,"<br>")} has wrong structure: less holes than marked with || in the code`;c.push({start:d,end:a.length,content:rt(h)})}return{production:n,code:a,holes:c}}function ot(e){return e.type==="Stepper"}function st(e){return e.type==="StepResult"}function ce(e){return e.type==="CallRedex"}function pe(e){return e.type==="CondRedex"}function it(e){return e.type==="Hole"}function at(e){return e.type==="AppContext"}function Y(e){return e.type==="Split"}function xe(e){return e.type==="PlugResult"}function ue(e){return e.type==="Prim"||e.type==="CondRule"}function P(e){return typeof e=="number"||typeof e=="string"||typeof e=="boolean"||e==="'()"}var ct=`stepper{
    display:flex;
    flex-direction:column;
    align-items:center;
    font-size: 1.2em;
}
/* .eval-step{
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: left;
    max-width: 1200px;
    margin: 2vh auto;
} */
.program-wrapper{
margin:2vw;
padding: 1vh 2vw; 
font-size: 1.1em;
font-weight: 600;
border: 1px solid #000;
}
.program-overview{
    display: flex;
    flex-direction: column;
    margin: 1vh auto;
}

.step-result{
}

[visible="false"]{
    display: none;
}

[visible="true"]{
    display: block;
}

.split-rule-plug{
    display: flex;
    flex-direction: row;
    max-width:1200px;
    margin: 2vh auto;
    padding: 1vw;
    border: 1px solid #000;
}
.split,.rule,.plug{
    padding: 0 1.3vw;
    margin:0 1.2vw;
}
pre{
    margin: 1vh 0 3vh 0;
    font-size: 1.1em;
}

.step-button{
    padding: 2vw;
    font-size:1.1em;
}`;function pt(e,n){if(P(e))return n;{let t=n.stepperTree;for(;!P(e);){let a=vn(e);if(P(a))e=a;else if(st(a))e=a.plugResult.expr,t.push(a);else return a}let o={type:"Stepper",root:n.root,originExpr:n.originExpr,stepperTree:t};return o.stepperTree.map((a,c)=>a.currentStep=c),o}}function vn(e){if(R(e))return e.value;{let n=ut(e);if(console.log("splitExpr",n),Y(n)){let t=Bn(n.redex);if(console.log("stepExpr",t),ue(t)){let o=dt(t,n.context);return console.log("plugExpr",o),xe(o)?{type:"StepResult",splitResult:n,plugResult:o,currentStep:0}:o}else return t}else return n}}function ut(e){let n={type:"Hole"};if(U(e)){let t=e.name,o=e.args,a=[],c=[],p=-1,d=!1;if(o.map((x,f)=>!d&&R(x)?"left":!d&&!R(x)?(d=!0,p=f,"middle"):"right").map((x,f)=>{x=="left"?a.push(o[f].value):x=="right"&&c.push(o[f])}),p==-1){let x={type:"CallRedex",name:t,args:a};return{type:"Split",redex:x,context:n}}else{let x=o[p],f=ut(x);return Y(f)?{type:"Split",redex:f.redex,context:{type:"AppContext",op:t,values:a,ctx:f.context,args:c}}:f}}else if(H(e)){let t=e.options[0];return R(t.condition)?{type:"Split",redex:{type:"CondRedex",options:e.options},context:n}:Error("not implemented")}else return j(e)?(console.log("error: expr is  Name, or undefined"),Error("error: expr is Name, or undefined")):Error("error: something unexpected occured")}function Bn(e){if(ce(e)){let n=Pn(e);return P(n)?{type:"Prim",redex:e,result:n}:Error("error: prim is not applicable")}else if(pe(e)){let n=e.options[0],t=In(e);return Ve(t)?{type:"CondRule",redex:e,result:t}:Error("error: cond is not applicable")}else return Error("error: redex is neither a call nor cond")}function dt(e,n){if(it(n))return console.log("plug: oneRule",e),{type:"PlugResult",expr:e.result,rule:e};{let t=dt(e,n.ctx);if(xe(t)){let a=[n.values,t.expr,n.args].flat().map(p=>P(p)?{type:"Literal Value",value:p}:p),c={type:"Function Call",name:n.op,args:a};return{type:"PlugResult",expr:c,rule:{type:"Kong",redexRule:e}}}else return t}}function Pn(e){if(e.name.symbol==="+"){let n=0;return e.args.forEach(t=>{if(typeof t=="number")n+=t;else return Error("error: argument is not a number: "+t)}),n}else if(e.name.symbol==="*"){let n=1;return e.args.forEach(t=>{if(typeof t=="number")n*=t;else return Error("error: argument is not a number: "+t)}),n}else if(e.name.symbol==="-"){let n=e.args[0];for(let t=1;t<e.args.length;t++){let o=e.args[t];if(typeof o=="number"&&typeof n=="number")n-=o;else return Error("error: argument is not a number: "+e.args[t])}return n}else if(e.name.symbol==="/"){let n=e.args[0];for(let t=1;t<e.args.length;t++){let o=e.args[t];if(typeof n=="number"&&typeof o=="number"&&o!=0)n/=o;else return o==0?Error("error: division by zero"):Error("error: argument is not a number: "+o)}return n}else return e.name.symbol==="and"?e.args.every(n=>typeof n=="boolean")?e.args.length>=2?!!e.args.every(n=>n):Error("prim: 'and' needs at least two arguments"):Error("prim: 'and' needs boolean arguments"):e.name.symbol==="or"?e.args.every(n=>typeof n=="boolean")?e.args.length>=2?!!e.args.some(n=>n):Error("prim: 'or' needs at least two arguments"):Error("prim: 'or' needs boolean arguments"):e.name.symbol==="not"?typeof e.args[0]=="boolean"?e.args.length==1?!e.args[0]:Error("prim: 'not' needs exactly one argument"):Error("prim: 'not' needs boolean argument"):Error("prim: this function is not implemented")}function In(e){let n=e.options[0];if(R(n.condition)&&n.condition.value==!0)return n.result;if(R(n.condition)&&n.condition.value==!1){console.log("r.options",e.options);let t=e.options.slice(1).map(o=>({type:"Cond-Option",condition:o.condition,result:o.result}));return console.log("newOptions",t),{type:"Cond-Expression",options:t}}else return Error("error: condition is not a boolean")}function ft(){Array.from(document.getElementsByTagName("stepper")).map(e=>{try{let n=le(J(e.innerHTML));wn(n,e)}catch(n){console.error(n),e.innerHTML=`${n}`,e.style.cssText=`
        padding: 2em;
        color: darkred;
        display: block;
      `}})}function wn(e,n){if(!document.getElementById("bsl-tools-stepper-style")){let c=document.createElement("style");c.innerHTML=ct,c.id="bsl-tools-stepper-style",document.getElementsByTagName("head")[0].appendChild(c)}let t=e[0];console.log("expression",t);let o={type:"Stepper",root:n,originExpr:t,stepperTree:[]},a=pt(t,o);if(console.log("stepper",a),ot(a)){n.innerHTML=kn(a);let c=n.querySelector("#prevButton"),p=n.querySelector("#nextButton");c.addEventListener("click",jn),p.addEventListener("click",zn)}else console.error(a),n.innerHTML=`${a}`,n.style.cssText=`
          padding: 2em;
          color: darkred;
          display: block;
        `}function kn(e){let n=e.stepperTree,t=e.originExpr;return`<stepper>
        <div class="program-wrapper">
            Original Expression:
            <pre><code>${V(t)}</code></pre>
        </div>
        <div class="step-result-wrapper">
        ${n.map(a=>Nn(n,a)).join("")}
        </div>
        <div class="buttons">
            <button class="step-button" id="prevButton" style="visibility: hidden">Previous Step</button>
            <button class="step-button" id="nextButton">Next Step</button>
        </div>
    </stepper>`}function Nn(e,n){let t=n.currentStep,o=e.slice(0,t).map(d=>d.plugResult.expr),a=n.splitResult,c=n.plugResult;return`<div class="step-result" currentStep="${t}" visible=${t==0?"true":"false"}>
                    <div class="program-overview">
                        Program Overview:
                        <ul>
                        ${o.map(d=>P(d)?de(d):V(d)).join(`
`)}
                        </ul>
                    </div>
                    <div class="split-rule-plug">
                        <div class="split">
                            Split:
                            ${Un(a)}
                        </div>
                        ${Hn(c)}
                    </div>
                </div>`}function V(e){if(U(e)){let n=e.name.symbol,t=e.args.map(a=>V(a)).join(" ");return`(${n} ${t})`}else return R(e)?`${e.value}`:P(e)?`${e}`:H(e)?e.options.map(t=>V(t.condition)+" -> "+V(t.result)).join(`
`):(console.error("error: expr is neither Call nor Literal: "+e),"Neither Call nor Literal")}function de(e){return`${e}`}function Un(e){if(Y(e)){let n=e.redex,t=e.context,o=Mn(n);return`
        <div class="context">
            Context: ${at(t)?Dn(t):On(t)}
        </div>
        <div class="redex">
            Redex: ${o}
        </div>`}else return`${e}`}function Hn(e){let n=e.expr,t=e.rule;return`
    <div class="rule">
        ${ue(t)?gt(t):Fn(t)}
    </div>
    <div class="plug">
        Plug Result: <pre><code>${P(n)?de(n):V(n)}</code></pre>
    </div>`}function Mn(e){if(ce(e)){let n=e.name.symbol,t=e.args.map(a=>de(a)).join(" ");return`<pre><code>(${n} ${t})</code></pre>`}else return pe(e)?"Conditional Redex":"Something went wrong: renderRedex"}function Dn(e){let n=e.op?e.op:"",t=e.args.map(a=>P(a)?de(a):V(a)).join(" ");return`<pre><code>(${n} ${t})</code></pre>`}function On(e){return'<span class="hole">[    ]</span>'}function gt(e){let t=`${e.type}`;return console.log(t),t}function Fn(e){let n=e.type,t=e.redexRule;return`${n} with ${gt(t)} `}function jn(e){var p,d,h;let n=e.target,t=(d=(p=n.parentElement)==null?void 0:p.parentElement)==null?void 0:d.getElementsByClassName("step-result-wrapper")[0],o=t==null?void 0:t.querySelector(".step-result[visible=true]"),a=o==null?void 0:o.previousElementSibling;o==null||o.setAttribute("visible","false"),a==null||a.setAttribute("visible","true");let c=(h=n.parentElement)==null?void 0:h.querySelector("#nextButton");c.style.visibility=="hidden"&&c.setAttribute("style","visibility: visible"),(a==null?void 0:a.getAttribute("currentStep"))=="0"&&n.setAttribute("style","visibility: hidden")}function zn(e){var d,h,x;let n=e.target,t=(h=(d=n.parentElement)==null?void 0:d.parentElement)==null?void 0:h.getElementsByClassName("step-result-wrapper")[0],o=t==null?void 0:t.querySelector(".step-result[visible=true]"),a=o==null?void 0:o.nextElementSibling,c=t==null?void 0:t.getElementsByClassName("step-result").length;o==null||o.setAttribute("visible","false"),a==null||a.setAttribute("visible","true");let p=(x=n.parentElement)==null?void 0:x.querySelector("#prevButton");p.style.visibility=="hidden"&&p.setAttribute("style","visibility: visible"),(a==null?void 0:a.getAttribute("currentStep"))==(c-1).toString()&&n.setAttribute("style","visibility: hidden")}window.onload=()=>{tt(),nt(),ft()};})();
//# sourceMappingURL=data:application/json;base64,
