(()=>{function K(n){return z(n)||q(n)||V(n)}function z(n){return n.type==="Function Definition"}function q(n){return n.type==="Constant Definition"}function V(n){return n.type==="Struct Definition"}function Q(n){return n.type==="Function Call"}function X(n){return n.type==="Cond-Expression"}function Y(n){return n.type==="Symbol"}function Z(n){return n.type==="Literal Value"}function H(n){return n.map($t).join(`
`)}function $t(n){return K(n)?At(n):C(n)}function At(n){if(z(n))return`(define ${T(n.name)} (${n.args.map(T).join(" ")}) ${C(n.body)})`;if(q(n))return`(define ${T(n.name)} ${C(n.value)})`;if(V(n))return`(define-struct ${T(n.binding)} (${n.properties.map(T).join(" ")}))`;console.error("Invalid input to printDefinition")}function C(n){return Q(n)?`(${T(n.name)} ${n.args.map(C).join(" ")})`:X(n)?`(cond ${n.options.map(te).join(" ")})`:Y(n)?T(n):Z(n)?typeof n.value=="string"&&n.value!=="'()"?`"${n.value}"`:typeof n.value=="boolean"?n.value?"#true":"#false":`${n.value}`:(console.error("Invalid input to printE"),`<${n}>`)}function te(n){return`[${C(n.condition)} ${C(n.result)}]`}function T(n){return n.symbol}var zt=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{type:"Cond-Option",condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},{type:"Literal Value",value:3}]},result:{type:"Literal Value",value:"isThree"}},{type:"Cond-Option",condition:{type:"Literal Value",value:!1},result:{type:"Literal Value",value:"'()"}}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:{type:"Literal Value",value:42}},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function De(n,o,e=!1){let f=e?Ct:Tt;o.innerHTML=n.map(d=>Et(d,f)).join(`
`),_t(o),Pt(o),e||Dt(o)}function Et(n,o){return`<ul class="tree ast"><li>${K(n)?vt(n,o):R(n,o)}</li></ul>`}function we(n){return typeof n.code=="string"&&(n.code=[n.code]),`
    <div class="${["hole",n.pos?`hole-${n.pos}`:"",n.placeholder==="name"?"hole-name":"",["name+","name*"].includes(n.placeholder)?"hole-names":""].join(" ")}">
      ${n.code.map(e=>`<div class="code">${e}</div>`).join(" ")}
      <div class="placeholder">${n.placeholder}</div>
    </div>
  `}function Tt(n){return`
    <span>
      <div class="name">${n.production}</div>
      <div>
        ${n.code.map(o=>typeof o=="string"?o:we(o)).join(" ")}
      </div>
    </span>
  `}function Ct(n){return`
    <span data-collapsed="true">
      <div class="name">${n.production}</div>
      <div>
        ${n.code.map(o=>typeof o=="string"?o:we(o)).join(" ")}
      </div>
    </span>
  `}function vt(n,o){if(z(n)){let e={production:n.type,code:["( define ( ",{pos:1,code:H([n.name]),placeholder:"name"},{pos:2,code:n.args.map(T),placeholder:"name+"},") ",{pos:3,code:H([n.body]),placeholder:"e"},")"]};return`
      ${o(e)}
      <ul>
        <li class="child-1">${O(n.name,o)}</li>
        ${n.args.map(f=>`<li class="child-2">${O(f,o)}</li>`).join("")}
        <li class="child-3">${R(n.body,o)}</li>
      </ul>`}else if(q(n)){let e={production:n.type,code:["( define ",{pos:1,code:H([n.name]),placeholder:"name"},{pos:2,code:H([n.value]),placeholder:"e"},")"]};return`
      ${o(e)}
      <ul>
        <li class="child-1">${O(n.name,o)}</li>
        <li class="child-2">${R(n.value,o)}</li>
      </ul>`}else if(V(n)){let e={production:n.type,code:["( define-struct ",{pos:1,code:H([n.binding]),placeholder:"name"},"(",{pos:2,code:n.properties.map(T),placeholder:"name*"},") )"]};return`
      ${o(e)}
      <ul>
        <li class="child-1">${O(n.binding,o)}</li>
        ${n.properties.map(f=>`<li class="child-2">${O(f,o)}</li>`).join("")}
      </ul>`}else console.error("Invalid input to printDefinition")}function R(n,o){if(Q(n)){let e={production:n.type,code:["( ",{pos:1,code:H([n.name]),placeholder:"name"}," ",{pos:2,code:n.args.map(C),placeholder:"e*"},")"]};return`
      ${o(e)}
      <ul>
        <li class="child-1">${O(n.name,o)}</li>
        ${n.args.map(f=>`<li class="child-2">${R(f,o)}</li>`).join("")}
      </ul>`}else if(X(n)){let e={production:n.type,code:["( cond ",{pos:2,code:n.options.map(te),placeholder:"[ e e ]+"},")"]};return`
      ${o(e)}
      <ul>
        ${n.options.map(f=>`<li class="child-2">${Bt(f,o)}</li>`).join(" ")}
      </ul>`}else{if(Y(n))return O(n,o);if(Z(n)){let e={production:n.type,code:[C(n)]};return o(e)}else return console.error("Invalid input to treeE"),console.error(n),`
      <span>
        <div class="name">Invalid input to treeE</div>
        <div>${n}</div>
      </span>
    `}}function Bt(n,o){let e={production:n.type,code:["[",{pos:1,code:C(n.condition),placeholder:"e"}," ",{pos:2,code:C(n.result),placeholder:"e"},"]"]};return`
    ${o(e)}
    <ul>
      <li class="child-1">${R(n.condition,o)}</li>
      <li class="child-2">${R(n.result,o)}</li>
    </ul>
  `}function O(n,o){let e={production:n.type,code:[T(n)]};return o(e)}function _t(n){ne(n,"hole-1","child-1"),ne(n,"hole-2","child-2"),ne(n,"hole-3","child-3")}function ne(n,o,e){Array.from(n.getElementsByClassName(o)).map(f=>{let d=f,g=.5*(d.getBoundingClientRect().x+d.getBoundingClientRect().right);if(g==0)return;let y=j([d],"../../+")[0];Array.from(y.children).filter(S=>S.classList.contains(e)).map(S=>{let x=S,D=.5*(x.getBoundingClientRect().x+x.getBoundingClientRect().right),m=g-D,u="";m<0?u+=`
          --connector-left: auto;
          --connector-right: 50%;
          --connector-border-left-style: solid;
          --connector-border-right-style: none;`:u+=`
          --connector-left: 50%;
          --connector-right: auto;
          --connector-border-left-style: none;
          --connector-border-right-style: solid;`,u+=`--connector-width: ${Math.abs(m)+1}px;`,x.style.cssText=u})})}function Pt(n){Array.from(n.getElementsByClassName("name")).map(o=>{let e=j([o],"+/.hole/.code");if(e.length==0)return;let f=j([o],"../+/li/span/.name/+");if(e.length!=f.length){console.error("Error: More or less children than code figments",o,e,f);return}for(let d=0;d<e.length;d++){let g=e[d],y=f[d],S=g.getBoundingClientRect(),x=y.getBoundingClientRect();g.style.cssText=`
        --translate-x: ${(x.x+x.right)/2-(S.x+S.right)/2}px;
        --translate-y: ${x.y-S.y}px;
      `}})}function j(n,o){let e=o.split("/"),f=e.shift();if(f=="")return n;let d=e.join("/");if(f==".."){let g=n.map(y=>y.parentElement);return g.every(y=>y)?j(g,d):(console.error(`Error traversing ${o}: Missing parentElement`,n),[])}else if(f=="+"){let g=n.map(y=>y.nextElementSibling);return g.every(y=>y)?j(g,d):(console.error(`Error traversing ${o}: Missing nextElementSibling`,n),[])}else if(f.startsWith(".")){let g=f.slice(1),y=n.flatMap(S=>Array.from(S.children).filter(x=>x.classList.contains(g)));return j(y,d)}else{let g=n.flatMap(y=>Array.from(y.children).filter(S=>S.tagName==f.toUpperCase()));return j(g,d)}}function Dt(n){Array.from(n.getElementsByTagName("span")).map(o=>{o.onclick=()=>{let e=o;if(e.getAttribute("data-collapsed"))e.removeAttribute("data-collapsed");else{e.setAttribute("data-collapsed","true");let f=e.nextElementSibling;if(!f)return;Array.from(f.getElementsByTagName("span")).map(d=>{d.setAttribute("data-collapsed","true")})}}})}function re(n,o,e){return e=e||" ",n.length>o?n:(o-=n.length,e+=e.repeat(o),n+e.slice(0,o))}var P=class extends Error{constructor(e,f,d,g){super();this.message=e,this.expected=f,this.found=d,this.location=g,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,P.prototype):this.__proto__=P.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,P)}static buildMessage(e,f){function d(m){return m.charCodeAt(0).toString(16).toUpperCase()}function g(m){return m.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,u=>"\\x0"+d(u)).replace(/[\x10-\x1F\x7F-\x9F]/g,u=>"\\x"+d(u))}function y(m){return m.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,u=>"\\x0"+d(u)).replace(/[\x10-\x1F\x7F-\x9F]/g,u=>"\\x"+d(u))}function S(m){switch(m.type){case"literal":return'"'+g(m.text)+'"';case"class":let u=m.parts.map($=>Array.isArray($)?y($[0])+"-"+y($[1]):y($));return"["+(m.inverted?"^":"")+u+"]";case"any":return"any character";case"end":return"end of input";case"other":return m.description}}function x(m){let u=m.map(S),$,w;if(u.sort(),u.length>0){for($=1,w=1;$<u.length;$++)u[$-1]!==u[$]&&(u[w]=u[$],w++);u.length=w}switch(u.length){case 1:return u[0];case 2:return u[0]+" or "+u[1];default:return u.slice(0,-1).join(", ")+", or "+u[u.length-1]}}function D(m){return m?'"'+g(m)+'"':"end of input"}return"Expected "+x(e)+" but "+D(f)+" found."}format(e){let f="Error: "+this.message;if(this.location){let d=null,g;for(g=0;g<e.length;g++)if(e[g].source===this.location.source){d=e[g].text.split(/\r\n|\n|\r/g);break}let y=this.location.start,S=this.location.source+":"+y.line+":"+y.column;if(d){let x=this.location.end,D=re("",y.line.toString().length," "),m=d[y.line-1],u=y.line===x.line?x.column:m.length+1;f+=`
 --> `+S+`
`+D+` |
`+y.line+" | "+m+`
`+D+" | "+re("",y.column-1," ")+re("",u-y.column,"^")}else f+=`
 at `+S}return f}};function Nt(n,o){o=o!==void 0?o:{};let e={},f=o.grammarSource,d={Program:ve},g=ve,y=function(t){return t},S=/^[\t \n \r]/,x=G(["	"," ",`
`," ","\r"],!1,!1),D=function(t){return t},m="(define-struct",u=A("(define-struct",!1),$="(",w=A("(",!1),N=")",I=A(")",!1),Me=function(t,i){return{type:"Struct Definition",binding:t,properties:i}},J="(define",se=A("(define",!1),He=function(t,i,s){return{type:"Function Definition",name:t,args:i,body:s}},Oe=function(t,i){return{type:"Constant Definition",name:t,value:i}},je=function(t){return t},oe="(cond",Re=A("(cond",!1),ke=function(t){return{type:"Cond-Expression",options:t}},ze="[",qe=A("[",!1),Ve="]",Je=A("]",!1),Ue=function(t,i){return{type:"Cond-Option",condition:t,result:i}},We=function(t,i){return{type:"Function Call",name:t,args:i}},ae=/^[^",'`()[\]{}|#]/,le=G(['"',",","'","`","(",")","[","]","{","}","|","#"],!0,!1),ce="<",pe=A("<",!1),fe=">",ue=A(">",!1),Ge=function(t){return{type:"Symbol",symbol:t.join("")}},Ke=function(t){return{type:"Literal Value",value:t}},de=/^[0-9]/,ye=G([["0","9"]],!1,!1),Qe=function(){return parseInt(at(),10)},ge="#true",Xe=A("#true",!1),me="#false",Ye=A("#false",!1),he="#t",Ze=A("#t",!1),Se="#f",et=A("#f",!1),tt=function(t){return t==="#true"||t==="#t"},be="'()",nt=A("'()",!1),rt=function(){return"'()"},xe='"',$e=A('"',!1),Ae=/^[^"]/,Le=G(['"'],!0,!1),it=function(t){return t.join("")},st=Ee("whitespace"),ot=function(){},r=0,h=0,U=[{line:1,column:1}],v=0,ee=[],l=0,W;if(o.startRule!==void 0){if(!(o.startRule in d))throw new Error(`Can't start parsing from rule "`+o.startRule+'".');g=d[o.startRule]}function at(){return n.substring(h,r)}function Ht(){return k(h,r)}function Ot(t,i){throw i=i!==void 0?i:k(h,r),Ce([Ee(t)],n.substring(h,r),i)}function jt(t,i){throw i=i!==void 0?i:k(h,r),ct(t,i)}function A(t,i){return{type:"literal",text:t,ignoreCase:i}}function G(t,i,s){return{type:"class",parts:t,inverted:i,ignoreCase:s}}function Rt(){return{type:"any"}}function lt(){return{type:"end"}}function Ee(t){return{type:"other",description:t}}function Te(t){let i=U[t],s;if(i)return i;for(s=t-1;!U[s];)s--;for(i=U[s],i={line:i.line,column:i.column};s<t;)n.charCodeAt(s)===10?(i.line++,i.column=1):i.column++,s++;return U[t]=i,i}function k(t,i){let s=Te(t),a=Te(i);return{source:f,start:{offset:t,line:s.line,column:s.column},end:{offset:i,line:a.line,column:a.column}}}function c(t){r<v||(r>v&&(v=r,ee=[]),ee.push(t))}function ct(t,i){return new P(t,[],"",i)}function Ce(t,i,s){return new P(P.buildMessage(t,i),t,i,s)}function ve(){let t,i,s;if(t=r,i=[],s=Be(),s!==e)for(;s!==e;)i.push(s),s=Be();else i=e;return i!==e&&(h=t,i=y(i)),t=i,t}function Be(){let t,i,s,a;if(t=r,i=pt(),i===e&&(i=F()),i!==e){if(s=[],S.test(n.charAt(r))?(a=n.charAt(r),r++):(a=e,l===0&&c(x)),a!==e)for(;a!==e;)s.push(a),S.test(n.charAt(r))?(a=n.charAt(r),r++):(a=e,l===0&&c(x));else s=e;s!==e?(h=t,i=y(i),t=i):(r=t,t=e)}else r=t,t=e;return t}function pt(){let t,i,s;return t=r,i=L(),i!==e?(s=ft(),s===e&&(s=ut(),s===e&&(s=dt())),s!==e?(h=t,i=D(s),t=i):(r=t,t=e)):(r=t,t=e),t}function ft(){let t,i,s,a,p,E,b,B,M;if(t=r,n.substr(r,14)===m?(i=m,r+=14):(i=e,l===0&&c(u)),i!==e)if(s=_(),s!==e)if(a=L(),a!==e)if(n.charCodeAt(r)===40?(p=$,r++):(p=e,l===0&&c(w)),p!==e){if(E=[],b=_(),b!==e)for(;b!==e;)E.push(b),b=_();else E=e;E!==e?(n.charCodeAt(r)===41?(b=N,r++):(b=e,l===0&&c(I)),b!==e?(B=L(),B!==e?(n.charCodeAt(r)===41?(M=N,r++):(M=e,l===0&&c(I)),M!==e?(h=t,i=Me(s,E),t=i):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)}else r=t,t=e;else r=t,t=e;else r=t,t=e;else r=t,t=e;return t}function ut(){let t,i,s,a,p,E,b,B,M;if(t=r,n.substr(r,7)===J?(i=J,r+=7):(i=e,l===0&&c(se)),i!==e)if(s=_(),s!==e)if(a=L(),a!==e)if(n.charCodeAt(r)===40?(p=$,r++):(p=e,l===0&&c(w)),p!==e){if(E=[],b=_(),b!==e)for(;b!==e;)E.push(b),b=_();else E=e;E!==e?(n.charCodeAt(r)===41?(b=N,r++):(b=e,l===0&&c(I)),b!==e?(B=F(),B!==e?(n.charCodeAt(r)===41?(M=N,r++):(M=e,l===0&&c(I)),M!==e?(h=t,i=He(s,E,B),t=i):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)}else r=t,t=e;else r=t,t=e;else r=t,t=e;else r=t,t=e;return t}function dt(){let t,i,s,a,p;return t=r,n.substr(r,7)===J?(i=J,r+=7):(i=e,l===0&&c(se)),i!==e?(s=_(),s!==e?(a=F(),a!==e?(n.charCodeAt(r)===41?(p=N,r++):(p=e,l===0&&c(I)),p!==e?(h=t,i=Oe(s,a),t=i):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e),t}function F(){let t,i,s;return t=r,i=L(),i!==e?(s=yt(),s===e&&(s=gt(),s===e&&(s=_(),s===e&&(s=mt()))),s!==e?(h=t,i=je(s),t=i):(r=t,t=e)):(r=t,t=e),t}function yt(){let t,i,s,a,p;if(t=r,n.substr(r,5)===oe?(i=oe,r+=5):(i=e,l===0&&c(Re)),i!==e){if(s=[],a=_e(),a!==e)for(;a!==e;)s.push(a),a=_e();else s=e;s!==e?(a=L(),a!==e?(n.charCodeAt(r)===41?(p=N,r++):(p=e,l===0&&c(I)),p!==e?(h=t,i=ke(s),t=i):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)}else r=t,t=e;return t}function _e(){let t,i,s,a,p,E,b,B;return t=r,i=L(),i!==e?(n.charCodeAt(r)===91?(s=ze,r++):(s=e,l===0&&c(qe)),s!==e?(a=L(),a!==e?(p=F(),p!==e?(E=L(),E!==e?(b=F(),b!==e?(n.charCodeAt(r)===93?(B=Ve,r++):(B=e,l===0&&c(Je)),B!==e?(h=t,i=Ue(p,b),t=i):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e)):(r=t,t=e),t}function gt(){let t,i,s,a,p;if(t=r,n.charCodeAt(r)===40?(i=$,r++):(i=e,l===0&&c(w)),i!==e)if(s=_(),s!==e){for(a=[],p=F();p!==e;)a.push(p),p=F();a!==e?(n.charCodeAt(r)===41?(p=N,r++):(p=e,l===0&&c(I)),p!==e?(h=t,i=We(s,a),t=i):(r=t,t=e)):(r=t,t=e)}else r=t,t=e;else r=t,t=e;return t}function _(){let t,i,s,a;if(t=r,i=L(),i!==e){if(s=[],ae.test(n.charAt(r))?(a=n.charAt(r),r++):(a=e,l===0&&c(le)),a===e&&(n.charCodeAt(r)===60?(a=ce,r++):(a=e,l===0&&c(pe)),a===e&&(n.charCodeAt(r)===62?(a=fe,r++):(a=e,l===0&&c(ue)))),a!==e)for(;a!==e;)s.push(a),ae.test(n.charAt(r))?(a=n.charAt(r),r++):(a=e,l===0&&c(le)),a===e&&(n.charCodeAt(r)===60?(a=ce,r++):(a=e,l===0&&c(pe)),a===e&&(n.charCodeAt(r)===62?(a=fe,r++):(a=e,l===0&&c(ue))));else s=e;s!==e?(h=t,i=Ge(s),t=i):(r=t,t=e)}else r=t,t=e;return t}function mt(){let t,i;return t=r,i=ht(),i===e&&(i=St(),i===e&&(i=bt(),i===e&&(i=xt()))),i!==e&&(h=t,i=Ke(i)),t=i,t}function ht(){let t,i,s,a;if(t=r,i=L(),i!==e){if(s=[],de.test(n.charAt(r))?(a=n.charAt(r),r++):(a=e,l===0&&c(ye)),a!==e)for(;a!==e;)s.push(a),de.test(n.charAt(r))?(a=n.charAt(r),r++):(a=e,l===0&&c(ye));else s=e;s!==e?(h=t,i=Qe(),t=i):(r=t,t=e)}else r=t,t=e;return t}function St(){let t,i,s;return t=r,i=L(),i!==e?(n.substr(r,5)===ge?(s=ge,r+=5):(s=e,l===0&&c(Xe)),s===e&&(n.substr(r,6)===me?(s=me,r+=6):(s=e,l===0&&c(Ye)),s===e&&(n.substr(r,2)===he?(s=he,r+=2):(s=e,l===0&&c(Ze)),s===e&&(n.substr(r,2)===Se?(s=Se,r+=2):(s=e,l===0&&c(et))))),s!==e?(h=t,i=tt(s),t=i):(r=t,t=e)):(r=t,t=e),t}function bt(){let t,i,s;return t=r,i=L(),i!==e?(n.substr(r,3)===be?(s=be,r+=3):(s=e,l===0&&c(nt)),s!==e?(h=t,i=rt(),t=i):(r=t,t=e)):(r=t,t=e),t}function xt(){let t,i,s,a,p;if(t=r,i=L(),i!==e)if(n.charCodeAt(r)===34?(s=xe,r++):(s=e,l===0&&c($e)),s!==e){if(a=[],Ae.test(n.charAt(r))?(p=n.charAt(r),r++):(p=e,l===0&&c(Le)),p!==e)for(;p!==e;)a.push(p),Ae.test(n.charAt(r))?(p=n.charAt(r),r++):(p=e,l===0&&c(Le));else a=e;a!==e?(n.charCodeAt(r)===34?(p=xe,r++):(p=e,l===0&&c($e)),p!==e?(h=t,i=it(a),t=i):(r=t,t=e)):(r=t,t=e)}else r=t,t=e;else r=t,t=e;return t}function L(){let t,i,s;for(l++,t=r,i=[],S.test(n.charAt(r))?(s=n.charAt(r),r++):(s=e,l===0&&c(x));s!==e;)i.push(s),S.test(n.charAt(r))?(s=n.charAt(r),r++):(s=e,l===0&&c(x));return i!==e&&(h=t,i=ot()),t=i,l--,t===e&&(i=e,l===0&&c(st)),t}if(W=g(),W!==e&&r===n.length)return W;throw W!==e&&r<n.length&&c(lt()),Ce(ee,v<n.length?n.charAt(v):null,v<n.length?k(v,v+1):k(v,v))}var Ne=Nt;var Ie=`.tree {
  --branch-color: #666;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: .5em 0;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin: 0 .2em .5em;
    padding: .2em .5em;
    position: relative;
}

/* ########### custom AST node  styles ######## */
.tree {
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
}
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background); /* racket azure */
}
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: small;
  text-align: left;
  margin-bottom: 0.5em;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    height: .5em;
    left: 50%;
    position: absolute;
    top: calc(-.5em - 2px);
}
/* horizontal part + part pointing to corresp. hole
   -> width etc will be set via JavaScript
      Javascript cannot style ::before elements directly
      (since they are not part of the DOM),
      the variables will be set on the parent li element */
.tree li::before {
  box-sizing: border-box;
  content: "";
  position: absolute;
  height: .5em; /* overridden for some */
  top: -.5em;
  left: var(--connector-left, auto);
  right: var(--connector-right, auto);
  width: var(--connector-width, 100%);

  border: solid 2px var(--branch-color);
  border-top-style: none;
  border-left-style: var(--connector-border-left-style, none);
  border-right-style: var(--connector-border-right-style, none);
}

/* prevent up to 3 connectors from crossing */
.tree li.child-1::before {
  height: .3em;
}
.tree li.child-1 > span::before {
  top: calc(-.7em - 2px);
  height: 0.7em;
}

.tree li.child-3::before {
  height: .7em;
}
.tree li.child-3 > span::before {
  top: calc(-.3em - 2px);
  height: 0.3em;
}

/* ####### highlight way back up from a node ###### */
.tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
}

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree span:hover {
  cursor: pointer;
}

/* smooth transition between hiding and showing */
@keyframes hide-delayed {
  99% {
    visibility: visible;
  }
  100% {
    visibility: hidden;
  }
}
.tree span[data-collapsed] ~ ul {
  opacity: 0%;
  visibility: hidden;
  animation: hide-delayed 1s;
  transition: opacity 0.5s ease-out 0.5s;
}
.tree ul {
  opacity: 100%;
  transition: opacity 1s ease-out;
}

/* ######### holes ########## */
.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}
/* show/hide parts/holes  and float them into place */
.tree .code, .tree .placeholder {
  display: inline-block;
}
.tree .code {
  /* color: transparent; */
  transform: translate(var(--translate-x,0), var(--translate-y,0));
  transition: transform 1s ease-out;
}
.tree span[data-collapsed] .code {
  color: var(--text-grey);
  transform: translate(0,0);
}
.tree .placeholder {
  color: var(--text-grey);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  text-align: center;
}
.tree span[data-collapsed] .placeholder {
  display: none;
}

.tree .hole-name {
  min-width: 2em;
}
.tree .hole-names {
  min-width: 2.5em;
}
`;var Fe=`/* modifications for tree quiz */
bsl-tree[quiz="true"] .tree .name {
  font-size: inherit;
}
`;var ie=document.createElement("style");ie.innerHTML=Ie;ie.innerHTML+=Fe;document.getElementsByTagName("head")[0].appendChild(ie);function Mt(){Array.from(document.getElementsByTagName("bsltree")).map(n=>{try{let o=Ne(n.innerHTML),e=!!n.getAttribute("quiz");De(o,n,e)}catch(o){n.innerHTML+=`<br>${o}`}})}window.onload=()=>{Mt()};})();
//# sourceMappingURL=data:application/json;base64,
