(()=>{var G=(x=>(x.FunctionDefinition="Function Definition",x.ConstantDefinition="Constant Definition",x.StructDefinition="Struct Definition",x.FunctionCall="Function Call",x.CondExpression="Cond-Expression",x.CondOption="Cond-Option",x.Symbol="Symbol",x.Literal="Literal Value",x.Number="Number",x))(G||{});function re(t){return W(t)||Q(t)||X(t)}function W(t){return t.type==="Function Definition"}function Q(t){return t.type==="Constant Definition"}function X(t){return t.type==="Struct Definition"}function ze(t){return U(t)||q(t)||j(t)||_(t)}function U(t){return t.type==="Function Call"}function q(t){return t.type==="Cond-Expression"}function j(t){return t.type==="Symbol"}function _(t){return t.type==="Literal Value"}function O(t){return t.map(Mt).join(`
`)}function Mt(t){return re(t)?Nt(t):R(t)}function Nt(t){if(W(t))return`(define ${$(t.name)} (${t.args.map($).join(" ")}) ${R(t.body)})`;if(Q(t))return`(define ${$(t.name)} ${R(t.value)})`;if(X(t))return`(define-struct ${$(t.binding)} (${t.properties.map($).join(" ")}))`;console.error("Invalid input to printDefinition")}function R(t){return U(t)?`(${$(t.name)} ${t.args.map(R).join(" ")})`:q(t)?`(cond ${t.options.map(ie).join(" ")})`:j(t)?$(t):_(t)?typeof t.value=="string"&&t.value!=="'()"?`"${t.value}"`:typeof t.value=="boolean"?t.value?"#true":"#false":`${t.value}`:(console.error("Invalid input to printE"),`<${t}>`)}function ie(t){return`[${R(t.condition)} ${R(t.result)}]`}function $(t){return t.symbol}var Ar=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{type:"Cond-Option",condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},{type:"Literal Value",value:3}]},result:{type:"Literal Value",value:"isThree"}},{type:"Cond-Option",condition:{type:"Literal Value",value:!1},result:{type:"Literal Value",value:"'()"}}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:{type:"Literal Value",value:42}},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function Ne(t,o,e=!1){let i=e?Ot:jt;o.innerHTML=t.map(a=>qt(a,i)).join(`
`),Wt(o),Qt(o),e||Xt(o)}function qt(t,o){return`<ul class="tree ast"><li>${re(t)?Jt(t,o):F(t,o)}</li></ul>`}function De(t){return typeof t.code=="string"&&(t.code=[t.code]),`
    <div class="${["hole",t.pos?`hole-${t.pos}`:"",t.placeholder==="name"?"hole-name":"",["name+","name*"].includes(t.placeholder)?"hole-names":""].join(" ")}">
      ${t.code.map(e=>`<div class="code">${e}</div>`).join(" ")}
      <div class="placeholder">${t.placeholder}</div>
    </div>
  `}function Me(t){return typeof t.code=="string"&&(t.code=[t.code]),ae(t.code.join(" "))}function jt(t){return`
    <span>
      <div class="name">${t.production}</div>
      <div>
        ${t.code.map(o=>typeof o=="string"?o:De(o)).join(" ")}
      </div>
    </span>
  `}function ae(t){return t.split(" ").map(o=>o.trim()).filter(o=>o.length>0).join(" ").replaceAll("( ","(").replaceAll(" )",")")}function Ot(t){let o=ae(t.code.map(i=>typeof i=="string"?i:Me(i)).join(" "));return`
    <span data-collapsed="true"
          data-holes="${JSON.stringify(t.code.filter(i=>typeof i!="string").map(i=>Me(i))).replaceAll('"',"&quot;")}"
          data-quiz="production">
      <div class="name">
         ${t.production}
         <select data-solution="${t.production}"
                 onchange="guessProduction(event)">
            <option>---</option>
            ${Object.values(G).map(i=>`<option value="${i}">${i}</option>`)}
         </select>
         <div class="tip">
            First, select the correct production...
         </div>
      </div>
      <div class="codeblock">
        ${ae(t.code.map(i=>typeof i=="string"?i:De(i)).join(" "))}
        <div class="actualcode">
          ${o.split("").map(i=>`<span class="char"
                   onmouseup="endSelection(event)">${i}</span>`).join("")}
        </div>
        <div class="tip">
           Second, select all subexpressions to expand the node!
        </div>
      </div>
    </span>
  `}function kt(t){let o=t.target,e=o.getAttribute("data-solution"),i=o.parentElement,a=i.parentElement;o.value===e?(i.innerHTML=e,a.removeAttribute("data-wrong"),a.getAttribute("data-holes")==="[]"?(a.setAttribute("data-quiz","done"),a.removeAttribute("data-collapsed")):(a.setAttribute("data-quiz","holes"),Ft(i.nextElementSibling))):a.setAttribute("data-wrong","true")}window.guessProduction=kt;function Ft(t){let o=w([t],".actualcode/span");if(o.length<1)return;let e=document.createRange();e.setStart(o[0],0);let i=o.length<10?o.length:10,a=window.getSelection();for(let c=0;c<i;c++)window.setTimeout(()=>{e.setEnd(o[c],0),a.addRange(e)},c*100);window.setTimeout(()=>a.empty(),1500)}function Kt(t){let e=t.target.parentElement,i=w([e],"../..")[0];if(i.getAttribute("data-quiz")!=="holes")return;let a=window.getSelection();if(!a)return;let c=Array.from(e.children).filter(g=>a.containsNode(g,!0)),p=c.map(g=>g.innerHTML).join(""),d=JSON.parse(i.getAttribute("data-holes").replaceAll("&quot;",'"'));if(!(!d.length||d.length<1)){if(d.includes(p)){d=d.filter(b=>b!==p),c.map(b=>b.classList.add("correct-selection-middle"));let g=c[0];g.classList.remove("correct-selection-middle"),g.classList.remove("selection-start"),g.classList.add("correct-selection-start");let x=c[c.length-1];x.classList.remove("correct-selection-middle"),x.classList.remove("selection-end"),x.classList.add("correct-selection-end"),d.length<=0?(i.removeAttribute("data-holes"),i.setAttribute("data-quiz","done"),window.setTimeout(()=>i.removeAttribute("data-collapsed"),1e3)):i.setAttribute("data-holes",JSON.stringify(d).replaceAll('"',"&quot;"))}else{c.map(b=>b.classList.add("wrong-selection-middle"));let g=c[0];g.classList.remove("wrong-selection-middle"),g.classList.remove("selection-start"),g.classList.add("wrong-selection-start");let x=c[c.length-1];x.classList.remove("wrong-selection-middle"),x.classList.remove("selection-end"),x.classList.add("wrong-selection-end"),window.setTimeout(()=>{c.map(b=>b.classList.remove("wrong-selection-middle")),g.classList.remove("wrong-selection-start"),x.classList.remove("wrong-selection-end")},1e3)}a.empty()}}window.endSelection=Kt;function Jt(t,o){if(W(t)){let e={production:t.type,code:["( define (",{pos:1,code:O([t.name]),placeholder:"name"},{pos:2,code:t.args.map($),placeholder:"name+"},") ",{pos:3,code:O([t.body]),placeholder:"e"},")"]};return`
      ${o(e)}
      <ul>
        <li class="child-1">${k(t.name,o)}</li>
        ${t.args.map(i=>`<li class="child-2">${k(i,o)}</li>`).join("")}
        <li class="child-3">${F(t.body,o)}</li>
      </ul>`}else if(Q(t)){let e={production:t.type,code:["( define ",{pos:1,code:O([t.name]),placeholder:"name"},{pos:2,code:O([t.value]),placeholder:"e"},")"]};return`
      ${o(e)}
      <ul>
        <li class="child-1">${k(t.name,o)}</li>
        <li class="child-2">${F(t.value,o)}</li>
      </ul>`}else if(X(t)){let e={production:t.type,code:["( define-struct ",{pos:1,code:O([t.binding]),placeholder:"name"},"(",{pos:2,code:t.properties.map($),placeholder:"name*"},") )"]};return`
      ${o(e)}
      <ul>
        <li class="child-1">${k(t.binding,o)}</li>
        ${t.properties.map(i=>`<li class="child-2">${k(i,o)}</li>`).join("")}
      </ul>`}else console.error("Invalid input to printDefinition")}function F(t,o){if(U(t)){let e={production:t.type,code:["( ",{pos:1,code:O([t.name]),placeholder:"name"}," ",{pos:2,code:t.args.map(R),placeholder:"e*"},")"]};return`
      ${o(e)}
      <ul>
        <li class="child-1">${k(t.name,o)}</li>
        ${t.args.map(i=>`<li class="child-2">${F(i,o)}</li>`).join("")}
      </ul>`}else if(q(t)){let e={production:t.type,code:["( cond ",{pos:2,code:t.options.map(ie),placeholder:"[ e e ]+"},")"]};return`
      ${o(e)}
      <ul>
        ${t.options.map(i=>`<li class="child-2">${Gt(i,o)}</li>`).join(" ")}
      </ul>`}else{if(j(t))return k(t,o);if(_(t)){let e={production:t.type,code:[R(t)]};return o(e)}else return console.error("Invalid input to treeE"),console.error(t),`
      <span>
        <div class="name">Invalid input to treeE</div>
        <div>${t}</div>
      </span>
    `}}function Gt(t,o){let e={production:t.type,code:["[",{pos:1,code:R(t.condition),placeholder:"e"}," ",{pos:2,code:R(t.result),placeholder:"e"},"]"]};return`
    ${o(e)}
    <ul>
      <li class="child-1">${F(t.condition,o)}</li>
      <li class="child-2">${F(t.result,o)}</li>
    </ul>
  `}function k(t,o){let e={production:t.type,code:[$(t)]};return o(e)}function Wt(t){le(t,"hole-1","child-1"),le(t,"hole-2","child-2"),le(t,"hole-3","child-3")}function le(t,o,e){Array.from(t.getElementsByClassName(o)).map(i=>{let a=i,c=.5*(a.getBoundingClientRect().x+a.getBoundingClientRect().right);if(c==0)return;let p=w([a],"../../+")[0];Array.from(p.children).filter(d=>d.classList.contains(e)).map(d=>{let g=d,x=.5*(g.getBoundingClientRect().x+g.getBoundingClientRect().right),b=c-x,y="";b<0?y+=`
          --connector-left: auto;
          --connector-right: 50%;
          --connector-border-left-style: solid;
          --connector-border-right-style: none;`:y+=`
          --connector-left: 50%;
          --connector-right: auto;
          --connector-border-left-style: none;
          --connector-border-right-style: solid;`,y+=`--connector-width: ${Math.abs(b)+1}px;`,g.style.cssText=y})})}function Qt(t){Array.from(t.getElementsByClassName("name")).map(o=>{let e=w([o],"+/.hole/.code");if(e.length==0)return;let i=w([o],"../+/li/span/.name/+");if(e.length!=i.length){console.error("Error: More or less children than code figments",o,e,i);return}for(let a=0;a<e.length;a++){let c=e[a],p=i[a],d=c.getBoundingClientRect(),g=p.getBoundingClientRect();c.style.cssText=`
        --translate-x: ${(g.x+g.right)/2-(d.x+d.right)/2}px;
        --translate-y: ${g.y-d.y}px;
      `}})}function w(t,o){let e=o.split("/"),i=e.shift();if(i=="")return t;let a=e.join("/");if(i==".."){let c=t.map(p=>p.parentElement);return c.every(p=>p)?w(c,a):(console.error(`Error traversing ${o}: Missing parentElement`,t),[])}else if(i=="+"){let c=t.map(p=>p.nextElementSibling);return c.every(p=>p)?w(c,a):(console.error(`Error traversing ${o}: Missing nextElementSibling`,t),[])}else if(i.startsWith(".")){let c=i.slice(1),p=t.flatMap(d=>Array.from(d.children).filter(g=>g.classList.contains(c)));return w(p,a)}else{let c=t.flatMap(p=>Array.from(p.children).filter(d=>d.tagName==i.toUpperCase()));return w(c,a)}}function Xt(t){Array.from(t.getElementsByTagName("span")).map(o=>{o.onclick=()=>{let e=o;if(e.getAttribute("data-collapsed"))e.removeAttribute("data-collapsed");else{e.setAttribute("data-collapsed","true");let i=e.nextElementSibling;if(!i)return;Array.from(i.getElementsByTagName("span")).map(a=>{a.setAttribute("data-collapsed","true")})}}})}function ce(t,o,e){return e=e||" ",t.length>o?t:(o-=t.length,e+=e.repeat(o),t+e.slice(0,o))}var I=class extends Error{constructor(e,i,a,c){super();this.message=e,this.expected=i,this.found=a,this.location=c,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,I.prototype):this.__proto__=I.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,I)}static buildMessage(e,i){function a(b){return b.charCodeAt(0).toString(16).toUpperCase()}function c(b){return b.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,y=>"\\x0"+a(y)).replace(/[\x10-\x1F\x7F-\x9F]/g,y=>"\\x"+a(y))}function p(b){return b.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,y=>"\\x0"+a(y)).replace(/[\x10-\x1F\x7F-\x9F]/g,y=>"\\x"+a(y))}function d(b){switch(b.type){case"literal":return'"'+c(b.text)+'"';case"class":let y=b.parts.map(L=>Array.isArray(L)?p(L[0])+"-"+p(L[1]):p(L));return"["+(b.inverted?"^":"")+y+"]";case"any":return"any character";case"end":return"end of input";case"other":return b.description}}function g(b){let y=b.map(d),L,H;if(y.sort(),y.length>0){for(L=1,H=1;L<y.length;L++)y[L-1]!==y[L]&&(y[H]=y[L],H++);y.length=H}switch(y.length){case 1:return y[0];case 2:return y[0]+" or "+y[1];default:return y.slice(0,-1).join(", ")+", or "+y[y.length-1]}}function x(b){return b?'"'+c(b)+'"':"end of input"}return"Expected "+g(e)+" but "+x(i)+" found."}format(e){let i="Error: "+this.message;if(this.location){let a=null,c;for(c=0;c<e.length;c++)if(e[c].source===this.location.source){a=e[c].text.split(/\r\n|\n|\r/g);break}let p=this.location.start,d=this.location.source+":"+p.line+":"+p.column;if(a){let g=this.location.end,x=ce("",p.line.toString().length," "),b=a[p.line-1],y=p.line===g.line?g.column:b.length+1;i+=`
 --> `+d+`
`+x+` |
`+p.line+" | "+b+`
`+x+" | "+ce("",p.column-1," ")+ce("",y-p.column,"^")}else i+=`
 at `+d}return i}};function Zt(t,o){o=o!==void 0?o:{};let e={},i=o.grammarSource,a={Program:Ie},c=Ie,p=function(r){return r},d=/^[\t \n \r]/,g=te(["	"," ",`
`," ","\r"],!1,!1),x=function(r){return r},b="(define-struct",y=C("(define-struct",!1),L="(",H=C("(",!1),z=")",M=C(")",!1),Ye=function(r,s){return{type:"Struct Definition",binding:r,properties:s}},Z="(define",ge=C("(define",!1),Ze=function(r,s,l){return{type:"Function Definition",name:r,args:s,body:l}},Ve=function(r,s){return{type:"Constant Definition",name:r,value:s}},et=function(r){return r},me="(cond",tt=C("(cond",!1),rt=function(r){return{type:"Cond-Expression",options:r}},nt="[",ot=C("[",!1),st="]",it=C("]",!1),lt=function(r,s){return{type:"Cond-Option",condition:r,result:s}},at=function(r,s){return{type:"Function Call",name:r,args:s}},Se="define",ct=C("define",!1),ye=/^[^",'`()[\]{}|#\n\t\r0-9 ]/,be=te(['"',",","'","`","(",")","[","]","{","}","|","#",`
`,"	","\r",["0","9"]," "],!0,!1),pt=function(r){return{type:"Symbol",symbol:r.join("")}},ut=function(r){return{type:"Literal Value",value:r}},xe=/^[0-9]/,he=te([["0","9"]],!1,!1),dt=function(){return parseInt(vt(),10)},Te="#true",ft=C("#true",!1),Le="#false",gt=C("#false",!1),ve="#t",mt=C("#t",!1),Ae="#f",St=C("#f",!1),yt=function(r){return r==="#true"||r==="#t"},Ce="'()",bt=C("'()",!1),xt=function(){return"'()"},_e='"',Ee=C('"',!1),$e=/^[^"]/,Re=te(['"'],!0,!1),ht=function(r){return r.join("")},Tt=Be("whitespace"),Lt=function(){},n=0,h=0,V=[{line:1,column:1}],B=0,oe=[],m=0,ee;if(o.startRule!==void 0){if(!(o.startRule in a))throw new Error(`Can't start parsing from rule "`+o.startRule+'".');c=a[o.startRule]}function vt(){return t.substring(h,n)}function hr(){return J(h,n)}function Tr(r,s){throw s=s!==void 0?s:J(h,n),we([Be(r)],t.substring(h,n),s)}function Lr(r,s){throw s=s!==void 0?s:J(h,n),Ct(r,s)}function C(r,s){return{type:"literal",text:r,ignoreCase:s}}function te(r,s,l){return{type:"class",parts:r,inverted:s,ignoreCase:l}}function vr(){return{type:"any"}}function At(){return{type:"end"}}function Be(r){return{type:"other",description:r}}function Pe(r){let s=V[r],l;if(s)return s;for(l=r-1;!V[l];)l--;for(s=V[l],s={line:s.line,column:s.column};l<r;)t.charCodeAt(l)===10?(s.line++,s.column=1):s.column++,l++;return V[r]=s,s}function J(r,s){let l=Pe(r),u=Pe(s);return{source:i,start:{offset:r,line:l.line,column:l.column},end:{offset:s,line:u.line,column:u.column}}}function S(r){n<B||(n>B&&(B=n,oe=[]),oe.push(r))}function Ct(r,s){return new I(r,[],"",s)}function we(r,s,l){return new I(I.buildMessage(r,s),r,s,l)}function Ie(){let r,s,l;if(r=n,s=[],l=He(),l!==e)for(;l!==e;)s.push(l),l=He();else s=e;return s!==e&&(h=r,s=p(s)),r=s,r}function He(){let r,s,l,u;if(r=n,s=_t(),s===e&&(s=N()),s!==e){if(l=[],d.test(t.charAt(n))?(u=t.charAt(n),n++):(u=e,m===0&&S(g)),u!==e)for(;u!==e;)l.push(u),d.test(t.charAt(n))?(u=t.charAt(n),n++):(u=e,m===0&&S(g));else l=e;l!==e?(h=r,s=p(s),r=s):(n=r,r=e)}else n=r,r=e;return r}function _t(){let r,s,l;return r=n,s=v(),s!==e?(l=Et(),l===e&&(l=$t(),l===e&&(l=Rt())),l!==e?(h=r,s=x(l),r=s):(n=r,r=e)):(n=r,r=e),r}function Et(){let r,s,l,u,f,E,T,A,D;if(r=n,t.substr(n,14)===b?(s=b,n+=14):(s=e,m===0&&S(y)),s!==e)if(l=P(),l!==e)if(u=v(),u!==e)if(t.charCodeAt(n)===40?(f=L,n++):(f=e,m===0&&S(H)),f!==e){if(E=[],T=P(),T!==e)for(;T!==e;)E.push(T),T=P();else E=e;E!==e?(t.charCodeAt(n)===41?(T=z,n++):(T=e,m===0&&S(M)),T!==e?(A=v(),A!==e?(t.charCodeAt(n)===41?(D=z,n++):(D=e,m===0&&S(M)),D!==e?(h=r,s=Ye(l,E),r=s):(n=r,r=e)):(n=r,r=e)):(n=r,r=e)):(n=r,r=e)}else n=r,r=e;else n=r,r=e;else n=r,r=e;else n=r,r=e;return r}function $t(){let r,s,l,u,f,E,T,A,D,se;if(r=n,t.substr(n,7)===Z?(s=Z,n+=7):(s=e,m===0&&S(ge)),s!==e)if(l=v(),l!==e)if(t.charCodeAt(n)===40?(u=L,n++):(u=e,m===0&&S(H)),u!==e)if(f=P(),f!==e)if(E=v(),E!==e){if(T=[],A=P(),A!==e)for(;A!==e;)T.push(A),A=P();else T=e;T!==e?(t.charCodeAt(n)===41?(A=z,n++):(A=e,m===0&&S(M)),A!==e?(D=N(),D!==e?(t.charCodeAt(n)===41?(se=z,n++):(se=e,m===0&&S(M)),se!==e?(h=r,s=Ze(f,T,D),r=s):(n=r,r=e)):(n=r,r=e)):(n=r,r=e)):(n=r,r=e)}else n=r,r=e;else n=r,r=e;else n=r,r=e;else n=r,r=e;else n=r,r=e;return r}function Rt(){let r,s,l,u,f;return r=n,t.substr(n,7)===Z?(s=Z,n+=7):(s=e,m===0&&S(ge)),s!==e?(l=P(),l!==e?(u=N(),u!==e?(t.charCodeAt(n)===41?(f=z,n++):(f=e,m===0&&S(M)),f!==e?(h=r,s=Ve(l,u),r=s):(n=r,r=e)):(n=r,r=e)):(n=r,r=e)):(n=r,r=e),r}function N(){let r,s,l;return r=n,s=v(),s!==e?(l=Bt(),l===e&&(l=Pt(),l===e&&(l=P(),l===e&&(l=wt()))),l!==e?(h=r,s=et(l),r=s):(n=r,r=e)):(n=r,r=e),r}function Bt(){let r,s,l,u,f;if(r=n,t.substr(n,5)===me?(s=me,n+=5):(s=e,m===0&&S(tt)),s!==e){if(l=[],u=Ue(),u!==e)for(;u!==e;)l.push(u),u=Ue();else l=e;l!==e?(u=v(),u!==e?(t.charCodeAt(n)===41?(f=z,n++):(f=e,m===0&&S(M)),f!==e?(h=r,s=rt(l),r=s):(n=r,r=e)):(n=r,r=e)):(n=r,r=e)}else n=r,r=e;return r}function Ue(){let r,s,l,u,f,E,T,A;return r=n,s=v(),s!==e?(t.charCodeAt(n)===91?(l=nt,n++):(l=e,m===0&&S(ot)),l!==e?(u=v(),u!==e?(f=N(),f!==e?(E=v(),E!==e?(T=N(),T!==e?(t.charCodeAt(n)===93?(A=st,n++):(A=e,m===0&&S(it)),A!==e?(h=r,s=lt(f,T),r=s):(n=r,r=e)):(n=r,r=e)):(n=r,r=e)):(n=r,r=e)):(n=r,r=e)):(n=r,r=e)):(n=r,r=e),r}function Pt(){let r,s,l,u,f;if(r=n,t.charCodeAt(n)===40?(s=L,n++):(s=e,m===0&&S(H)),s!==e)if(l=P(),l!==e){for(u=[],f=N();f!==e;)u.push(f),f=N();u!==e?(t.charCodeAt(n)===41?(f=z,n++):(f=e,m===0&&S(M)),f!==e?(h=r,s=at(l,u),r=s):(n=r,r=e)):(n=r,r=e)}else n=r,r=e;else n=r,r=e;return r}function P(){let r,s,l,u,f;if(r=n,s=v(),s!==e)if(l=n,m++,t.substr(n,6)===Se?(u=Se,n+=6):(u=e,m===0&&S(ct)),m--,u===e?l=void 0:(n=l,l=e),l!==e){if(u=[],ye.test(t.charAt(n))?(f=t.charAt(n),n++):(f=e,m===0&&S(be)),f!==e)for(;f!==e;)u.push(f),ye.test(t.charAt(n))?(f=t.charAt(n),n++):(f=e,m===0&&S(be));else u=e;u!==e?(h=r,s=pt(u),r=s):(n=r,r=e)}else n=r,r=e;else n=r,r=e;return r}function wt(){let r,s;return r=n,s=It(),s===e&&(s=Ht(),s===e&&(s=Ut(),s===e&&(s=zt()))),s!==e&&(h=r,s=ut(s)),r=s,r}function It(){let r,s,l,u;if(r=n,s=v(),s!==e){if(l=[],xe.test(t.charAt(n))?(u=t.charAt(n),n++):(u=e,m===0&&S(he)),u!==e)for(;u!==e;)l.push(u),xe.test(t.charAt(n))?(u=t.charAt(n),n++):(u=e,m===0&&S(he));else l=e;l!==e?(h=r,s=dt(),r=s):(n=r,r=e)}else n=r,r=e;return r}function Ht(){let r,s,l;return r=n,s=v(),s!==e?(t.substr(n,5)===Te?(l=Te,n+=5):(l=e,m===0&&S(ft)),l===e&&(t.substr(n,6)===Le?(l=Le,n+=6):(l=e,m===0&&S(gt)),l===e&&(t.substr(n,2)===ve?(l=ve,n+=2):(l=e,m===0&&S(mt)),l===e&&(t.substr(n,2)===Ae?(l=Ae,n+=2):(l=e,m===0&&S(St))))),l!==e?(h=r,s=yt(l),r=s):(n=r,r=e)):(n=r,r=e),r}function Ut(){let r,s,l;return r=n,s=v(),s!==e?(t.substr(n,3)===Ce?(l=Ce,n+=3):(l=e,m===0&&S(bt)),l!==e?(h=r,s=xt(),r=s):(n=r,r=e)):(n=r,r=e),r}function zt(){let r,s,l,u,f;if(r=n,s=v(),s!==e)if(t.charCodeAt(n)===34?(l=_e,n++):(l=e,m===0&&S(Ee)),l!==e){if(u=[],$e.test(t.charAt(n))?(f=t.charAt(n),n++):(f=e,m===0&&S(Re)),f!==e)for(;f!==e;)u.push(f),$e.test(t.charAt(n))?(f=t.charAt(n),n++):(f=e,m===0&&S(Re));else u=e;u!==e?(t.charCodeAt(n)===34?(f=_e,n++):(f=e,m===0&&S(Ee)),f!==e?(h=r,s=ht(u),r=s):(n=r,r=e)):(n=r,r=e)}else n=r,r=e;else n=r,r=e;return r}function v(){let r,s,l;for(m++,r=n,s=[],d.test(t.charAt(n))?(l=t.charAt(n),n++):(l=e,m===0&&S(g));l!==e;)s.push(l),d.test(t.charAt(n))?(l=t.charAt(n),n++):(l=e,m===0&&S(g));return s!==e&&(h=r,s=Lt()),r=s,m--,r===e&&(s=e,m===0&&S(Tt)),r}if(ee=c(),ee!==e&&n===t.length)return ee;throw ee!==e&&n<t.length&&S(At()),we(oe,B<t.length?t.charAt(B):null,B<t.length?J(B,B+1):J(B,B))}var pe=Zt;function qe(t){return t.type==="Redex"}function ue(t){return t.type==="Hole"}function je(t){return t.type==="AppContext"}function de(t){return t.type==="Split"}function Oe(t){return t.type==="Prim"}function ke(t,o){let e=t[0];console.log("expression",e);let i={type:"Stepper",root:o,originExpr:e,stepperTree:[]},a=Fe(e,i,0);console.log("stepper",a),o.innerHTML=rr(a);let c=o.querySelector("#prevButton"),p=o.querySelector("#nextButton");c.addEventListener("click",pr),p.addEventListener("click",ur)}function Fe(t,o,e){if(_(t))return o;{let i=er(t,e),a=_(i)?i:i.plugResult.expr,c={type:"Stepper",root:o.root,originExpr:o.originExpr,stepperTree:[...o.stepperTree,i]};console.log("newExpr",a);let p=Fe(a,c,e+1);return console.log(p),p}}function er(t,o){let e=fe(t);if(de(e)){let i=tr(e.redex),a=Ke(i,e.context);return{type:"StepResult",splitResult:e,plugResult:a,currentStep:o}}else return t}function fe(t){if(U(t)){let o=t.name,e=t.args,i=0,a=[],c=[];for(let p=0;p<e.length;p++){let d=e[p];if(_(d))a.push(d);else{i=p;break}}for(let p=i+1;p<e.length;p++){let d=e[p];if(ze(d))c.push(d);else return new Error("split: argument is not an expression")}if(i==0){console.log("hole found: recursion end");let p={type:"Redex",name:o,args:a},d={type:"Hole"};return{type:"Split",redex:p,context:d}}else{let p=e[i],d=[],g={type:"Split",redex:{type:"Redex",name:p.name,args:p.args},context:{type:"AppContext",op:o,values:a,ctx:fe(e[i]).context,args:c}};return d.push(g,fe(e[i])),{type:"Split",redex:d[d.length-1].redex,context:d[0].context}}}else return q(t)||j(t)?(console.log("error: expr is either Cond, Name, or undefined"),Error("error: expr is either Cond, Name, or undefined")):Error("error: something unexpected occured")}function tr(t){if(qe(t))if(t.name.symbol==="+"){let o=0;return t.args.forEach(e=>{if(_(e))o+=e.value;else return Error("error: argument is not a literal: "+e)}),{type:"Literal Value",value:o}}else return Error("error: Operation is not +");else return Error("error: redex is not a call")}function Ke(t,o){if(ue(o))return{type:"PlugResult",expr:t,rule:{type:"Prim"}};if(ue(o.ctx)){let e=[o.values,t,o.args].flat();return{type:"PlugResult",expr:{type:"Function Call",name:o.op,args:e},rule:{type:"Kong",redexRule:{type:"Prim"}}}}else{let e={type:"Function Call",name:o.op,args:[o.values,Ke(t,o.ctx).expr,o.args].flat()};return console.log("finalExpr",e),{type:"PlugResult",expr:e,rule:{type:"Kong",redexRule:{type:"Prim"}}}}}function rr(t){let o=t.stepperTree,e=t.originExpr;return`<stepper>
        <div class="program-wrapper">
            Original Expression:
            <pre><code>${K(e)}</code></pre>
        </div>
        <div class="step-result-wrapper">
        ${o.map(a=>nr(o,a)).join("")}
        </div>
        <div class="buttons">
            <button class="step-button" id="prevButton" style="visibility: hidden">Previous Step</button>
            <button class="step-button" id="nextButton">Next Step</button>
        </div>
    </stepper>`}function nr(t,o){let e=o.currentStep,i=t.slice(0,e).map(d=>d.plugResult.expr),a=o.splitResult,c=o.plugResult;return`<div class="step-result" currentStep="${e}" visible=${e==0?"true":"false"}>
                    <div class="program-overview">
                        Program Overview:
                        <ul>
                        ${i.map(d=>K(d)).join(`
`)}
                        </ul>
                    </div>
                    <div class="split-rule-plug">
                        <div class="split">
                            Split:
                            ${or(a)}
                        </div>
                        ${sr(c)}
                    </div>
                </div>`}function K(t){if(U(t)){let o=t.name.symbol,e=t.args.map(a=>K(a)).join(" ");return`(${o} ${e})`}else return _(t)?`${t.value}`:(console.error("error: expr is neither Call nor Literal"),"Neither Call nor Literal")}function or(t){if(de(t)){let o=t.redex,e=t.context,i=ir(o);return`
        <div class="context">
            Context: ${je(e)?lr(e):ar(e)}
        </div>
        <div class="redex">
            Redex: ${i}
        </div>`}else return`${t}`}function sr(t){let o=t.expr,e=t.rule;return`
    <div class="rule">
        ${Oe(e)?Je(e):cr(e)}
    </div>
    <div class="plug">
        Plug Result: <pre><code>${K(o)}</code></pre>
    </div>`}function ir(t){let o=t.name.symbol,e=t.args.map(a=>K(a)).join(" ");return`<pre><code>(${o} ${e})</code></pre>`}function lr(t){let o=t.op?t.op:"",e=t.args.map(a=>K(a)).join(" ");return`<pre><code>(${o} ${e})</code></pre>`}function ar(t){return'<span class="hole">[    ]</span>'}function Je(t){let e=`${t.type}`;return console.log(e),e}function cr(t){let o=t.type,e=t.redexRule;return`${o} with ${e.type}:
                 ${Je(e)} `}function pr(t){var p,d,g;let o=t.target,e=(d=(p=o.parentElement)==null?void 0:p.parentElement)==null?void 0:d.getElementsByClassName("step-result-wrapper")[0],i=e==null?void 0:e.querySelector(".step-result[visible=true]"),a=i==null?void 0:i.previousElementSibling;i==null||i.setAttribute("visible","false"),a==null||a.setAttribute("visible","true");let c=(g=o.parentElement)==null?void 0:g.querySelector("#nextButton");c.style.visibility=="hidden"&&c.setAttribute("style","visibility: visible"),(a==null?void 0:a.getAttribute("currentStep"))=="0"&&o.setAttribute("style","visibility: hidden")}function ur(t){var d,g,x;let o=t.target,e=(g=(d=o.parentElement)==null?void 0:d.parentElement)==null?void 0:g.getElementsByClassName("step-result-wrapper")[0],i=e==null?void 0:e.querySelector(".step-result[visible=true]"),a=i==null?void 0:i.nextElementSibling,c=e==null?void 0:e.getElementsByClassName("step-result").length;i==null||i.setAttribute("visible","false"),a==null||a.setAttribute("visible","true");let p=(x=o.parentElement)==null?void 0:x.querySelector("#prevButton");p.style.visibility=="hidden"&&p.setAttribute("style","visibility: visible"),(a==null?void 0:a.getAttribute("currentStep"))==(c-1).toString()&&o.setAttribute("style","visibility: hidden")}var Ge=`.tree {
  --branch-color: #666;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: .5em 0;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin: 0 .2em .5em;
    padding: .2em .5em;
    position: relative;
}

/* ########### custom AST node  styles ######## */
.tree {
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
}
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background); /* racket azure */
}
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: small;
  text-align: left;
  margin-bottom: 0.5em;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    height: .5em;
    left: 50%;
    position: absolute;
    top: calc(-.5em - 2px);
}
/* horizontal part + part pointing to corresp. hole
   -> width etc will be set via JavaScript
      Javascript cannot style ::before elements directly
      (since they are not part of the DOM),
      the variables will be set on the parent li element */
.tree li::before {
  box-sizing: border-box;
  content: "";
  position: absolute;
  height: .5em; /* overridden for some */
  top: -.5em;
  left: var(--connector-left, auto);
  right: var(--connector-right, auto);
  width: var(--connector-width, 100%);

  border: solid 2px var(--branch-color);
  border-top-style: none;
  border-left-style: var(--connector-border-left-style, none);
  border-right-style: var(--connector-border-right-style, none);
}

/* prevent up to 3 connectors from crossing */
.tree li.child-1::before {
  height: .3em;
}
.tree li.child-1 > span::before {
  top: calc(-.7em - 2px);
  height: 0.7em;
}

.tree li.child-3::before {
  height: .7em;
}
.tree li.child-3 > span::before {
  top: calc(-.3em - 2px);
  height: 0.3em;
}

/* ####### highlight way back up from a node ###### */
.tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
}

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree span:hover {
  cursor: pointer;
}

/* smooth transition between hiding and showing */
@keyframes hide-delayed {
  99% {
    visibility: visible;
  }
  100% {
    visibility: hidden;
  }
}
.tree span[data-collapsed] ~ ul {
  opacity: 0%;
  visibility: hidden;
  animation: hide-delayed 1s;
  transition: opacity 0.5s ease-out 0.5s;
}
.tree ul {
  opacity: 100%;
  transition: opacity 1s ease-out;
}

/* ######### holes ########## */
.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}
/* show/hide parts/holes  and float them into place */
.tree .code, .tree .placeholder {
  display: inline-block;
}
.tree .code {
  color: transparent;
  transform: translate(var(--translate-x,0), var(--translate-y,0));
  transition: transform 1s ease-out, color 1s steps(1,end);
}
.tree span[data-collapsed] .code {
  color: var(--text-grey);
  transform: translate(0,0);
  transition: transform 1s ease-out, color 1s steps(1,start);
}
.tree .placeholder {
  color: var(--text-grey);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  text-align: center;
}
.tree span[data-collapsed] .placeholder {
  display: none;
}

.tree .hole-name {
  min-width: 2em;
}
.tree .hole-names {
  min-width: 2.5em;
}
`;var We=`/* modifications for tree quiz */
bsltree[quiz="true"] .tree {
  --border-pending: orange;
  --tooltip-bg: var(--hole-yellow);
  --tooltip-border: var(--branch-color);
  --wrong-border: darkred;
  --correct-border: darkgreen;
  --selection-tentative: yellow;
  --selection-border: var(--branch-color);
  --selection-correct: green;
  --selection-wrong: red;
}
bsltree[quiz="true"] .tree {
  margin-top: 4em;
}
bsltree[quiz="true"] .tree span {
  cursor: auto;
  border: 1px solid var(--correct-border);
}
bsltree[quiz="true"] .tree span[data-collapsed="true"] {
  border: 1px solid var(--border-pending);
}
bsltree[quiz="true"] .tree span[data-wrong="true"] {
  border: 1px solid var(--wrong-border);
}

/* style production and select */
bsltree[quiz="true"] .tree .name {
  font-size: inherit;
}

bsltree[quiz="true"] .tree .name {
  position: relative;
  display: block;
  text-align: left;
}

bsltree[quiz="true"] .tree .name > select {
  position: absolute;
  display: inline-block;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
}

/* hide name tooltip by default */
bsltree[quiz="true"] .tree .tip {
  display: none;
}

/* display tooltip over root */
bsltree[quiz="true"] .tree > li > span[data-quiz="production"] .name > .tip,
bsltree[quiz="true"] .tree > li > span[data-quiz="holes"] .codeblock > .tip {
  display: block;
  position: absolute;
  left: 80%;
  bottom: 150%;
  width: 18em;
  background-color: var(--tooltip-bg);
  border: 1px solid var(--tooltip-border);
  padding: .5em;
}
bsltree[quiz="true"] .tree > li > span[data-quiz="production"] .name > .tip::after,
bsltree[quiz="true"] .tree > li > span[data-quiz="holes"] .codeblock > .tip::after {
  content: "";
  position: absolute;
  width: 1em;
  height: 1em;
  left: 0.5em;
  bottom: calc(-0.5em - 1px);
  transform: rotate(45deg);
  background-color: var(--tooltip-bg);
  border-right: 1px solid var(--tooltip-border);
  border-bottom: 1px solid var(--tooltip-border);
}

/* showing/hiding code without holes */
bsltree[quiz="true"] .tree .codeblock {
  position: relative;
  display: block;
}
bsltree[quiz="true"] .tree .actualcode {
  display: none;
}
bsltree[quiz="true"] .tree span[data-quiz="production"] .actualcode,
bsltree[quiz="true"] .tree span[data-quiz="holes"] .actualcode {
  position: absolute;
  display: block;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  background-color: var(--node-background);
}
bsltree[quiz="true"] .tree .char {
  display: inline;
  margin: 0;
  border: none;
  padding: 0;
  border-radius: 0;
  background-color: transparent;
  transition: background-color 1s ease-out;
}
bsltree[quiz="true"] .tree .char::before {
  display: none;
}
bsltree[quiz="true"] .tree .selection-start {
  background-color: var(--selection-tentative);
  border: 1px solid var(--selection-border);
  border-right: none;
}
bsltree[quiz="true"] .tree .selection-start ~ span {
  background-color: var(--selection-tentative);
  border-top: 1px solid var(--selection-border);
  border-bottom: 1px solid var(--selection-border);
}

bsltree[quiz="true"] .tree .selection-end {
  border: 1px solid var(--selection-border);
  border-left: none;
}
bsltree[quiz="true"] .tree .selection-end ~ span {
  border: none;
  background-color: transparent;
}

bsltree[quiz="true"] .tree .correct-selection-start,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .correct-selection-end {
  user-select: none;
  background-color: var(--selection-correct);
  border: 1px solid var(--selection-border);
}
bsltree[quiz="true"] .tree .wrong-selection-start,
bsltree[quiz="true"] .tree .wrong-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-end {
  user-select: none;
  background-color: var(--selection-wrong);
  border: 1px solid var(--selection-border);
}

bsltree[quiz="true"] .tree .correct-selection-start,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-start,
bsltree[quiz="true"] .tree .wrong-selection-middle, {
  border-right: none;
}

bsltree[quiz="true"] .tree .correct-selection-end,
bsltree[quiz="true"] .tree .correct-selection-middle,
bsltree[quiz="true"] .tree .wrong-selection-end,
bsltree[quiz="true"] .tree .wrong-selection-middle, {
  border-left: none;
}
`;var Qe=`/* css for errors */
.error-wrapper{
    display:flex;
    flex-direction:column;
    margin:2vw;
    font-size:inherit;
}

.error{
    font-size:1.2em;
}
`;var Xe=`stepper{
    display:flex;
    flex-direction:column;
    align-items:center;
    font-size: 1.2em;
}
/* .eval-step{
    display: flex;
    flex-direction: row;
    flex-wrap: nowrap;
    align-items: left;
    max-width: 1200px;
    margin: 2vh auto;
} */
.program-wrapper{
margin:2vw;
padding: 1vh 2vw; 
font-size: 1.1em;
font-weight: 600;
border: 1px solid #000;
}
.program-overview{
    display: flex;
    flex-direction: column;
    margin: 1vh auto;
}

.step-result{
}

[visible="false"]{
    display: none;
}

[visible="true"]{
    display: block;
}

.split-rule-plug{
    display: flex;
    flex-direction: row;
    max-width:1200px;
    margin: 2vh auto;
    padding: 1vw;
    border: 1px solid #000;
}
.split,.rule,.plug{
    padding: 0 1.3vw;
    margin:0 1.2vw;
}
pre{
    margin: 1vh 0 3vh 0;
    font-size: 1.1em;
}

.step-button{
    padding: 2vw;
    font-size:1.1em;
}`;var Y=document.createElement("style");Y.innerHTML=Ge;Y.innerHTML+=We;Y.innerHTML+=Qe;Y.innerHTML+=Xe;document.getElementsByTagName("head")[0].appendChild(Y);function yr(){Array.from(document.getElementsByTagName("bsltree")).map(t=>{try{let o=pe(t.innerHTML),e=t.getAttribute("quiz")==="true";Ne(o,t,e)}catch(o){xr(t,`${o.location.start.line}:${o.location.start.column} ${o}`)}})}function br(){Array.from(document.getElementsByTagName("stepper")).map(t=>{try{let o=pe(t.innerHTML);ke(o,t)}catch(o){}})}window.onload=()=>{yr(),br()};function xr(t,o){let e=t.innerHTML;t.innerHTML="";let i=document.createElement("div");i.classList.add("error-wrapper"),t.appendChild(i);let a=`<p> BSL-Tree could not be parsed! </p>
                  <p> Input: <b style="font-size:0.9em;">${e}</b> </p>`,c=document.createElement("div");c.classList.add("origin"),c.innerHTML=a,i.appendChild(c);let p=document.createElement("pre");p.classList.add("error");let d=document.createElement("code");d.textContent=o,i.appendChild(p),p.appendChild(d)}})();
//# sourceMappingURL=data:application/json;base64,
