(()=>{"use strict";var n={536:(n,e,t)=>{t.r(e),t.d(e,{default:()=>i});const i='.tree {\n  --branch-color: #666;\n}\n/*\nCSS for tree by Ross Angus\nhttps://www.cssscript.com/clean-tree-diagram/\n(Edited and extended)\n*/\n\n/* ###### node layout ######## */\n.tree,\n.tree ul,\n.tree li {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    position: relative;\n}\n\n.tree {\n    margin: 0 0 1em;\n    text-align: center;\n}\n\n.tree,\n.tree ul {\n    display: table;\n}\n\n.tree ul {\n    width: 100%;\n}\n\n.tree li {\n    display: table-cell;\n    padding: .5em 0;\n    vertical-align: top;\n}\n\n.tree code,\n.tree span {\n    border: solid .1em var(--branch-color);\n    border-radius: .2em;\n    display: inline-block;\n    margin: 0 .2em .5em;\n    padding: .2em .5em;\n    position: relative;\n}\n\n/* ########### custom AST node  styles ######## */\n.tree {\n  --node-background: #ebf0f4; /* racket azure */\n  --text-grey: #444; /* like in scribble */\n  --hole-yellow: #fdf68d; /* pale yellow */\n  --highlight-border-connectors: lime;\n}\n.tree span {\n  font-family: \'Fira-Mono\', monospace;\n  background-color: var(--node-background); /* racket azure */\n}\n.tree .name {\n  color: var(--text-grey);\n  font-style: italic;\n  font-size: small;\n  text-align: left;\n  margin-bottom: 0.5em;\n}\n\n/* ###### connectors ########### */\n/* part above box */\n.tree span:before {\n    outline: solid 1px var(--branch-color);\n    content: "";\n    height: .5em;\n    left: 50%;\n    position: absolute;\n    top: calc(-.5em - 2px);\n}\n/* horizontal part + part pointing to corresp. hole\n   -> width etc will be set via JavaScript\n      Javascript cannot style ::before elements directly\n      (since they are not part of the DOM),\n      the variables will be set on the parent li element */\n.tree li::before {\n  box-sizing: border-box;\n  content: "";\n  position: absolute;\n  height: .5em; /* overridden for some */\n  top: -.5em;\n  left: var(--connector-left, auto);\n  right: var(--connector-right, auto);\n  width: var(--connector-width, 100%);\n\n  border: solid 2px var(--branch-color);\n  border-top-style: none;\n  border-left-style: var(--connector-border-left-style, none);\n  border-right-style: var(--connector-border-right-style, none);\n}\n\n/* prevent up to 3 connectors from crossing */\n.tree li.child-1::before {\n  height: .3em;\n}\n.tree li.child-1 > span::before {\n  top: calc(-.7em - 2px);\n  height: 0.7em;\n}\n\n.tree li.child-3::before {\n  height: .7em;\n}\n.tree li.child-3 > span::before {\n  top: calc(-.3em - 2px);\n  height: 0.3em;\n}\n\n/* ####### highlight way back up from a node ###### */\n.tree li:hover > span {\n  border-color: var(--highlight-border-connectors);\n}\n.tree li:hover::before {\n  border-color: var(--highlight-border-connectors);\n  z-index: 1000;\n}\n.tree li:hover > span::before {\n  outline-color: var(--highlight-border-connectors);\n}\n\n/* ######## hide connectors over root ######## */\n.tree>li:before,\n.tree>li:after,\n.tree>li>code:before,\n.tree>li>span:before {\n    outline: none !important;\n    border: none !important;\n}\n.tree>li {\n    margin-top: 0;\n}\n\n/* ####### collapse nodes ######## */\n/* click on span to hide/show */\n.tree span:hover {\n  cursor: pointer;\n}\n\n/* smooth transition between hiding and showing */\n@keyframes hide-delayed {\n  99% {\n    visibility: visible;\n  }\n  100% {\n    visibility: hidden;\n  }\n}\n.tree span[data-collapsed] ~ ul {\n  opacity: 0%;\n  visibility: hidden;\n  animation: hide-delayed 1s;\n  transition: opacity 0.5s ease-out 0.5s;\n}\n.tree ul {\n  opacity: 100%;\n  transition: opacity 1s ease-out;\n}\n\n/* ######### holes ########## */\n.tree .hole {\n  display: inline-block;\n  background-color: var(--hole-yellow);\n  border: 1px solid var(--text-grey);\n  color: var(--text-grey);\n  padding-left: 0.25em;\n  padding-right: 0.25em;\n  position: relative;\n}\n/* show/hide parts/holes  and float them into place */\n.tree .code, .tree .placeholder {\n  display: inline-block;\n}\n.tree .code {\n  /* color: transparent; */\n  transform: translate(var(--translate-x,0), var(--translate-y,0));\n  transition: transform 1s ease-out;\n}\n.tree span[data-collapsed] .code {\n  color: var(--text-grey);\n  transform: translate(0,0);\n}\n.tree .placeholder {\n  color: var(--text-grey);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  text-align: center;\n}\n.tree span[data-collapsed] .placeholder {\n  display: none;\n}\n\n.tree .hole-name {\n  min-width: 2em;\n}\n.tree .hole-names {\n  min-width: 2.5em;\n}\n'},517:(n,e)=>{var t;function i(n){return n.type===t.FunctionDefinition}function o(n){return n.type===t.ConstantDefinition}function r(n){return n.type===t.StructDefinition}function l(n){return n.type===t.FunctionCall}function a(n){return n.type===t.CondExpression}function s(n){return n.type===t.Symbol}function c(n){return["boolean","string","number"].includes(typeof n)||"'()"==n}Object.defineProperty(e,"__esModule",{value:!0}),e.isV=e.isName=e.isCond=e.isCall=e.isExpr=e.isStructDef=e.isConstDef=e.isFunDef=e.isDefinition=e.Production=void 0,function(n){n.FunctionDefinition="Function Definition",n.ConstantDefinition="Constant Definition",n.StructDefinition="Struct Definition",n.FunctionCall="Function Call",n.CondExpression="Cond-Expression",n.Symbol="Symbol"}(t=e.Production||(e.Production={})),e.isDefinition=function(n){return i(n)||o(n)||r(n)},e.isFunDef=i,e.isConstDef=o,e.isStructDef=r,e.isExpr=function(n){return l(n)||a(n)||s(n)||c(n)},e.isCall=l,e.isCond=a,e.isName=s,e.isV=c},514:function(n,e,t){var i=this&&this.__createBinding||(Object.create?function(n,e,t,i){void 0===i&&(i=t);var o=Object.getOwnPropertyDescriptor(e,t);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(n,i,o)}:function(n,e,t,i){void 0===i&&(i=t),n[i]=e[t]}),o=this&&this.__setModuleDefault||(Object.create?function(n,e){Object.defineProperty(n,"default",{enumerable:!0,value:e})}:function(n,e){n.default=e}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var e={};if(null!=n)for(var t in n)"default"!==t&&Object.prototype.hasOwnProperty.call(n,t)&&i(e,n,t);return o(e,n),e};Object.defineProperty(e,"__esModule",{value:!0}),e.treeProgram=void 0;const l=r(t(517)),a=r(t(415));function s(n){return`<ul class="tree ast"><li>${l.isDefinition(n)?(e=n,l.isFunDef(e)?`\n      <span>\n        <div class="name">Function Definition</div>\n        <div>( define\n          (\n            <div class="hole hole-1 hole-name">\n              <div class="code">${a.pprint([e.name])}</div>\n              <div class="placeholder">name</div>\n            </div>\n            <div class="hole hole-2 hole-names">\n              ${e.args.map((n=>`<div class="code">${a.printName(n)}</div>`)).join(" ")}\n              <div class="placeholder">name+</div>\n            </div>\n          )\n          <div class="hole hole-3">\n            <div class="code">${a.pprint([e.body])}</div>\n            <div class="placeholder">e</div>\n          </div>\n        )</div>\n      </span>\n      <ul>\n        <li class="child-1">${d(e.name)}</li>\n        ${e.args.map((n=>`<li class="child-2">${d(n)}</li>`)).join("")}\n        <li class="child-3">${c(e.body)}</li>\n      </ul>`:l.isConstDef(e)?`\n      <span>\n        <div class="name">Constant Definition</div>\n        <div>( define\n          <div class="hole hole-1 hole-name">\n            <div class="code">${a.pprint([e.name])}</div>\n            <div class="placeholder">name</div>\n          </div>\n\n          <div class="hole hole-2">\n            <div class="code">${a.pprint([e.value])}</div>\n            <div class="placeholder">e</div>\n          </div>\n        )</div>\n      </span>\n      <ul>\n        <li class="child-1">${d(e.name)}</li>\n        <li class="child-2">${c(e.value)}</li>\n      </ul>`:l.isStructDef(e)?`\n      <span>\n        <div class="name">Struct Definition</div>\n\n        <div>(define-struct\n          <div class="hole hole-1 hole-name">\n            <div class="code">${a.pprint([e.binding])}</div>\n            <div class="placeholder">name</div>\n          </div>\n          (\n            <div class="hole hole-2 hole-names">\n              ${e.properties.map((n=>`<div class="code">${a.printName(n)}</div>`)).join(" ")}\n              <div class="placeholder">name*</div>\n            </div>\n          )\n        )</div>\n      </span>\n      <ul>\n        <li class="child-1">${d(e.binding)}</li>\n        ${e.properties.map((n=>`<li class="child-2">${d(n)}</li>`)).join("")}\n      </ul>`:void console.error("Invalid input to printDefinition")):c(n)}</li></ul>`;var e}function c(n){return l.isCall(n)?`\n      <span>\n        <div class="name">Function Call</div>\n\n        <div>(\n          <div class="hole hole-1 hole-name">\n            <div class="code">${a.pprint([n.name])}</div>\n            <div class="placeholder">name</div>\n          </div>\n\n          <div class="hole hole-2">\n            ${n.args.map((n=>`<div class="code">${a.printE(n)}</div>`)).join(" ")}\n            <div class="placeholder">e*</div>\n          </div>\n        )</div>\n      </span>\n      <ul>\n        <li class="child-1">${d(n.name)}</li>\n        ${n.args.map((n=>`<li class="child-2">${c(n)}</li>`)).join("")}\n      </ul>`:l.isCond(n)?`\n      <span>\n        <div class="name">Cond-Expression</div>\n        <div>( cond\n          <div class="hole hole-2">\n            ${n.options.map((n=>`<div class="code">${a.printOption(n)}</div>`)).join(" ")}\n            <div class="placeholder">[ e e ]+</div>\n          </div>\n         )</div>\n      </span>\n      <ul>\n        ${n.options.map((n=>`<li class="child-2">${function(n){return`\n    <span>\n      <div class="name">Cond-Option</div>\n      <div>[\n        <div class="hole hole-1">\n          <div class="code">${a.pprint([n.condition])}</div>\n          <div class="placeholder">e</div>\n        </div>\n\n        <div class="hole hole-2">\n          <div class="code">${a.pprint([n.result])}</div>\n          <div class="placeholder">e</div>\n        </div>\n       ]\n      </div>\n    </span>\n    <ul>\n      <li class="child-1">${c(n.condition)}</li>\n      <li class="child-2">${c(n.result)}</li>\n    </ul>\n  `}(n)}</li>`)).join(" ")}\n      </ul>`:l.isName(n)?d(n):l.isV(n)?`\n      <span>\n        <div class="name">Literal Value</div>\n        <div>${a.pprint([n])}</div>\n      </span>`:(console.error("Invalid input to treeE"),`<span>${n}</span>`)}function d(n){return`\n    <span>\n      <div class="name">Symbol</div>\n      <div>${n.symbol}</div>\n    </span>`}function p(n,e,t){Array.from(n.getElementsByClassName(e)).map((n=>{const e=n,i=.5*(e.getBoundingClientRect().x+e.getBoundingClientRect().right);if(0==i)return;const o=u([e],"../../+")[0];Array.from(o.children).filter((n=>n.classList.contains(t))).map((n=>{const e=n,t=.5*(e.getBoundingClientRect().x+e.getBoundingClientRect().right),o=i-t;let r="";r+=o<0?"\n          --connector-left: auto;\n          --connector-right: 50%;\n          --connector-border-left-style: solid;\n          --connector-border-right-style: none;":"\n          --connector-left: 50%;\n          --connector-right: auto;\n          --connector-border-left-style: none;\n          --connector-border-right-style: solid;",r+=`--connector-width: ${Math.abs(o)+1}px;`,e.style.cssText=r}))}))}function u(n,e){const t=e.split("/"),i=t.shift();if(""==i)return n;const o=t.join("/");if(".."==i){const t=n.map((n=>n.parentElement));return t.every((n=>n))?u(t,o):(console.error(`Error traversing ${e}: Missing parentElement`,n),[])}if("+"==i){const t=n.map((n=>n.nextElementSibling));return t.every((n=>n))?u(t,o):(console.error(`Error traversing ${e}: Missing nextElementSibling`,n),[])}if(i.startsWith(".")){const e=i.slice(1);return u(n.flatMap((n=>Array.from(n.children).filter((n=>n.classList.contains(e))))),o)}return u(n.flatMap((n=>Array.from(n.children).filter((n=>n.tagName==i.toUpperCase())))),o)}e.treeProgram=function(n,e){var t;e.innerHTML=n.map(s).join("\n"),p(t=e,"hole-1","child-1"),p(t,"hole-2","child-2"),p(t,"hole-3","child-3"),function(n){Array.from(n.getElementsByClassName("name")).map((n=>{const e=u([n],"+/.hole/.code");if(0==e.length)return;const t=u([n],"../+/li/span/.name/+");if(e.length==t.length)for(let n=0;n<e.length;n++){const i=e[n],o=t[n],r=i.getBoundingClientRect(),l=o.getBoundingClientRect();i.style.cssText=`\n        --translate-x: ${(l.x+l.right)/2-(r.x+r.right)/2}px;\n        --translate-y: ${l.y-r.y}px;\n      `}else console.error("Error: More or less children than code figments",n,e,t)}))}(e),function(n){Array.from(n.getElementsByTagName("span")).map((n=>{n.onclick=()=>{const e=n;if(e.getAttribute("data-collapsed"))e.removeAttribute("data-collapsed");else{e.setAttribute("data-collapsed","true");const n=e.nextElementSibling;if(!n)return;Array.from(n.getElementsByTagName("span")).map((n=>{n.setAttribute("data-collapsed","true")}))}}}))}(e)}},415:function(n,e,t){var i=this&&this.__createBinding||(Object.create?function(n,e,t,i){void 0===i&&(i=t);var o=Object.getOwnPropertyDescriptor(e,t);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(n,i,o)}:function(n,e,t,i){void 0===i&&(i=t),n[i]=e[t]}),o=this&&this.__setModuleDefault||(Object.create?function(n,e){Object.defineProperty(n,"default",{enumerable:!0,value:e})}:function(n,e){n.default=e}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var e={};if(null!=n)for(var t in n)"default"!==t&&Object.prototype.hasOwnProperty.call(n,t)&&i(e,n,t);return o(e,n),e};Object.defineProperty(e,"__esModule",{value:!0}),e.testprogram=e.printName=e.printOption=e.printE=e.printDefinition=e.printDefOrExpr=e.pprint=void 0;const l=r(t(517));function a(n){return l.isDefinition(n)?s(n):c(n)}function s(n){return l.isFunDef(n)?`(define ${p(n.name)} (${n.args.map(p).join(" ")}) ${c(n.body)})`:l.isConstDef(n)?`(define ${p(n.name)} ${c(n.value)})`:l.isStructDef(n)?`(define-struct ${p(n.binding)} (${n.properties.map(p).join(" ")}))`:void console.error("Invalid input to printDefinition")}function c(n){return l.isCall(n)?`(${p(n.name)} ${n.args.map(c).join(" ")})`:l.isCond(n)?`(cond ${n.options.map(d).join(" ")})`:l.isName(n)?p(n):l.isV(n)?"string"==typeof n&&"'()"!==n?`"${n}"`:"boolean"==typeof n?n?"#true":"#false":`${n}`:(console.error("Invalid input to printE"),`<${n}>`)}function d(n){return`[${c(n.condition)} ${c(n.result)}]`}function p(n){return n.symbol}e.pprint=function(n){return n.map(a).join("\n")},e.printDefOrExpr=a,e.printDefinition=s,e.printE=c,e.printOption=d,e.printName=p,e.testprogram=[{type:l.Production.FunctionDefinition,name:{type:l.Production.Symbol,symbol:"f"},args:[{type:l.Production.Symbol,symbol:"x"},{type:l.Production.Symbol,symbol:"y"}],body:{type:l.Production.FunctionCall,name:{type:l.Production.Symbol,symbol:"+"},args:[{type:l.Production.Symbol,symbol:"x"},{type:l.Production.Symbol,symbol:"y"}]}},{type:l.Production.CondExpression,options:[{condition:{type:l.Production.FunctionCall,name:{type:l.Production.Symbol,symbol:"="},args:[{type:l.Production.Symbol,symbol:"x"},3]},result:"isThree"},{condition:!1,result:"'()"}]},{type:l.Production.ConstantDefinition,name:{type:l.Production.Symbol,symbol:"x"},value:42},{type:l.Production.StructDefinition,binding:{type:l.Production.Symbol,symbol:"name"},properties:[{type:l.Production.Symbol,symbol:"firstName"},{type:l.Production.Symbol,symbol:"lastName"}]}]},670:function(n,e,t){var i=this&&this.__createBinding||(Object.create?function(n,e,t,i){void 0===i&&(i=t);var o=Object.getOwnPropertyDescriptor(e,t);o&&!("get"in o?!e.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return e[t]}}),Object.defineProperty(n,i,o)}:function(n,e,t,i){void 0===i&&(i=t),n[i]=e[t]}),o=this&&this.__setModuleDefault||(Object.create?function(n,e){Object.defineProperty(n,"default",{enumerable:!0,value:e})}:function(n,e){n.default=e}),r=this&&this.__importStar||function(n){if(n&&n.__esModule)return n;var e={};if(null!=n)for(var t in n)"default"!==t&&Object.prototype.hasOwnProperty.call(n,t)&&i(e,n,t);return o(e,n),e},l=this&&this.__importDefault||function(n){return n&&n.__esModule?n:{default:n}};Object.defineProperty(e,"__esModule",{value:!0});const a=r(t(517));window.BSL_AST=a;const s=r(t(415));window.Pprint=s;const c=r(t(514));window.Layout=c;const d=l(t(536)),p=document.createElement("style");p.innerHTML=d.default,document.getElementsByTagName("head")[0].appendChild(p)}},e={};function t(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={exports:{}};return n[i].call(r.exports,r,r.exports,t),r.exports}t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t(670)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,