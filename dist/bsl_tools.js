(()=>{function G(n){return z(n)||q(n)||V(n)}function z(n){return n.type==="Function Definition"}function q(n){return n.type==="Constant Definition"}function V(n){return n.type==="Struct Definition"}function K(n){return n.type==="Function Call"}function Q(n){return n.type==="Cond-Expression"}function X(n){return n.type==="Symbol"}function Y(n){return["boolean","string","number"].includes(typeof n)||n=="'()"}function H(n){return n.map(dt).join(`
`)}function dt(n){return G(n)?yt(n):C(n)}function yt(n){if(z(n))return`(define ${T(n.name)} (${n.args.map(T).join(" ")}) ${C(n.body)})`;if(q(n))return`(define ${T(n.name)} ${C(n.value)})`;if(V(n))return`(define-struct ${T(n.binding)} (${n.properties.map(T).join(" ")}))`;console.error("Invalid input to printDefinition")}function C(n){return K(n)?`(${T(n.name)} ${n.args.map(C).join(" ")})`:Q(n)?`(cond ${n.options.map(te).join(" ")})`:X(n)?T(n):Y(n)?typeof n=="string"&&n!=="'()"?`"${n}"`:typeof n=="boolean"?n?"#true":"#false":`${n}`:(console.error("Invalid input to printE"),`<${n}>`)}function te(n){return`[${C(n.condition)} ${C(n.result)}]`}function T(n){return n.symbol}var It=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},3]},result:"isThree"},{condition:!1,result:"'()"}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:42},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function Te(n,o,t=!1){let c=t?bt:ht;o.innerHTML=n.map(d=>mt(d,c)).join(`
`),$t(o),At(o),t||Et(o)}function mt(n,o){return`<ul class="tree ast"><li>${G(n)?xt(n,o):R(n,o)}</li></ul>`}function Ce(n){return typeof n.code=="string"&&(n.code=[n.code]),`
    <div class="${["hole",n.pos?`hole-${n.pos}`:"",n.placeholder==="name"?"hole-name":"",["name+","name*"].includes(n.placeholder)?"hole-names":""].join(" ")}">
      ${n.code.map(t=>`<div class="code">${t}</div>`).join(" ")}
      <div class="placeholder">${n.placeholder}</div>
    </div>
  `}function ht(n){return`
    <span>
      <div class="name">${n.production}</div>
      <div>
        ${n.code.map(o=>typeof o=="string"?o:Ce(o)).join(" ")}
      </div>
    </span>
  `}function bt(n){return`
    <span data-collapsed="true">
      <div class="name">${n.production}</div>
      <div>
        ${n.code.map(o=>typeof o=="string"?o:Ce(o)).join(" ")}
      </div>
    </span>
  `}function xt(n,o){if(z(n)){let t={production:"Function Definition",code:["( define ( ",{pos:1,code:H([n.name]),placeholder:"name"},{pos:2,code:n.args.map(T),placeholder:"name+"},") ",{pos:3,code:H([n.body]),placeholder:"e"},")"]};return`
      ${o(t)}
      <ul>
        <li class="child-1">${j(n.name,o)}</li>
        ${n.args.map(c=>`<li class="child-2">${j(c,o)}</li>`).join("")}
        <li class="child-3">${R(n.body,o)}</li>
      </ul>`}else if(q(n)){let t={production:"Constant Definition",code:["( define ",{pos:1,code:H([n.name]),placeholder:"name"},{pos:2,code:H([n.value]),placeholder:"e"},")"]};return`
      ${o(t)}
      <ul>
        <li class="child-1">${j(n.name,o)}</li>
        <li class="child-2">${R(n.value,o)}</li>
      </ul>`}else if(V(n)){let t={production:"Struct Definition",code:["( define-struct ",{pos:1,code:H([n.binding]),placeholder:"name"},"(",{pos:2,code:n.properties.map(T),placeholder:"name*"},") )"]};return`
      ${o(t)}
      <ul>
        <li class="child-1">${j(n.binding,o)}</li>
        ${n.properties.map(c=>`<li class="child-2">${j(c,o)}</li>`).join("")}
      </ul>`}else console.error("Invalid input to printDefinition")}function R(n,o){if(K(n)){let t={production:"Function Call",code:["( ",{pos:1,code:H([n.name]),placeholder:"name"}," ",{pos:2,code:n.args.map(C),placeholder:"e*"},")"]};return`
      ${o(t)}
      <ul>
        <li class="child-1">${j(n.name,o)}</li>
        ${n.args.map(c=>`<li class="child-2">${R(c,o)}</li>`).join("")}
      </ul>`}else if(Q(n)){let t={production:"Cond-Expression",code:["( cond ",{pos:2,code:n.options.map(te),placeholder:"[ e e ]+"},")"]};return`
      ${o(t)}
      <ul>
        ${n.options.map(c=>`<li class="child-2">${St(c,o)}</li>`).join(" ")}
      </ul>`}else{if(X(n))return j(n,o);if(Y(n)){let t={production:"Literal Value",code:[C(n)]};return o(t)}else{console.error("Invalid input to treeE");let t={production:"Invalid input to treeE",code:[`${n}`]};return o(t)}}}function St(n,o){let t={production:"Cond-Option",code:["[",{pos:1,code:C(n.condition),placeholder:"e"}," ",{pos:2,code:C(n.result),placeholder:"e"},"]"]};return`
    ${o(t)}
    <ul>
      <li class="child-1">${R(n.condition,o)}</li>
      <li class="child-2">${R(n.result,o)}</li>
    </ul>
  `}function j(n,o){let t={production:"Symbol",code:[T(n)]};return o(t)}function $t(n){ne(n,"hole-1","child-1"),ne(n,"hole-2","child-2"),ne(n,"hole-3","child-3")}function ne(n,o,t){Array.from(n.getElementsByClassName(o)).map(c=>{let d=c,g=.5*(d.getBoundingClientRect().x+d.getBoundingClientRect().right);if(g==0)return;let y=O([d],"../../+")[0];Array.from(y.children).filter(b=>b.classList.contains(t)).map(b=>{let S=b,D=.5*(S.getBoundingClientRect().x+S.getBoundingClientRect().right),m=g-D,p="";m<0?p+=`
          --connector-left: auto;
          --connector-right: 50%;
          --connector-border-left-style: solid;
          --connector-border-right-style: none;`:p+=`
          --connector-left: 50%;
          --connector-right: auto;
          --connector-border-left-style: none;
          --connector-border-right-style: solid;`,p+=`--connector-width: ${Math.abs(m)+1}px;`,S.style.cssText=p})})}function At(n){Array.from(n.getElementsByClassName("name")).map(o=>{let t=O([o],"+/.hole/.code");if(t.length==0)return;let c=O([o],"../+/li/span/.name/+");if(t.length!=c.length){console.error("Error: More or less children than code figments",o,t,c);return}for(let d=0;d<t.length;d++){let g=t[d],y=c[d],b=g.getBoundingClientRect(),S=y.getBoundingClientRect();g.style.cssText=`
        --translate-x: ${(S.x+S.right)/2-(b.x+b.right)/2}px;
        --translate-y: ${S.y-b.y}px;
      `}})}function O(n,o){let t=o.split("/"),c=t.shift();if(c=="")return n;let d=t.join("/");if(c==".."){let g=n.map(y=>y.parentElement);return g.every(y=>y)?O(g,d):(console.error(`Error traversing ${o}: Missing parentElement`,n),[])}else if(c=="+"){let g=n.map(y=>y.nextElementSibling);return g.every(y=>y)?O(g,d):(console.error(`Error traversing ${o}: Missing nextElementSibling`,n),[])}else if(c.startsWith(".")){let g=c.slice(1),y=n.flatMap(b=>Array.from(b.children).filter(S=>S.classList.contains(g)));return O(y,d)}else{let g=n.flatMap(y=>Array.from(y.children).filter(b=>b.tagName==c.toUpperCase()));return O(g,d)}}function Et(n){Array.from(n.getElementsByTagName("span")).map(o=>{o.onclick=()=>{let t=o;if(t.getAttribute("data-collapsed"))t.removeAttribute("data-collapsed");else{t.setAttribute("data-collapsed","true");let c=t.nextElementSibling;if(!c)return;Array.from(c.getElementsByTagName("span")).map(d=>{d.setAttribute("data-collapsed","true")})}}})}function re(n,o,t){return t=t||" ",n.length>o?n:(o-=n.length,t+=t.repeat(o),n+t.slice(0,o))}var P=class extends Error{constructor(t,c,d,g){super();this.message=t,this.expected=c,this.found=d,this.location=g,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,P.prototype):this.__proto__=P.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,P)}static buildMessage(t,c){function d(m){return m.charCodeAt(0).toString(16).toUpperCase()}function g(m){return m.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,p=>"\\x0"+d(p)).replace(/[\x10-\x1F\x7F-\x9F]/g,p=>"\\x"+d(p))}function y(m){return m.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,p=>"\\x0"+d(p)).replace(/[\x10-\x1F\x7F-\x9F]/g,p=>"\\x"+d(p))}function b(m){switch(m.type){case"literal":return'"'+g(m.text)+'"';case"class":let p=m.parts.map($=>Array.isArray($)?y($[0])+"-"+y($[1]):y($));return"["+(m.inverted?"^":"")+p+"]";case"any":return"any character";case"end":return"end of input";case"other":return m.description}}function S(m){let p=m.map(b),$,w;if(p.sort(),p.length>0){for($=1,w=1;$<p.length;$++)p[$-1]!==p[$]&&(p[w]=p[$],w++);p.length=w}switch(p.length){case 1:return p[0];case 2:return p[0]+" or "+p[1];default:return p.slice(0,-1).join(", ")+", or "+p[p.length-1]}}function D(m){return m?'"'+g(m)+'"':"end of input"}return"Expected "+S(t)+" but "+D(c)+" found."}format(t){let c="Error: "+this.message;if(this.location){let d=null,g;for(g=0;g<t.length;g++)if(t[g].source===this.location.source){d=t[g].text.split(/\r\n|\n|\r/g);break}let y=this.location.start,b=this.location.source+":"+y.line+":"+y.column;if(d){let S=this.location.end,D=re("",y.line.toString().length," "),m=d[y.line-1],p=y.line===S.line?S.column:m.length+1;c+=`
 --> `+b+`
`+D+` |
`+y.line+" | "+m+`
`+D+" | "+re("",y.column-1," ")+re("",p-y.column,"^")}else c+=`
 at `+b}return c}};function Tt(n,o){o=o!==void 0?o:{};let t={},c=o.grammarSource,d={Program:$e},g=$e,y=function(e){return e},b=/^[\t \n \r]/,S=W(["	"," ",`
`," ","\r"],!1,!1),D=function(e){return e},m="(define-struct",p=L("(define-struct",!1),$="(",w=L("(",!1),N=")",I=L(")",!1),Pe=function(e,i){return{type:"Struct Definition",binding:e,properties:i}},Z="(define",se=L("(define",!1),De=function(e,i,s){return{type:"Function Definition",name:e,args:i,body:s}},we=function(e,i){return{type:"Constant Definition",name:e,value:i}},Ne=function(e){return e},oe="(cond",Ie=L("(cond",!1),Fe=function(e){return{type:"Cond-Expression",options:e}},Me="[",He=L("[",!1),je="]",Oe=L("]",!1),Re=function(e,i){return{condition:e,result:i}},ke=function(e,i){return{type:"Function Call",name:e,args:i}},ae=/^[A-Za-z+-\/*=]/,le=W([["A","Z"],["a","z"],["+","/"],"*","="],!1,!1),ze=function(e){return{type:"Symbol",symbol:e.join("")}},qe=function(e){return e},ce=/^[0-9]/,pe=W([["0","9"]],!1,!1),Ve=function(){return parseInt(Ye(),10)},fe="#true",Ze=L("#true",!1),ue="#false",Je=L("#false",!1),Ue=function(e){return e==="#true"},de="'()",We=L("'()",!1),Ge=function(){return"'()"},ye='"',ge=L('"',!1),me=/^[A-Za-z]/,he=W([["A","Z"],["a","z"]],!1,!1),Ke=function(e){return e.join("")},Qe=be("whitespace"),Xe=function(){},r=0,h=0,J=[{line:1,column:1}],B=0,ee=[],f=0,U;if(o.startRule!==void 0){if(!(o.startRule in d))throw new Error(`Can't start parsing from rule "`+o.startRule+'".');g=d[o.startRule]}function Ye(){return n.substring(h,r)}function _t(){return k(h,r)}function Pt(e,i){throw i=i!==void 0?i:k(h,r),Se([be(e)],n.substring(h,r),i)}function Dt(e,i){throw i=i!==void 0?i:k(h,r),tt(e,i)}function L(e,i){return{type:"literal",text:e,ignoreCase:i}}function W(e,i,s){return{type:"class",parts:e,inverted:i,ignoreCase:s}}function wt(){return{type:"any"}}function et(){return{type:"end"}}function be(e){return{type:"other",description:e}}function xe(e){let i=J[e],s;if(i)return i;for(s=e-1;!J[s];)s--;for(i=J[s],i={line:i.line,column:i.column};s<e;)n.charCodeAt(s)===10?(i.line++,i.column=1):i.column++,s++;return J[e]=i,i}function k(e,i){let s=xe(e),a=xe(i);return{source:c,start:{offset:e,line:s.line,column:s.column},end:{offset:i,line:a.line,column:a.column}}}function u(e){r<B||(r>B&&(B=r,ee=[]),ee.push(e))}function tt(e,i){return new P(e,[],"",i)}function Se(e,i,s){return new P(P.buildMessage(e,i),e,i,s)}function $e(){let e,i,s;if(e=r,i=[],s=Ae(),s!==t)for(;s!==t;)i.push(s),s=Ae();else i=t;return i!==t&&(h=e,i=y(i)),e=i,e}function Ae(){let e,i,s,a;if(e=r,i=nt(),i===t&&(i=F()),i!==t){if(s=[],b.test(n.charAt(r))?(a=n.charAt(r),r++):(a=t,f===0&&u(S)),a!==t)for(;a!==t;)s.push(a),b.test(n.charAt(r))?(a=n.charAt(r),r++):(a=t,f===0&&u(S));else s=t;s!==t?(h=e,i=y(i),e=i):(r=e,e=t)}else r=e,e=t;return e}function nt(){let e,i,s;return e=r,i=A(),i!==t?(s=rt(),s===t&&(s=it(),s===t&&(s=st())),s!==t?(h=e,i=D(s),e=i):(r=e,e=t)):(r=e,e=t),e}function rt(){let e,i,s,a,l,E,x,v,M;if(e=r,n.substr(r,14)===m?(i=m,r+=14):(i=t,f===0&&u(p)),i!==t)if(s=_(),s!==t)if(a=A(),a!==t)if(n.charCodeAt(r)===40?(l=$,r++):(l=t,f===0&&u(w)),l!==t){if(E=[],x=_(),x!==t)for(;x!==t;)E.push(x),x=_();else E=t;E!==t?(n.charCodeAt(r)===41?(x=N,r++):(x=t,f===0&&u(I)),x!==t?(v=A(),v!==t?(n.charCodeAt(r)===41?(M=N,r++):(M=t,f===0&&u(I)),M!==t?(h=e,i=Pe(s,E),e=i):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)}else r=e,e=t;else r=e,e=t;else r=e,e=t;else r=e,e=t;return e}function it(){let e,i,s,a,l,E,x,v,M;if(e=r,n.substr(r,7)===Z?(i=Z,r+=7):(i=t,f===0&&u(se)),i!==t)if(s=_(),s!==t)if(a=A(),a!==t)if(n.charCodeAt(r)===40?(l=$,r++):(l=t,f===0&&u(w)),l!==t){if(E=[],x=_(),x!==t)for(;x!==t;)E.push(x),x=_();else E=t;E!==t?(n.charCodeAt(r)===41?(x=N,r++):(x=t,f===0&&u(I)),x!==t?(v=F(),v!==t?(n.charCodeAt(r)===41?(M=N,r++):(M=t,f===0&&u(I)),M!==t?(h=e,i=De(s,E,v),e=i):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)}else r=e,e=t;else r=e,e=t;else r=e,e=t;else r=e,e=t;return e}function st(){let e,i,s,a,l;return e=r,n.substr(r,7)===Z?(i=Z,r+=7):(i=t,f===0&&u(se)),i!==t?(s=_(),s!==t?(a=F(),a!==t?(n.charCodeAt(r)===41?(l=N,r++):(l=t,f===0&&u(I)),l!==t?(h=e,i=we(s,a),e=i):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t),e}function F(){let e,i,s;return e=r,i=A(),i!==t?(s=ot(),s===t&&(s=at(),s===t&&(s=_(),s===t&&(s=lt()))),s!==t?(h=e,i=Ne(s),e=i):(r=e,e=t)):(r=e,e=t),e}function ot(){let e,i,s,a,l;if(e=r,n.substr(r,5)===oe?(i=oe,r+=5):(i=t,f===0&&u(Ie)),i!==t){if(s=[],a=Ee(),a!==t)for(;a!==t;)s.push(a),a=Ee();else s=t;s!==t?(a=A(),a!==t?(n.charCodeAt(r)===41?(l=N,r++):(l=t,f===0&&u(I)),l!==t?(h=e,i=Fe(s),e=i):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)}else r=e,e=t;return e}function Ee(){let e,i,s,a,l,E,x,v;return e=r,i=A(),i!==t?(n.charCodeAt(r)===91?(s=Me,r++):(s=t,f===0&&u(He)),s!==t?(a=A(),a!==t?(l=F(),l!==t?(E=A(),E!==t?(x=F(),x!==t?(n.charCodeAt(r)===93?(v=je,r++):(v=t,f===0&&u(Oe)),v!==t?(h=e,i=Re(l,x),e=i):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t)):(r=e,e=t),e}function at(){let e,i,s,a,l;if(e=r,n.charCodeAt(r)===40?(i=$,r++):(i=t,f===0&&u(w)),i!==t)if(s=_(),s!==t){for(a=[],l=F();l!==t;)a.push(l),l=F();a!==t?(n.charCodeAt(r)===41?(l=N,r++):(l=t,f===0&&u(I)),l!==t?(h=e,i=ke(s,a),e=i):(r=e,e=t)):(r=e,e=t)}else r=e,e=t;else r=e,e=t;return e}function _(){let e,i,s,a;if(e=r,i=A(),i!==t){if(s=[],ae.test(n.charAt(r))?(a=n.charAt(r),r++):(a=t,f===0&&u(le)),a!==t)for(;a!==t;)s.push(a),ae.test(n.charAt(r))?(a=n.charAt(r),r++):(a=t,f===0&&u(le));else s=t;s!==t?(h=e,i=ze(s),e=i):(r=e,e=t)}else r=e,e=t;return e}function lt(){let e,i;return e=r,i=ct(),i===t&&(i=pt(),i===t&&(i=ft(),i===t&&(i=ut()))),i!==t&&(h=e,i=qe(i)),e=i,e}function ct(){let e,i,s,a;if(e=r,i=A(),i!==t){if(s=[],ce.test(n.charAt(r))?(a=n.charAt(r),r++):(a=t,f===0&&u(pe)),a!==t)for(;a!==t;)s.push(a),ce.test(n.charAt(r))?(a=n.charAt(r),r++):(a=t,f===0&&u(pe));else s=t;s!==t?(h=e,i=Ve(),e=i):(r=e,e=t)}else r=e,e=t;return e}function pt(){let e,i,s;return e=r,i=A(),i!==t?(n.substr(r,5)===fe?(s=fe,r+=5):(s=t,f===0&&u(Ze)),s===t&&(n.substr(r,6)===ue?(s=ue,r+=6):(s=t,f===0&&u(Je))),s!==t?(h=e,i=Ue(s),e=i):(r=e,e=t)):(r=e,e=t),e}function ft(){let e,i,s;return e=r,i=A(),i!==t?(n.substr(r,3)===de?(s=de,r+=3):(s=t,f===0&&u(We)),s!==t?(h=e,i=Ge(),e=i):(r=e,e=t)):(r=e,e=t),e}function ut(){let e,i,s,a,l;if(e=r,i=A(),i!==t)if(n.charCodeAt(r)===34?(s=ye,r++):(s=t,f===0&&u(ge)),s!==t){if(a=[],me.test(n.charAt(r))?(l=n.charAt(r),r++):(l=t,f===0&&u(he)),l!==t)for(;l!==t;)a.push(l),me.test(n.charAt(r))?(l=n.charAt(r),r++):(l=t,f===0&&u(he));else a=t;a!==t?(n.charCodeAt(r)===34?(l=ye,r++):(l=t,f===0&&u(ge)),l!==t?(h=e,i=Ke(a),e=i):(r=e,e=t)):(r=e,e=t)}else r=e,e=t;else r=e,e=t;return e}function A(){let e,i,s;for(f++,e=r,i=[],b.test(n.charAt(r))?(s=n.charAt(r),r++):(s=t,f===0&&u(S));s!==t;)i.push(s),b.test(n.charAt(r))?(s=n.charAt(r),r++):(s=t,f===0&&u(S));return i!==t&&(h=e,i=Xe()),e=i,f--,e===t&&(i=t,f===0&&u(Qe)),e}if(U=g(),U!==t&&r===n.length)return U;throw U!==t&&r<n.length&&u(et()),Se(ee,B<n.length?n.charAt(B):null,B<n.length?k(B,B+1):k(B,B))}var Be=Tt;var ve=`.tree {
  --branch-color: #666;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: .5em 0;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin: 0 .2em .5em;
    padding: .2em .5em;
    position: relative;
}

/* ########### custom AST node  styles ######## */
.tree {
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
}
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background); /* racket azure */
}
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: small;
  text-align: left;
  margin-bottom: 0.5em;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    height: .5em;
    left: 50%;
    position: absolute;
    top: calc(-.5em - 2px);
}
/* horizontal part + part pointing to corresp. hole
   -> width etc will be set via JavaScript
      Javascript cannot style ::before elements directly
      (since they are not part of the DOM),
      the variables will be set on the parent li element */
.tree li::before {
  box-sizing: border-box;
  content: "";
  position: absolute;
  height: .5em; /* overridden for some */
  top: -.5em;
  left: var(--connector-left, auto);
  right: var(--connector-right, auto);
  width: var(--connector-width, 100%);

  border: solid 2px var(--branch-color);
  border-top-style: none;
  border-left-style: var(--connector-border-left-style, none);
  border-right-style: var(--connector-border-right-style, none);
}

/* prevent up to 3 connectors from crossing */
.tree li.child-1::before {
  height: .3em;
}
.tree li.child-1 > span::before {
  top: calc(-.7em - 2px);
  height: 0.7em;
}

.tree li.child-3::before {
  height: .7em;
}
.tree li.child-3 > span::before {
  top: calc(-.3em - 2px);
  height: 0.3em;
}

/* ####### highlight way back up from a node ###### */
.tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
}

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree span:hover {
  cursor: pointer;
}

/* smooth transition between hiding and showing */
@keyframes hide-delayed {
  99% {
    visibility: visible;
  }
  100% {
    visibility: hidden;
  }
}
.tree span[data-collapsed] ~ ul {
  opacity: 0%;
  visibility: hidden;
  animation: hide-delayed 1s;
  transition: opacity 0.5s ease-out 0.5s;
}
.tree ul {
  opacity: 100%;
  transition: opacity 1s ease-out;
}

/* ######### holes ########## */
.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}
/* show/hide parts/holes  and float them into place */
.tree .code, .tree .placeholder {
  display: inline-block;
}
.tree .code {
  /* color: transparent; */
  transform: translate(var(--translate-x,0), var(--translate-y,0));
  transition: transform 1s ease-out;
}
.tree span[data-collapsed] .code {
  color: var(--text-grey);
  transform: translate(0,0);
}
.tree .placeholder {
  color: var(--text-grey);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  text-align: center;
}
.tree span[data-collapsed] .placeholder {
  display: none;
}

.tree .hole-name {
  min-width: 2em;
}
.tree .hole-names {
  min-width: 2.5em;
}
`;var _e=`/* modifications for tree quiz */
bsl-tree[quiz="true"] .tree .name {
  font-size: inherit;
}
`;var ie=document.createElement("style");ie.innerHTML=ve;ie.innerHTML+=_e;document.getElementsByTagName("head")[0].appendChild(ie);function vt(){Array.from(document.getElementsByTagName("bsl-tree")).map(n=>{try{let o=Be(n.innerHTML),t=!!n.getAttribute("quiz");Te(o,n,t)}catch(o){n.innerHTML+=`<br>${o}`}})}window.onload=()=>{vt()};})();
//# sourceMappingURL=data:application/json;base64,
