(()=>{function G(t){return z(t)||V(t)||Z(t)}function z(t){return t.type==="Function Definition"}function V(t){return t.type==="Constant Definition"}function Z(t){return t.type==="Struct Definition"}function K(t){return t.type==="Function Call"}function Q(t){return t.type==="Cond-Expression"}function X(t){return t.type==="Symbol"}function Y(t){return["boolean","string","number"].includes(typeof t)||t=="'()"}function B(t){return t.map(dn).join(`
`)}function dn(t){return G(t)?un(t):w(t)}function un(t){if(z(t))return`(define ${T(t.name)} (${t.args.map(T).join(" ")}) ${w(t.body)})`;if(V(t))return`(define ${T(t.name)} ${w(t.value)})`;if(Z(t))return`(define-struct ${T(t.binding)} (${t.properties.map(T).join(" ")}))`;console.error("Invalid input to printDefinition")}function w(t){return K(t)?`(${T(t.name)} ${t.args.map(w).join(" ")})`:Q(t)?`(cond ${t.options.map(ne).join(" ")})`:X(t)?T(t):Y(t)?typeof t=="string"&&t!=="'()"?`"${t}"`:typeof t=="boolean"?t?"#true":"#false":`${t}`:(console.error("Invalid input to printE"),`<${t}>`)}function ne(t){return`[${w(t.condition)} ${w(t.result)}]`}function T(t){return t.symbol}var Pn=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},3]},result:"isThree"},{condition:!1,result:"'()"}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:42},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function Ee(t,o){o.innerHTML=t.map(gn).join(`
`),bn(o),vn(o),xn(o)}function gn(t){return`<ul class="tree ast"><li>${G(t)?mn(t):R(t)}</li></ul>`}function mn(t){if(z(t))return`
      <span>
        <div class="name">Function Definition</div>
        <div>( define
          (
            <div class="hole hole-1 hole-name">
              <div class="code">${B([t.name])}</div>
              <div class="placeholder">name</div>
            </div>
            <div class="hole hole-2 hole-names">
              ${t.args.map(o=>`<div class="code">${T(o)}</div>`).join(" ")}
              <div class="placeholder">name+</div>
            </div>
          )
          <div class="hole hole-3">
            <div class="code">${B([t.body])}</div>
            <div class="placeholder">e</div>
          </div>
        )</div>
      </span>
      <ul>
        <li class="child-1">${H(t.name)}</li>
        ${t.args.map(o=>`<li class="child-2">${H(o)}</li>`).join("")}
        <li class="child-3">${R(t.body)}</li>
      </ul>`;if(V(t))return`
      <span>
        <div class="name">Constant Definition</div>
        <div>( define
          <div class="hole hole-1 hole-name">
            <div class="code">${B([t.name])}</div>
            <div class="placeholder">name</div>
          </div>

          <div class="hole hole-2">
            <div class="code">${B([t.value])}</div>
            <div class="placeholder">e</div>
          </div>
        )</div>
      </span>
      <ul>
        <li class="child-1">${H(t.name)}</li>
        <li class="child-2">${R(t.value)}</li>
      </ul>`;if(Z(t))return`
      <span>
        <div class="name">Struct Definition</div>

        <div>(define-struct
          <div class="hole hole-1 hole-name">
            <div class="code">${B([t.binding])}</div>
            <div class="placeholder">name</div>
          </div>
          (
            <div class="hole hole-2 hole-names">
              ${t.properties.map(o=>`<div class="code">${T(o)}</div>`).join(" ")}
              <div class="placeholder">name*</div>
            </div>
          )
        )</div>
      </span>
      <ul>
        <li class="child-1">${H(t.binding)}</li>
        ${t.properties.map(o=>`<li class="child-2">${H(o)}</li>`).join("")}
      </ul>`;console.error("Invalid input to printDefinition")}function R(t){return K(t)?`
      <span>
        <div class="name">Function Call</div>

        <div>(
          <div class="hole hole-1 hole-name">
            <div class="code">${B([t.name])}</div>
            <div class="placeholder">name</div>
          </div>

          <div class="hole hole-2">
            ${t.args.map(o=>`<div class="code">${w(o)}</div>`).join(" ")}
            <div class="placeholder">e*</div>
          </div>
        )</div>
      </span>
      <ul>
        <li class="child-1">${H(t.name)}</li>
        ${t.args.map(o=>`<li class="child-2">${R(o)}</li>`).join("")}
      </ul>`:Q(t)?`
      <span>
        <div class="name">Cond-Expression</div>
        <div>( cond
          <div class="hole hole-2">
            ${t.options.map(o=>`<div class="code">${ne(o)}</div>`).join(" ")}
            <div class="placeholder">[ e e ]+</div>
          </div>
         )</div>
      </span>
      <ul>
        ${t.options.map(o=>`<li class="child-2">${hn(o)}</li>`).join(" ")}
      </ul>`:X(t)?H(t):Y(t)?`
      <span>
        <div class="name">Literal Value</div>
        <div>${B([t])}</div>
      </span>`:(console.error("Invalid input to treeE"),`<span>${t}</span>`)}function hn(t){return`
    <span>
      <div class="name">Cond-Option</div>
      <div>[
        <div class="hole hole-1">
          <div class="code">${B([t.condition])}</div>
          <div class="placeholder">e</div>
        </div>

        <div class="hole hole-2">
          <div class="code">${B([t.result])}</div>
          <div class="placeholder">e</div>
        </div>
       ]
      </div>
    </span>
    <ul>
      <li class="child-1">${R(t.condition)}</li>
      <li class="child-2">${R(t.result)}</li>
    </ul>
  `}function H(t){return`
    <span>
      <div class="name">Symbol</div>
      <div>${t.symbol}</div>
    </span>`}function bn(t){te(t,"hole-1","child-1"),te(t,"hole-2","child-2"),te(t,"hole-3","child-3")}function te(t,o,n){Array.from(t.getElementsByClassName(o)).map(g=>{let u=g,y=.5*(u.getBoundingClientRect().x+u.getBoundingClientRect().right);if(y==0)return;let d=O([u],"../../+")[0];Array.from(d.children).filter(b=>b.classList.contains(n)).map(b=>{let x=b,D=.5*(x.getBoundingClientRect().x+x.getBoundingClientRect().right),m=y-D,c="";m<0?c+=`
          --connector-left: auto;
          --connector-right: 50%;
          --connector-border-left-style: solid;
          --connector-border-right-style: none;`:c+=`
          --connector-left: 50%;
          --connector-right: auto;
          --connector-border-left-style: none;
          --connector-border-right-style: solid;`,c+=`--connector-width: ${Math.abs(m)+1}px;`,x.style.cssText=c})})}function vn(t){Array.from(t.getElementsByClassName("name")).map(o=>{let n=O([o],"+/.hole/.code");if(n.length==0)return;let g=O([o],"../+/li/span/.name/+");if(n.length!=g.length){console.error("Error: More or less children than code figments",o,n,g);return}for(let u=0;u<n.length;u++){let y=n[u],d=g[u],b=y.getBoundingClientRect(),x=d.getBoundingClientRect();y.style.cssText=`
        --translate-x: ${(x.x+x.right)/2-(b.x+b.right)/2}px;
        --translate-y: ${x.y-b.y}px;
      `}})}function O(t,o){let n=o.split("/"),g=n.shift();if(g=="")return t;let u=n.join("/");if(g==".."){let y=t.map(d=>d.parentElement);return y.every(d=>d)?O(y,u):(console.error(`Error traversing ${o}: Missing parentElement`,t),[])}else if(g=="+"){let y=t.map(d=>d.nextElementSibling);return y.every(d=>d)?O(y,u):(console.error(`Error traversing ${o}: Missing nextElementSibling`,t),[])}else if(g.startsWith(".")){let y=g.slice(1),d=t.flatMap(b=>Array.from(b.children).filter(x=>x.classList.contains(y)));return O(d,u)}else{let y=t.flatMap(d=>Array.from(d.children).filter(b=>b.tagName==g.toUpperCase()));return O(y,u)}}function xn(t){Array.from(t.getElementsByTagName("span")).map(o=>{o.onclick=()=>{let n=o;if(n.getAttribute("data-collapsed"))n.removeAttribute("data-collapsed");else{n.setAttribute("data-collapsed","true");let g=n.nextElementSibling;if(!g)return;Array.from(g.getElementsByTagName("span")).map(u=>{u.setAttribute("data-collapsed","true")})}}})}function ie(t,o,n){return n=n||" ",t.length>o?t:(o-=t.length,n+=n.repeat(o),t+n.slice(0,o))}var P=class extends Error{constructor(n,g,u,y){super();this.message=n,this.expected=g,this.found=u,this.location=y,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,P.prototype):this.__proto__=P.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,P)}static buildMessage(n,g){function u(m){return m.charCodeAt(0).toString(16).toUpperCase()}function y(m){return m.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,c=>"\\x0"+u(c)).replace(/[\x10-\x1F\x7F-\x9F]/g,c=>"\\x"+u(c))}function d(m){return m.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,c=>"\\x0"+u(c)).replace(/[\x10-\x1F\x7F-\x9F]/g,c=>"\\x"+u(c))}function b(m){switch(m.type){case"literal":return'"'+y(m.text)+'"';case"class":let c=m.parts.map(S=>Array.isArray(S)?d(S[0])+"-"+d(S[1]):d(S));return"["+(m.inverted?"^":"")+c+"]";case"any":return"any character";case"end":return"end of input";case"other":return m.description}}function x(m){let c=m.map(b),S,F;if(c.sort(),c.length>0){for(S=1,F=1;S<c.length;S++)c[S-1]!==c[S]&&(c[F]=c[S],F++);c.length=F}switch(c.length){case 1:return c[0];case 2:return c[0]+" or "+c[1];default:return c.slice(0,-1).join(", ")+", or "+c[c.length-1]}}function D(m){return m?'"'+y(m)+'"':"end of input"}return"Expected "+x(n)+" but "+D(g)+" found."}format(n){let g="Error: "+this.message;if(this.location){let u=null,y;for(y=0;y<n.length;y++)if(n[y].source===this.location.source){u=n[y].text.split(/\r\n|\n|\r/g);break}let d=this.location.start,b=this.location.source+":"+d.line+":"+d.column;if(u){let x=this.location.end,D=ie("",d.line.toString().length," "),m=u[d.line-1],c=d.line===x.line?x.column:m.length+1;g+=`
 --> `+b+`
`+D+` |
`+d.line+" | "+m+`
`+D+" | "+ie("",d.column-1," ")+ie("",c-d.column,"^")}else g+=`
 at `+b}return g}};function $n(t,o){o=o!==void 0?o:{};let n={},g=o.grammarSource,u={Program:xe},y=xe,d=function(e){return e},b=/^[\t \n \r]/,x=q(["	"," ",`
`," ","\r"],!1,!1),D=function(e){return e},m="(define-struct",c=E("(define-struct",!1),S="(",F=E("(",!1),I=")",M=E(")",!1),Be=function(e,s){return{type:"Struct Definition",binding:e,properties:s}},J="(define",se=E("(define",!1),_e=function(e,s,r){return{type:"Function Definition",name:e,args:s,body:r}},Pe=function(e,s){return{type:"Constant Definition",name:e,value:s}},De=function(e){return e},re="(cond",Fe=E("(cond",!1),we=function(e){return{type:"Cond-Expression",options:e}},Ie="[",Me=E("[",!1),Ne="]",je=E("]",!1),He=function(e,s){return{condition:e,result:s}},Oe=function(e,s){return{type:"Function Call",name:e,args:s}},ae=/^[A-Za-z+-\/*=]/,oe=q([["A","Z"],["a","z"],["+","/"],"*","="],!1,!1),Re=function(e){return{type:"Symbol",symbol:e.join("")}},ke=function(e){return e},le=/^[0-9]/,ce=q([["0","9"]],!1,!1),ze=function(){return parseInt(Qe(),10)},pe="#true",Ve=E("#true",!1),fe="#false",Ze=E("#false",!1),Je=function(e){return e==="#true"},de="'()",Ue=E("'()",!1),We=function(){return"'()"},ue='"',ye=E('"',!1),ge=/^[A-Za-z]/,me=q([["A","Z"],["a","z"]],!1,!1),qe=function(e){return e.join("")},Ge=he("whitespace"),Ke=function(){},i=0,h=0,U=[{line:1,column:1}],L=0,ee=[],p=0,W;if(o.startRule!==void 0){if(!(o.startRule in u))throw new Error(`Can't start parsing from rule "`+o.startRule+'".');y=u[o.startRule]}function Qe(){return t.substring(h,i)}function Ln(){return k(h,i)}function Cn(e,s){throw s=s!==void 0?s:k(h,i),ve([he(e)],t.substring(h,i),s)}function Tn(e,s){throw s=s!==void 0?s:k(h,i),Ye(e,s)}function E(e,s){return{type:"literal",text:e,ignoreCase:s}}function q(e,s,r){return{type:"class",parts:e,inverted:s,ignoreCase:r}}function Bn(){return{type:"any"}}function Xe(){return{type:"end"}}function he(e){return{type:"other",description:e}}function be(e){let s=U[e],r;if(s)return s;for(r=e-1;!U[r];)r--;for(s=U[r],s={line:s.line,column:s.column};r<e;)t.charCodeAt(r)===10?(s.line++,s.column=1):s.column++,r++;return U[e]=s,s}function k(e,s){let r=be(e),a=be(s);return{source:g,start:{offset:e,line:r.line,column:r.column},end:{offset:s,line:a.line,column:a.column}}}function f(e){i<L||(i>L&&(L=i,ee=[]),ee.push(e))}function Ye(e,s){return new P(e,[],"",s)}function ve(e,s,r){return new P(P.buildMessage(e,s),e,s,r)}function xe(){let e,s,r;if(e=i,s=[],r=Se(),r!==n)for(;r!==n;)s.push(r),r=Se();else s=n;return s!==n&&(h=e,s=d(s)),e=s,e}function Se(){let e,s,r,a;if(e=i,s=en(),s===n&&(s=N()),s!==n){if(r=[],b.test(t.charAt(i))?(a=t.charAt(i),i++):(a=n,p===0&&f(x)),a!==n)for(;a!==n;)r.push(a),b.test(t.charAt(i))?(a=t.charAt(i),i++):(a=n,p===0&&f(x));else r=n;r!==n?(h=e,s=d(s),e=s):(i=e,e=n)}else i=e,e=n;return e}function en(){let e,s,r;return e=i,s=$(),s!==n?(r=nn(),r===n&&(r=tn(),r===n&&(r=sn())),r!==n?(h=e,s=D(r),e=s):(i=e,e=n)):(i=e,e=n),e}function nn(){let e,s,r,a,l,A,v,C,j;if(e=i,t.substr(i,14)===m?(s=m,i+=14):(s=n,p===0&&f(c)),s!==n)if(r=_(),r!==n)if(a=$(),a!==n)if(t.charCodeAt(i)===40?(l=S,i++):(l=n,p===0&&f(F)),l!==n){if(A=[],v=_(),v!==n)for(;v!==n;)A.push(v),v=_();else A=n;A!==n?(t.charCodeAt(i)===41?(v=I,i++):(v=n,p===0&&f(M)),v!==n?(C=$(),C!==n?(t.charCodeAt(i)===41?(j=I,i++):(j=n,p===0&&f(M)),j!==n?(h=e,s=Be(r,A),e=s):(i=e,e=n)):(i=e,e=n)):(i=e,e=n)):(i=e,e=n)}else i=e,e=n;else i=e,e=n;else i=e,e=n;else i=e,e=n;return e}function tn(){let e,s,r,a,l,A,v,C,j;if(e=i,t.substr(i,7)===J?(s=J,i+=7):(s=n,p===0&&f(se)),s!==n)if(r=_(),r!==n)if(a=$(),a!==n)if(t.charCodeAt(i)===40?(l=S,i++):(l=n,p===0&&f(F)),l!==n){if(A=[],v=_(),v!==n)for(;v!==n;)A.push(v),v=_();else A=n;A!==n?(t.charCodeAt(i)===41?(v=I,i++):(v=n,p===0&&f(M)),v!==n?(C=N(),C!==n?(t.charCodeAt(i)===41?(j=I,i++):(j=n,p===0&&f(M)),j!==n?(h=e,s=_e(r,A,C),e=s):(i=e,e=n)):(i=e,e=n)):(i=e,e=n)):(i=e,e=n)}else i=e,e=n;else i=e,e=n;else i=e,e=n;else i=e,e=n;return e}function sn(){let e,s,r,a,l;return e=i,t.substr(i,7)===J?(s=J,i+=7):(s=n,p===0&&f(se)),s!==n?(r=_(),r!==n?(a=N(),a!==n?(t.charCodeAt(i)===41?(l=I,i++):(l=n,p===0&&f(M)),l!==n?(h=e,s=Pe(r,a),e=s):(i=e,e=n)):(i=e,e=n)):(i=e,e=n)):(i=e,e=n),e}function N(){let e,s,r;return e=i,s=$(),s!==n?(r=rn(),r===n&&(r=an(),r===n&&(r=_(),r===n&&(r=on()))),r!==n?(h=e,s=De(r),e=s):(i=e,e=n)):(i=e,e=n),e}function rn(){let e,s,r,a,l;if(e=i,t.substr(i,5)===re?(s=re,i+=5):(s=n,p===0&&f(Fe)),s!==n){if(r=[],a=$e(),a!==n)for(;a!==n;)r.push(a),a=$e();else r=n;r!==n?(a=$(),a!==n?(t.charCodeAt(i)===41?(l=I,i++):(l=n,p===0&&f(M)),l!==n?(h=e,s=we(r),e=s):(i=e,e=n)):(i=e,e=n)):(i=e,e=n)}else i=e,e=n;return e}function $e(){let e,s,r,a,l,A,v,C;return e=i,s=$(),s!==n?(t.charCodeAt(i)===91?(r=Ie,i++):(r=n,p===0&&f(Me)),r!==n?(a=$(),a!==n?(l=N(),l!==n?(A=$(),A!==n?(v=N(),v!==n?(t.charCodeAt(i)===93?(C=Ne,i++):(C=n,p===0&&f(je)),C!==n?(h=e,s=He(l,v),e=s):(i=e,e=n)):(i=e,e=n)):(i=e,e=n)):(i=e,e=n)):(i=e,e=n)):(i=e,e=n)):(i=e,e=n),e}function an(){let e,s,r,a,l;if(e=i,t.charCodeAt(i)===40?(s=S,i++):(s=n,p===0&&f(F)),s!==n)if(r=_(),r!==n){for(a=[],l=N();l!==n;)a.push(l),l=N();a!==n?(t.charCodeAt(i)===41?(l=I,i++):(l=n,p===0&&f(M)),l!==n?(h=e,s=Oe(r,a),e=s):(i=e,e=n)):(i=e,e=n)}else i=e,e=n;else i=e,e=n;return e}function _(){let e,s,r,a;if(e=i,s=$(),s!==n){if(r=[],ae.test(t.charAt(i))?(a=t.charAt(i),i++):(a=n,p===0&&f(oe)),a!==n)for(;a!==n;)r.push(a),ae.test(t.charAt(i))?(a=t.charAt(i),i++):(a=n,p===0&&f(oe));else r=n;r!==n?(h=e,s=Re(r),e=s):(i=e,e=n)}else i=e,e=n;return e}function on(){let e,s;return e=i,s=ln(),s===n&&(s=cn(),s===n&&(s=pn(),s===n&&(s=fn()))),s!==n&&(h=e,s=ke(s)),e=s,e}function ln(){let e,s,r,a;if(e=i,s=$(),s!==n){if(r=[],le.test(t.charAt(i))?(a=t.charAt(i),i++):(a=n,p===0&&f(ce)),a!==n)for(;a!==n;)r.push(a),le.test(t.charAt(i))?(a=t.charAt(i),i++):(a=n,p===0&&f(ce));else r=n;r!==n?(h=e,s=ze(),e=s):(i=e,e=n)}else i=e,e=n;return e}function cn(){let e,s,r;return e=i,s=$(),s!==n?(t.substr(i,5)===pe?(r=pe,i+=5):(r=n,p===0&&f(Ve)),r===n&&(t.substr(i,6)===fe?(r=fe,i+=6):(r=n,p===0&&f(Ze))),r!==n?(h=e,s=Je(r),e=s):(i=e,e=n)):(i=e,e=n),e}function pn(){let e,s,r;return e=i,s=$(),s!==n?(t.substr(i,3)===de?(r=de,i+=3):(r=n,p===0&&f(Ue)),r!==n?(h=e,s=We(),e=s):(i=e,e=n)):(i=e,e=n),e}function fn(){let e,s,r,a,l;if(e=i,s=$(),s!==n)if(t.charCodeAt(i)===34?(r=ue,i++):(r=n,p===0&&f(ye)),r!==n){if(a=[],ge.test(t.charAt(i))?(l=t.charAt(i),i++):(l=n,p===0&&f(me)),l!==n)for(;l!==n;)a.push(l),ge.test(t.charAt(i))?(l=t.charAt(i),i++):(l=n,p===0&&f(me));else a=n;a!==n?(t.charCodeAt(i)===34?(l=ue,i++):(l=n,p===0&&f(ye)),l!==n?(h=e,s=qe(a),e=s):(i=e,e=n)):(i=e,e=n)}else i=e,e=n;else i=e,e=n;return e}function $(){let e,s,r;for(p++,e=i,s=[],b.test(t.charAt(i))?(r=t.charAt(i),i++):(r=n,p===0&&f(x));r!==n;)s.push(r),b.test(t.charAt(i))?(r=t.charAt(i),i++):(r=n,p===0&&f(x));return s!==n&&(h=e,s=Ke()),e=s,p--,e===n&&(s=n,p===0&&f(Ge)),e}if(W=y(),W!==n&&i===t.length)return W;throw W!==n&&i<t.length&&f(Xe()),ve(ee,L<t.length?t.charAt(L):null,L<t.length?k(L,L+1):k(L,L))}var Le=$n;var Ce=`.tree {
  --branch-color: #666;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: .5em 0;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin: 0 .2em .5em;
    padding: .2em .5em;
    position: relative;
}

/* ########### custom AST node  styles ######## */
.tree {
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
}
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background); /* racket azure */
}
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: small;
  text-align: left;
  margin-bottom: 0.5em;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    height: .5em;
    left: 50%;
    position: absolute;
    top: calc(-.5em - 2px);
}
/* horizontal part + part pointing to corresp. hole
   -> width etc will be set via JavaScript
      Javascript cannot style ::before elements directly
      (since they are not part of the DOM),
      the variables will be set on the parent li element */
.tree li::before {
  box-sizing: border-box;
  content: "";
  position: absolute;
  height: .5em; /* overridden for some */
  top: -.5em;
  left: var(--connector-left, auto);
  right: var(--connector-right, auto);
  width: var(--connector-width, 100%);

  border: solid 2px var(--branch-color);
  border-top-style: none;
  border-left-style: var(--connector-border-left-style, none);
  border-right-style: var(--connector-border-right-style, none);
}

/* prevent up to 3 connectors from crossing */
.tree li.child-1::before {
  height: .3em;
}
.tree li.child-1 > span::before {
  top: calc(-.7em - 2px);
  height: 0.7em;
}

.tree li.child-3::before {
  height: .7em;
}
.tree li.child-3 > span::before {
  top: calc(-.3em - 2px);
  height: 0.3em;
}

/* ####### highlight way back up from a node ###### */
.tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
}

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree span:hover {
  cursor: pointer;
}

/* smooth transition between hiding and showing */
@keyframes hide-delayed {
  99% {
    visibility: visible;
  }
  100% {
    visibility: hidden;
  }
}
.tree span[data-collapsed] ~ ul {
  opacity: 0%;
  visibility: hidden;
  animation: hide-delayed 1s;
  transition: opacity 0.5s ease-out 0.5s;
}
.tree ul {
  opacity: 100%;
  transition: opacity 1s ease-out;
}

/* ######### holes ########## */
.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}
/* show/hide parts/holes  and float them into place */
.tree .code, .tree .placeholder {
  display: inline-block;
}
.tree .code {
  /* color: transparent; */
  transform: translate(var(--translate-x,0), var(--translate-y,0));
  transition: transform 1s ease-out;
}
.tree span[data-collapsed] .code {
  color: var(--text-grey);
  transform: translate(0,0);
}
.tree .placeholder {
  color: var(--text-grey);
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  text-align: center;
}
.tree span[data-collapsed] .placeholder {
  display: none;
}

.tree .hole-name {
  min-width: 2em;
}
.tree .hole-names {
  min-width: 2.5em;
}
`;var Te=document.createElement("style");Te.innerHTML=Ce;document.getElementsByTagName("head")[0].appendChild(Te);function En(){Array.from(document.getElementsByTagName("bsl-tree")).map(t=>{try{let o=Le(t.innerHTML);Ee(o,t)}catch(o){t.innerHTML+=`<br>${o}`}})}window.onload=()=>{En()};})();
//# sourceMappingURL=data:application/json;base64,
