(()=>{"use strict";var e={536:(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});const r='.tree {\n  --branch-color: #666;\n}\n/*\nCSS for tree by Ross Angus\nhttps://www.cssscript.com/clean-tree-diagram/\n(Edited and extended)\n*/\n\n/* ###### node layout ######## */\n.tree,\n.tree ul,\n.tree li {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n    position: relative;\n}\n\n.tree {\n    margin: 0 0 1em;\n    text-align: center;\n}\n\n.tree,\n.tree ul {\n    display: table;\n}\n\n.tree ul {\n    width: 100%;\n}\n\n.tree li {\n    display: table-cell;\n    padding: .5em 0;\n    vertical-align: top;\n}\n\n.tree code,\n.tree span {\n    border: solid .1em var(--branch-color);\n    border-radius: .2em;\n    display: inline-block;\n    margin: 0 .2em .5em;\n    padding: .2em .5em;\n    position: relative;\n}\n\n/* ########### custom AST node  styles ######## */\n.tree {\n  --node-background: #ebf0f4; /* racket azure */\n  --text-grey: #444; /* like in scribble */\n  --hole-yellow: #fdf68d; /* pale yellow */\n  --highlight-border-connectors: lime;\n}\n.tree span {\n  font-family: \'Fira-Mono\', monospace;\n  background-color: var(--node-background); /* racket azure */\n}\n.tree .name {\n  color: var(--text-grey);\n  font-style: italic;\n  font-size: small;\n  text-align: left;\n  margin-bottom: 0.5em;\n}\n\n/* ###### connectors ########### */\n/* part above box */\n.tree span:before {\n    outline: solid 1px var(--branch-color);\n    content: "";\n    height: .5em;\n    left: 50%;\n    position: absolute;\n    top: calc(-.5em - 2px);\n}\n/* horizontal part + part pointing to corresp. hole\n   -> width etc will be set via JavaScript\n      Javascript cannot style ::before elements directly\n      (since they are not part of the DOM),\n      the variables will be set on the parent li element */\n.tree li::before {\n  box-sizing: border-box;\n  content: "";\n  position: absolute;\n  height: .5em; /* overridden for some */\n  top: -.5em;\n  left: var(--connector-left, auto);\n  right: var(--connector-right, auto);\n  width: var(--connector-width, 100%);\n\n  border: solid 2px var(--branch-color);\n  border-top-style: none;\n  border-left-style: var(--connector-border-left-style, none);\n  border-right-style: var(--connector-border-right-style, none);\n}\n\n/* prevent up to 3 connectors from crossing */\n.tree li.child-1::before {\n  height: .3em;\n}\n.tree li.child-1 > span::before {\n  top: calc(-.7em - 2px);\n  height: 0.7em;\n}\n\n.tree li.child-3::before {\n  height: .7em;\n}\n.tree li.child-3 > span::before {\n  top: calc(-.3em - 2px);\n  height: 0.3em;\n}\n\n/* ####### highlight way back up from a node ###### */\n.tree li:hover > span {\n  border-color: var(--highlight-border-connectors);\n}\n.tree li:hover::before {\n  border-color: var(--highlight-border-connectors);\n  z-index: 1000;\n}\n.tree li:hover > span::before {\n  outline-color: var(--highlight-border-connectors);\n}\n\n/* ######## hide connectors over root ######## */\n.tree>li:before,\n.tree>li:after,\n.tree>li>code:before,\n.tree>li>span:before {\n    outline: none !important;\n    border: none !important;\n}\n.tree>li {\n    margin-top: 0;\n}\n\n/* ####### collapse nodes ######## */\n/* click on span to hide/show */\n.tree span:hover {\n  cursor: pointer;\n}\n\n/* smooth transition between hiding and showing */\n@keyframes hide-delayed {\n  99% {\n    visibility: visible;\n  }\n  100% {\n    visibility: hidden;\n  }\n}\n.tree span[data-collapsed] ~ ul {\n  opacity: 0%;\n  visibility: hidden;\n  animation: hide-delayed 1s;\n  transition: opacity 0.5s ease-out 0.5s;\n}\n.tree ul {\n  opacity: 100%;\n  transition: opacity 1s ease-out;\n}\n\n/* ######### holes ########## */\n.tree .hole {\n  display: inline-block;\n  background-color: var(--hole-yellow);\n  border: 1px solid var(--text-grey);\n  color: var(--text-grey);\n  padding-left: 0.25em;\n  padding-right: 0.25em;\n  position: relative;\n}\n/* show/hide parts/holes  and float them into place */\n.tree .code, .tree .placeholder {\n  display: inline-block;\n}\n.tree .code {\n  /* color: transparent; */\n  transform: translate(var(--translate-x,0), var(--translate-y,0));\n  transition: transform 1s ease-out;\n}\n.tree span[data-collapsed] .code {\n  color: var(--text-grey);\n  transform: translate(0,0);\n}\n.tree .placeholder {\n  color: var(--text-grey);\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  text-align: center;\n}\n.tree span[data-collapsed] .placeholder {\n  display: none;\n}\n\n.tree .hole-name {\n  min-width: 2em;\n}\n.tree .hole-names {\n  min-width: 2.5em;\n}\n'},517:(e,n)=>{var t;function r(e){return e.type===t.FunctionDefinition}function i(e){return e.type===t.ConstantDefinition}function o(e){return e.type===t.StructDefinition}function l(e){return e.type===t.FunctionCall}function a(e){return e.type===t.CondExpression}function s(e){return e.type===t.Symbol}function c(e){return["boolean","string","number"].includes(typeof e)||"'()"==e}Object.defineProperty(n,"__esModule",{value:!0}),n.isV=n.isName=n.isCond=n.isCall=n.isExpr=n.isStructDef=n.isConstDef=n.isFunDef=n.isDefinition=n.Production=void 0,function(e){e.FunctionDefinition="Function Definition",e.ConstantDefinition="Constant Definition",e.StructDefinition="Struct Definition",e.FunctionCall="Function Call",e.CondExpression="Cond-Expression",e.Symbol="Symbol"}(t=n.Production||(n.Production={})),n.isDefinition=function(e){return r(e)||i(e)||o(e)},n.isFunDef=r,n.isConstDef=i,n.isStructDef=o,n.isExpr=function(e){return l(e)||a(e)||s(e)||c(e)},n.isCall=l,n.isCond=a,n.isName=s,n.isV=c},542:(e,n)=>{function t(e,n,t){return t=t||" ",e.length>n?e:(n-=e.length,e+(t+=t.repeat(n)).slice(0,n))}Object.defineProperty(n,"__esModule",{value:!0}),n.parse=n.SyntaxError=void 0;class r extends Error{constructor(e,n,t,i){super(),this.message=e,this.expected=n,this.found=t,this.location=i,this.name="SyntaxError","function"==typeof Object.setPrototypeOf?Object.setPrototypeOf(this,r.prototype):this.__proto__=r.prototype,"function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,r)}static buildMessage(e,n){function t(e){return e.charCodeAt(0).toString(16).toUpperCase()}function r(e){return e.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(e=>"\\x0"+t(e))).replace(/[\x10-\x1F\x7F-\x9F]/g,(e=>"\\x"+t(e)))}function i(e){return e.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,(e=>"\\x0"+t(e))).replace(/[\x10-\x1F\x7F-\x9F]/g,(e=>"\\x"+t(e)))}function o(e){switch(e.type){case"literal":return'"'+r(e.text)+'"';case"class":const n=e.parts.map((e=>Array.isArray(e)?i(e[0])+"-"+i(e[1]):i(e)));return"["+(e.inverted?"^":"")+n+"]";case"any":return"any character";case"end":return"end of input";case"other":return e.description}}return"Expected "+function(e){const n=e.map(o);let t,r;if(n.sort(),n.length>0){for(t=1,r=1;t<n.length;t++)n[t-1]!==n[t]&&(n[r]=n[t],r++);n.length=r}switch(n.length){case 1:return n[0];case 2:return n[0]+" or "+n[1];default:return n.slice(0,-1).join(", ")+", or "+n[n.length-1]}}(e)+" but "+((l=n)?'"'+r(l)+'"':"end of input")+" found.";var l}format(e){let n="Error: "+this.message;if(this.location){let r,i=null;for(r=0;r<e.length;r++)if(e[r].source===this.location.source){i=e[r].text.split(/\r\n|\n|\r/g);break}let o=this.location.start,l=this.location.source+":"+o.line+":"+o.column;if(i){let e=this.location.end,r=t("",o.line.toString().length," "),a=i[o.line-1],s=o.line===e.line?e.column:a.length+1;n+="\n --\x3e "+l+"\n"+r+" |\n"+o.line+" | "+a+"\n"+r+" | "+t("",o.column-1," ")+t("",s-o.column,"^")}else n+="\n at "+l}return n}}n.SyntaxError=r,n.parse=function(e,n){const t={},i=(n=void 0!==n?n:{}).grammarSource,o={Program:J};let l=J;const a=/^[\t \n \r]/,s=I(["\t"," ","\n"," ","\r"],!1,!1),c="(define-struct",d=L("(define-struct",!1),u=L("(",!1),p=")",f=L(")",!1),h="(define",m=L("(define",!1),v="(cond",y=L("(cond",!1),g=L("[",!1),b=L("]",!1),x=/^[A-Za-z+-\/*=]/,C=I([["A","Z"],["a","z"],["+","/"],"*","="],!1,!1),A=/^[0-9]/,$=I([["0","9"]],!1,!1),S="#true",_=L("#true",!1),D="#false",P=L("#false",!1),j=L("'()",!1),O=L('"',!1),w=/^[A-Za-z]/,E=I([["A","Z"],["a","z"]],!1,!1),M={type:"other",description:"whitespace"};let F=0,k=0;const N=[{line:1,column:1}];let T,B=0,R=[],z=0;if(void 0!==n.startRule){if(!(n.startRule in o))throw new Error("Can't start parsing from rule \""+n.startRule+'".');l=o[n.startRule]}function L(e,n){return{type:"literal",text:e,ignoreCase:n}}function I(e,n,t){return{type:"class",parts:e,inverted:n,ignoreCase:t}}function V(n){let t,r=N[n];if(r)return r;for(t=n-1;!N[t];)t--;for(r=N[t],r={line:r.line,column:r.column};t<n;)10===e.charCodeAt(t)?(r.line++,r.column=1):r.column++,t++;return N[n]=r,r}function H(e,n){const t=V(e),r=V(n);return{source:i,start:{offset:e,line:t.line,column:t.column},end:{offset:n,line:r.line,column:r.column}}}function Z(e){F<B||(F>B&&(B=F,R=[]),R.push(e))}function J(){let e,n,r;if(e=F,n=[],r=U(),r!==t)for(;r!==t;)n.push(r),r=U();else n=t;return n!==t&&(k=e),e=n,e}function U(){let n,r,i,o;if(n=F,r=function(){let n,r,i;return n=F,r=K(),r!==t?(i=function(){let n,r,i,o,l,a,s,h,m;if(n=F,e.substr(F,14)===c?(r=c,F+=14):(r=t,0===z&&Z(d)),r!==t)if(i=G(),i!==t)if(o=K(),o!==t)if(40===e.charCodeAt(F)?(l="(",F++):(l=t,0===z&&Z(u)),l!==t){if(a=[],s=G(),s!==t)for(;s!==t;)a.push(s),s=G();else a=t;a!==t?(41===e.charCodeAt(F)?(s=p,F++):(s=t,0===z&&Z(f)),s!==t?(h=K(),h!==t?(41===e.charCodeAt(F)?(m=p,F++):(m=t,0===z&&Z(f)),m!==t?(k=n,r={type:"Struct Definition",binding:i,properties:a},n=r):(F=n,n=t)):(F=n,n=t)):(F=n,n=t)):(F=n,n=t)}else F=n,n=t;else F=n,n=t;else F=n,n=t;else F=n,n=t;return n}(),i===t&&(i=function(){let n,r,i,o,l,a,s,c,d;if(n=F,e.substr(F,7)===h?(r=h,F+=7):(r=t,0===z&&Z(m)),r!==t)if(i=G(),i!==t)if(o=K(),o!==t)if(40===e.charCodeAt(F)?(l="(",F++):(l=t,0===z&&Z(u)),l!==t){if(a=[],s=G(),s!==t)for(;s!==t;)a.push(s),s=G();else a=t;a!==t?(41===e.charCodeAt(F)?(s=p,F++):(s=t,0===z&&Z(f)),s!==t?(c=W(),c!==t?(41===e.charCodeAt(F)?(d=p,F++):(d=t,0===z&&Z(f)),d!==t?(k=n,r={type:"Function Definition",name:i,args:a,body:c},n=r):(F=n,n=t)):(F=n,n=t)):(F=n,n=t)):(F=n,n=t)}else F=n,n=t;else F=n,n=t;else F=n,n=t;else F=n,n=t;return n}(),i===t&&(i=function(){let n,r,i,o,l;return n=F,e.substr(F,7)===h?(r=h,F+=7):(r=t,0===z&&Z(m)),r!==t?(i=G(),i!==t?(o=W(),o!==t?(41===e.charCodeAt(F)?(l=p,F++):(l=t,0===z&&Z(f)),l!==t?(k=n,r={type:"Constant Definition",name:i,value:o},n=r):(F=n,n=t)):(F=n,n=t)):(F=n,n=t)):(F=n,n=t),n}())),i!==t?(k=n,r=i,n=r):(F=n,n=t)):(F=n,n=t),n}(),r===t&&(r=W()),r!==t){if(i=[],a.test(e.charAt(F))?(o=e.charAt(F),F++):(o=t,0===z&&Z(s)),o!==t)for(;o!==t;)i.push(o),a.test(e.charAt(F))?(o=e.charAt(F),F++):(o=t,0===z&&Z(s));else i=t;i!==t?(k=n,n=r):(F=n,n=t)}else F=n,n=t;return n}function W(){let n,r,i;return n=F,r=K(),r!==t?(i=function(){let n,r,i,o,l;if(n=F,e.substr(F,5)===v?(r=v,F+=5):(r=t,0===z&&Z(y)),r!==t){if(i=[],o=q(),o!==t)for(;o!==t;)i.push(o),o=q();else i=t;i!==t?(o=K(),o!==t?(41===e.charCodeAt(F)?(l=p,F++):(l=t,0===z&&Z(f)),l!==t?(k=n,r=function(e){return{type:"Cond-Expression",options:e}}(i),n=r):(F=n,n=t)):(F=n,n=t)):(F=n,n=t)}else F=n,n=t;return n}(),i===t&&(i=function(){let n,r,i,o,l;if(n=F,40===e.charCodeAt(F)?(r="(",F++):(r=t,0===z&&Z(u)),r!==t)if(i=G(),i!==t){for(o=[],l=W();l!==t;)o.push(l),l=W();o!==t?(41===e.charCodeAt(F)?(l=p,F++):(l=t,0===z&&Z(f)),l!==t?(k=n,r={type:"Function Call",name:i,args:o},n=r):(F=n,n=t)):(F=n,n=t)}else F=n,n=t;else F=n,n=t;return n}(),i===t&&(i=G(),i===t&&(i=function(){let n,r;return n=F,r=function(){let n,r,i,o;if(n=F,r=K(),r!==t){if(i=[],A.test(e.charAt(F))?(o=e.charAt(F),F++):(o=t,0===z&&Z($)),o!==t)for(;o!==t;)i.push(o),A.test(e.charAt(F))?(o=e.charAt(F),F++):(o=t,0===z&&Z($));else i=t;i!==t?(k=n,r=parseInt(e.substring(k,F),10),n=r):(F=n,n=t)}else F=n,n=t;return n}(),r===t&&(r=function(){let n,r,i;return n=F,r=K(),r!==t?(e.substr(F,5)===S?(i=S,F+=5):(i=t,0===z&&Z(_)),i===t&&(e.substr(F,6)===D?(i=D,F+=6):(i=t,0===z&&Z(P))),i!==t?(k=n,r="#true"===i,n=r):(F=n,n=t)):(F=n,n=t),n}(),r===t&&(r=function(){let n,r,i;return n=F,r=K(),r!==t?("'()"===e.substr(F,3)?(i="'()",F+=3):(i=t,0===z&&Z(j)),i!==t?(k=n,r="'()",n=r):(F=n,n=t)):(F=n,n=t),n}(),r===t&&(r=function(){let n,r,i,o,l;if(n=F,r=K(),r!==t)if(34===e.charCodeAt(F)?(i='"',F++):(i=t,0===z&&Z(O)),i!==t){if(o=[],w.test(e.charAt(F))?(l=e.charAt(F),F++):(l=t,0===z&&Z(E)),l!==t)for(;l!==t;)o.push(l),w.test(e.charAt(F))?(l=e.charAt(F),F++):(l=t,0===z&&Z(E));else o=t;o!==t?(34===e.charCodeAt(F)?(l='"',F++):(l=t,0===z&&Z(O)),l!==t?(k=n,r=o.join(""),n=r):(F=n,n=t)):(F=n,n=t)}else F=n,n=t;else F=n,n=t;return n}()))),r!==t&&(k=n),n=r,n}()))),i!==t?(k=n,r=i,n=r):(F=n,n=t)):(F=n,n=t),n}function q(){let n,r,i,o,l,a,s,c;return n=F,r=K(),r!==t?(91===e.charCodeAt(F)?(i="[",F++):(i=t,0===z&&Z(g)),i!==t?(o=K(),o!==t?(l=W(),l!==t?(a=K(),a!==t?(s=W(),s!==t?(93===e.charCodeAt(F)?(c="]",F++):(c=t,0===z&&Z(b)),c!==t?(k=n,r={condition:l,result:s},n=r):(F=n,n=t)):(F=n,n=t)):(F=n,n=t)):(F=n,n=t)):(F=n,n=t)):(F=n,n=t)):(F=n,n=t),n}function G(){let n,r,i,o;if(n=F,r=K(),r!==t){if(i=[],x.test(e.charAt(F))?(o=e.charAt(F),F++):(o=t,0===z&&Z(C)),o!==t)for(;o!==t;)i.push(o),x.test(e.charAt(F))?(o=e.charAt(F),F++):(o=t,0===z&&Z(C));else i=t;i!==t?(k=n,r={type:"Symbol",symbol:i.join("")},n=r):(F=n,n=t)}else F=n,n=t;return n}function K(){let n,r,i;for(z++,n=F,r=[],a.test(e.charAt(F))?(i=e.charAt(F),F++):(i=t,0===z&&Z(s));i!==t;)r.push(i),a.test(e.charAt(F))?(i=e.charAt(F),F++):(i=t,0===z&&Z(s));return r!==t&&(k=n,r=void 0),n=r,z--,n===t&&(r=t,0===z&&Z(M)),n}if(T=l(),T!==t&&F===e.length)return T;throw T!==t&&F<e.length&&Z({type:"end"}),Q=R,X=B<e.length?e.charAt(B):null,Y=B<e.length?H(B,B+1):H(B,B),new r(r.buildMessage(Q,X),Q,X,Y);var Q,X,Y}},514:function(e,n,t){var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,r,i)}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&r(n,e,t);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.treeProgram=void 0;const l=o(t(517)),a=o(t(415));function s(e){return`<ul class="tree ast"><li>${l.isDefinition(e)?(n=e,l.isFunDef(n)?`\n      <span>\n        <div class="name">Function Definition</div>\n        <div>( define\n          (\n            <div class="hole hole-1 hole-name">\n              <div class="code">${a.pprint([n.name])}</div>\n              <div class="placeholder">name</div>\n            </div>\n            <div class="hole hole-2 hole-names">\n              ${n.args.map((e=>`<div class="code">${a.printName(e)}</div>`)).join(" ")}\n              <div class="placeholder">name+</div>\n            </div>\n          )\n          <div class="hole hole-3">\n            <div class="code">${a.pprint([n.body])}</div>\n            <div class="placeholder">e</div>\n          </div>\n        )</div>\n      </span>\n      <ul>\n        <li class="child-1">${d(n.name)}</li>\n        ${n.args.map((e=>`<li class="child-2">${d(e)}</li>`)).join("")}\n        <li class="child-3">${c(n.body)}</li>\n      </ul>`:l.isConstDef(n)?`\n      <span>\n        <div class="name">Constant Definition</div>\n        <div>( define\n          <div class="hole hole-1 hole-name">\n            <div class="code">${a.pprint([n.name])}</div>\n            <div class="placeholder">name</div>\n          </div>\n\n          <div class="hole hole-2">\n            <div class="code">${a.pprint([n.value])}</div>\n            <div class="placeholder">e</div>\n          </div>\n        )</div>\n      </span>\n      <ul>\n        <li class="child-1">${d(n.name)}</li>\n        <li class="child-2">${c(n.value)}</li>\n      </ul>`:l.isStructDef(n)?`\n      <span>\n        <div class="name">Struct Definition</div>\n\n        <div>(define-struct\n          <div class="hole hole-1 hole-name">\n            <div class="code">${a.pprint([n.binding])}</div>\n            <div class="placeholder">name</div>\n          </div>\n          (\n            <div class="hole hole-2 hole-names">\n              ${n.properties.map((e=>`<div class="code">${a.printName(e)}</div>`)).join(" ")}\n              <div class="placeholder">name*</div>\n            </div>\n          )\n        )</div>\n      </span>\n      <ul>\n        <li class="child-1">${d(n.binding)}</li>\n        ${n.properties.map((e=>`<li class="child-2">${d(e)}</li>`)).join("")}\n      </ul>`:void console.error("Invalid input to printDefinition")):c(e)}</li></ul>`;var n}function c(e){return l.isCall(e)?`\n      <span>\n        <div class="name">Function Call</div>\n\n        <div>(\n          <div class="hole hole-1 hole-name">\n            <div class="code">${a.pprint([e.name])}</div>\n            <div class="placeholder">name</div>\n          </div>\n\n          <div class="hole hole-2">\n            ${e.args.map((e=>`<div class="code">${a.printE(e)}</div>`)).join(" ")}\n            <div class="placeholder">e*</div>\n          </div>\n        )</div>\n      </span>\n      <ul>\n        <li class="child-1">${d(e.name)}</li>\n        ${e.args.map((e=>`<li class="child-2">${c(e)}</li>`)).join("")}\n      </ul>`:l.isCond(e)?`\n      <span>\n        <div class="name">Cond-Expression</div>\n        <div>( cond\n          <div class="hole hole-2">\n            ${e.options.map((e=>`<div class="code">${a.printOption(e)}</div>`)).join(" ")}\n            <div class="placeholder">[ e e ]+</div>\n          </div>\n         )</div>\n      </span>\n      <ul>\n        ${e.options.map((e=>`<li class="child-2">${function(e){return`\n    <span>\n      <div class="name">Cond-Option</div>\n      <div>[\n        <div class="hole hole-1">\n          <div class="code">${a.pprint([e.condition])}</div>\n          <div class="placeholder">e</div>\n        </div>\n\n        <div class="hole hole-2">\n          <div class="code">${a.pprint([e.result])}</div>\n          <div class="placeholder">e</div>\n        </div>\n       ]\n      </div>\n    </span>\n    <ul>\n      <li class="child-1">${c(e.condition)}</li>\n      <li class="child-2">${c(e.result)}</li>\n    </ul>\n  `}(e)}</li>`)).join(" ")}\n      </ul>`:l.isName(e)?d(e):l.isV(e)?`\n      <span>\n        <div class="name">Literal Value</div>\n        <div>${a.pprint([e])}</div>\n      </span>`:(console.error("Invalid input to treeE"),`<span>${e}</span>`)}function d(e){return`\n    <span>\n      <div class="name">Symbol</div>\n      <div>${e.symbol}</div>\n    </span>`}function u(e,n,t){Array.from(e.getElementsByClassName(n)).map((e=>{const n=e,r=.5*(n.getBoundingClientRect().x+n.getBoundingClientRect().right);if(0==r)return;const i=p([n],"../../+")[0];Array.from(i.children).filter((e=>e.classList.contains(t))).map((e=>{const n=e,t=.5*(n.getBoundingClientRect().x+n.getBoundingClientRect().right),i=r-t;let o="";o+=i<0?"\n          --connector-left: auto;\n          --connector-right: 50%;\n          --connector-border-left-style: solid;\n          --connector-border-right-style: none;":"\n          --connector-left: 50%;\n          --connector-right: auto;\n          --connector-border-left-style: none;\n          --connector-border-right-style: solid;",o+=`--connector-width: ${Math.abs(i)+1}px;`,n.style.cssText=o}))}))}function p(e,n){const t=n.split("/"),r=t.shift();if(""==r)return e;const i=t.join("/");if(".."==r){const t=e.map((e=>e.parentElement));return t.every((e=>e))?p(t,i):(console.error(`Error traversing ${n}: Missing parentElement`,e),[])}if("+"==r){const t=e.map((e=>e.nextElementSibling));return t.every((e=>e))?p(t,i):(console.error(`Error traversing ${n}: Missing nextElementSibling`,e),[])}if(r.startsWith(".")){const n=r.slice(1);return p(e.flatMap((e=>Array.from(e.children).filter((e=>e.classList.contains(n))))),i)}return p(e.flatMap((e=>Array.from(e.children).filter((e=>e.tagName==r.toUpperCase())))),i)}n.treeProgram=function(e,n){var t;n.innerHTML=e.map(s).join("\n"),u(t=n,"hole-1","child-1"),u(t,"hole-2","child-2"),u(t,"hole-3","child-3"),function(e){Array.from(e.getElementsByClassName("name")).map((e=>{const n=p([e],"+/.hole/.code");if(0==n.length)return;const t=p([e],"../+/li/span/.name/+");if(n.length==t.length)for(let e=0;e<n.length;e++){const r=n[e],i=t[e],o=r.getBoundingClientRect(),l=i.getBoundingClientRect();r.style.cssText=`\n        --translate-x: ${(l.x+l.right)/2-(o.x+o.right)/2}px;\n        --translate-y: ${l.y-o.y}px;\n      `}else console.error("Error: More or less children than code figments",e,n,t)}))}(n),function(e){Array.from(e.getElementsByTagName("span")).map((e=>{e.onclick=()=>{const n=e;if(n.getAttribute("data-collapsed"))n.removeAttribute("data-collapsed");else{n.setAttribute("data-collapsed","true");const e=n.nextElementSibling;if(!e)return;Array.from(e.getElementsByTagName("span")).map((e=>{e.setAttribute("data-collapsed","true")}))}}}))}(n)}},415:function(e,n,t){var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,r,i)}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&r(n,e,t);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.testprogram=n.printName=n.printOption=n.printE=n.printDefinition=n.printDefOrExpr=n.pprint=void 0;const l=o(t(517));function a(e){return l.isDefinition(e)?s(e):c(e)}function s(e){return l.isFunDef(e)?`(define ${u(e.name)} (${e.args.map(u).join(" ")}) ${c(e.body)})`:l.isConstDef(e)?`(define ${u(e.name)} ${c(e.value)})`:l.isStructDef(e)?`(define-struct ${u(e.binding)} (${e.properties.map(u).join(" ")}))`:void console.error("Invalid input to printDefinition")}function c(e){return l.isCall(e)?`(${u(e.name)} ${e.args.map(c).join(" ")})`:l.isCond(e)?`(cond ${e.options.map(d).join(" ")})`:l.isName(e)?u(e):l.isV(e)?"string"==typeof e&&"'()"!==e?`"${e}"`:"boolean"==typeof e?e?"#true":"#false":`${e}`:(console.error("Invalid input to printE"),`<${e}>`)}function d(e){return`[${c(e.condition)} ${c(e.result)}]`}function u(e){return e.symbol}n.pprint=function(e){return e.map(a).join("\n")},n.printDefOrExpr=a,n.printDefinition=s,n.printE=c,n.printOption=d,n.printName=u,n.testprogram=[{type:l.Production.FunctionDefinition,name:{type:l.Production.Symbol,symbol:"f"},args:[{type:l.Production.Symbol,symbol:"x"},{type:l.Production.Symbol,symbol:"y"}],body:{type:l.Production.FunctionCall,name:{type:l.Production.Symbol,symbol:"+"},args:[{type:l.Production.Symbol,symbol:"x"},{type:l.Production.Symbol,symbol:"y"}]}},{type:l.Production.CondExpression,options:[{condition:{type:l.Production.FunctionCall,name:{type:l.Production.Symbol,symbol:"="},args:[{type:l.Production.Symbol,symbol:"x"},3]},result:"isThree"},{condition:!1,result:"'()"}]},{type:l.Production.ConstantDefinition,name:{type:l.Production.Symbol,symbol:"x"},value:42},{type:l.Production.StructDefinition,binding:{type:l.Production.Symbol,symbol:"name"},properties:[{type:l.Production.Symbol,symbol:"firstName"},{type:l.Production.Symbol,symbol:"lastName"}]}]},670:function(e,n,t){var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t);var i=Object.getOwnPropertyDescriptor(n,t);i&&!("get"in i?!n.__esModule:i.writable||i.configurable)||(i={enumerable:!0,get:function(){return n[t]}}),Object.defineProperty(e,r,i)}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.prototype.hasOwnProperty.call(e,t)&&r(n,e,t);return i(n,e),n},l=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0});const a=o(t(514)),s=t(542),c=l(t(536)),d=document.createElement("style");d.innerHTML=c.default,document.getElementsByTagName("head")[0].appendChild(d),window.onload=()=>{Array.from(document.getElementsByTagName("bsl-tree")).map((e=>{try{const n=(0,s.parse)(e.innerHTML);a.treeProgram(n,e)}catch(n){e.innerHTML+=`<br>${n}`}}))}}},n={};function t(r){var i=n[r];if(void 0!==i)return i.exports;var o=n[r]={exports:{}};return e[r].call(o.exports,o,o.exports,t),o.exports}t.d=(e,n)=>{for(var r in n)t.o(n,r)&&!t.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:n[r]})},t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t(670)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,