(()=>{var wt=Object.defineProperty;var Pe=Object.getOwnPropertySymbols;var kt=Object.prototype.hasOwnProperty,Nt=Object.prototype.propertyIsEnumerable;var _e=(t,r,e)=>r in t?wt(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e,we=(t,r)=>{for(var e in r||(r={}))kt.call(r,e)&&_e(t,e,r[e]);if(Pe)for(var e of Pe(r))Nt.call(r,e)&&_e(t,e,r[e]);return t};function G(t){return q(t)||J(t)||re(t)}function q(t){return t.type==="Function Definition"}function J(t){return t.type==="Constant Definition"}function re(t){return t.type==="Struct Definition"}function K(t){return t.type==="Function Call"}function X(t){return t.type==="Cond-Expression"}function Y(t){return t.type==="Symbol"}function ke(t){return t.type==="Literal Value"}function oe(t){return G(t)?Dt(t):C(t)}function Dt(t){if(q(t))return`(define (${L(t.name)} ${t.args.map(L).join(" ")}) ${C(t.body)})`;if(J(t))return`(define ${L(t.name)} ${C(t.value)})`;if(re(t))return`(define-struct ${L(t.binding)} (${t.properties.map(L).join(" ")}))`;console.error("Invalid input to printDefinition")}function C(t){return K(t)?`(${L(t.name)} ${t.args.map(C).join(" ")})`:X(t)?`(cond ${t.options.map(Z).join(" ")})`:Y(t)?L(t):ke(t)?typeof t.value=="string"&&t.value!=="'()"?`"${t.value}"`:typeof t.value=="boolean"?t.value?"#true":"#false":`${t.value}`:(console.error("Invalid input to printE"),`<${t}>`)}function Z(t){return`[${C(t.condition)} ${C(t.result)}]`}function L(t){return t.symbol}var sn=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{type:"Cond-Option",condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},{type:"Literal Value",value:3}]},result:{type:"Literal Value",value:"isThree"}},{type:"Cond-Option",condition:{type:"Literal Value",value:!1},result:{type:"Literal Value",value:"'()"}}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:{type:"Literal Value",value:42}},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function w(t,r,e=!1){if(t.length===0)return[];let a=r.split("/"),l=a.shift();if(l=="")return t;let p=a.join("/"),m=[];if(l=="..")m=t.map(h=>h.parentElement).filter(h=>h);else if(l=="+")m=t.map(h=>h.nextElementSibling).filter(h=>h);else if(l.startsWith(".")){let h=l.slice(1);m=t.flatMap(b=>Array.from(b.children).filter(A=>A.classList.contains(h)))}else m=t.flatMap(h=>Array.from(h.children).filter(b=>b.tagName==l.toUpperCase()));return m.length===0&&e&&console.error(`Error traversing ${r}: No element found`),w(m,p)}function z(t,r){if(t.tagName==r.toUpperCase())return t;{let e=t.parentElement;return e?z(e,r):(console.error("Could not find parent element with requested tag ",r),null)}}function H(t,r){if(t.classList.contains(r))return t;{let e=t.parentElement;return e?H(e,r):(console.error("Could not find parent element with requested class ",r),null)}}var De=`/* ######## color variables ###### */
.tree {
  --branch-color: #666;
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
  --wrong-background: red;
  --correct-background: lime;
  --hole-selection-background: white;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
    white-space: nowrap;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: 0;
    padding-top: 1.5em;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin-left: 1em;
    margin-right: 1em;
    margin-top: 1.5em;
    padding: .2em .5em;
    position: relative;
    box-sizing: border-box;
}

/* ########### custom AST node  styles ######## */
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background);
  transition: 1s background-color ease-out;
}
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: 0.85em;
  text-align: right;

  position: absolute;
  top: calc(-0.85em - 1.5em);
  right: var(--edgetext-right, 50%); /* to be set dynamically */
  margin-right: -1.5em;
  background-color: rgba(255,255,255,0.7);
}
.tree .terminal-symbol {
  border-width: .2em;
  border-style: double;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    width: var(--connector-width, 0px); /* to be set dynamically */
    left: var(--connector-left, 50%); /* to be set dynamically */
    position: absolute;
    top: -1.5em;
    transform: var(--connector-transform); /* to be set dynamically */
}
.tree span.terminal-symbol:before {
  top: calc(-1.5em - .2em);
}

/* ####### highlight way back up from a node ###### */
/* .tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
} */

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree .hole:hover {
  cursor: pointer;
}

.tree [data-collapsed="true"] {
  display: none;
}

/* ######### holes ########## */
.tree .char {
  display: inline;
  margin: 0;
  border: none;
  padding: 0;
  border-radius: 0;
  background-color: transparent;
  transition: background-color 1s ease-out;
}
.tree .char::before {
  display: none;
}

.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}

/* ########### quiz ########## */

/* quiz stages */
.tree span[data-quiz-state="production"] .name,
.tree span[data-quiz-state="production"] .code,
.tree span[data-quiz-state="production"] .hole-marking {
  display: none;
}

.tree span[data-quiz-state="hole-marking"] .name,
.tree span[data-quiz-state="hole-marking"] .code,
.tree span[data-quiz-state="hole-marking"] .production {
  display: none;
}

.tree span[data-quiz-state="done"] .production,
.tree span[data-quiz-state="done"] .hole-marking {
  display: none;
}

/* highlighting text by putting a div behind a textarea */
.tree textarea,
.tree .marker-container {
  font-family: inherit;
  resize: none;
  font-size: calc(1em);
  padding: 2px;
  margin: .2em;
  border: none;
  box-sizing: border-box;
}

.tree .textarea-container {
  position: relative;
  display: inline-block;
}
.tree textarea {
  position: relative;
  background-color: transparent;
  z-index: 2;
}
.tree .marker-container {
  text-align: left;
  background-color: var(--hole-selection-background);
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
}
.tree .marker {
  color: transparent;
  background-color: transparent;
  transition: 1s background-color ease-out;
}

/* feedback for wrong answer */
.tree .wrong {
  background-color: var(--wrong-background);
  transition: none;
}
.tree .correct {
  background-color: var(--correct-background);
  transition: none;
}
`;function Ie(t,r,e,a=!1,l="en"){if(!document.getElementById("bsl-tools-tree-style")){let p=document.createElement("style");p.innerHTML=De,p.id="bsl-tools-tree-style",document.getElementsByTagName("head")[0].appendChild(p)}Fe.includes(l)||(console.error(`
      Selected language "${l}" is not implemented, defaulting to "en".
      Available language codes: ${Fe.join(", ")}
    `),l="en"),r.innerHTML=`
    <ul class="tree ast">
      ${a?je(t,l,e):ze(t)}
    </ul>
  `,a&&w([r],"ul/li/ul/li").map(p=>p.setAttribute("data-collapsed","false")),ee(r)}var Fe=["en","de"],Me={en:{"select production":"Select production","mark selected text as hole":"Mark selected text as hole"},de:{"select production":"Produktion ausw\xE4hlen","mark selected text as hole":"Auswahl als Loch markieren"}};function ee(t){let r=parseFloat(getComputedStyle(t).fontSize)*3;for(let e=1;;e++){let a=Array.from(t.getElementsByClassName(`hole-${e}`));if(a.length<1)return;a.map(l=>{let p=l,m=.5*(p.getBoundingClientRect().x+p.getBoundingClientRect().right);if(m==0)return;let h=z(p,"li");!h||w([h],`ul/.child-${e}/span`).map(b=>{let A=b,f=.5*(A.getBoundingClientRect().x+A.getBoundingClientRect().right),d=m-f,S=-Math.atan2(r,d),B=Math.sqrt(d*d+r*r),k=d/2-B/2;A.style.cssText=`
          --connector-width: ${B}px;
          --connector-left: calc(50% + ${k}px);
          --edgetext-right: calc(50% - ${d/2}px);
          --connector-transform: rotate(${S}rad);
        `})})}}function ze(t,r=-1){return`
    <li class="${r>=0?`child-${r+1}`:""}"
        data-collapsed="${r>=0?"true":"false"}">
      <span class="${t.holes.length>0?"":"terminal-symbol"}">

        <div class="name">${se(t.production)}</div>

        ${He(t)}

      </span>
      ${t.holes.length>0?`<ul>${t.holes.map((e,a)=>ze(e.content,a)).join("")}</ul>`:""}
    </li>
  `}function se(t){return t.replaceAll("<","&lt;").replaceAll(">","&gt;")}function Oe(t){return t.replaceAll("&lt;","<").replaceAll("&gt;",">")}function He(t){return`
  <div class="code">${Mt(t).map(e=>`<span class="char ${e.pos?`hole hole-${e.pos}`:""}"
             ${e.pos?`onclick="toggleChild(event,${e.pos})"`:""}
             >${t.code.slice(e.start,e.end)}</span>`).join("")}
  </div>
  `}window.toggleChild=(t,r)=>{let e=t.target,a=z(e,"li"),l=H(e,"tree");if(!a||!l){console.error("toggleChild called from .hole not in .tree");return}w([a],`ul/.child-${r}`).map(p=>{p.setAttribute("data-collapsed",p.getAttribute("data-collapsed")==="true"?"false":"true")}),ee(l)};function Mt(t){let r=[],e=0;for(let a=0;a<t.holes.length;a++)t.holes[a].start>e&&r.push({pos:!1,start:e,end:t.holes[a].start}),r.push(we({pos:a+1},t.holes[a])),e=t.holes[a].end;return e<t.code.length&&r.push({pos:!1,start:e,end:t.code.length}),r}function je(t,r,e,a=-1){return`
    <li class="${a>=0?`child-${a+1}`:""}"
        data-collapsed="${a>=0?"true":"false"}">
      <span class="${t.holes.length>0?"":"terminal-symbol"}"
            data-quiz-state="${a>=0?"production":"done"}"
            data-is-terminal="${t.holes.length<=0}"
            data-is-trivial-hole="${t.holes.length===1&&t.holes[0].start===0&&t.holes[0].end===t.code.length}">

        ${zt(t,r,e)}

        ${Ot(t,r)}

        <div class="name">
          ${se(t.production)}
        </div>
        ${He(t)}
      </span>
      ${t.holes.length>0?`<ul>${t.holes.map((l,p)=>je(l.content,r,e,p)).join("")}</ul>`:""}
    </li>
  `}function zt(t,r,e){return`
  <div class="production">
    <select onchange="checkProduction(event, '${t.production}')">
      <option selected="true">${Me[r]["select production"]}</option>
      ${e.map(a=>`
          <option value="${a}">${se(a)}</option>
        `).join("")}
    </select>
  </div>
  `}window.checkProduction=(t,r)=>{let e=t.target;if(e.value===r){let a=z(e,"span");if(a){a.getAttribute("data-is-terminal")==="true"?a.setAttribute("data-quiz-state","done"):a.getAttribute("data-is-trivial-hole")==="true"?(a.setAttribute("data-quiz-state","done"),w([a],"+/li",!0).map(p=>p.setAttribute("data-collapsed","false"))):a.setAttribute("data-quiz-state","hole-marking"),w([a],"../+").map(p=>p.setAttribute("data-collapsed","false"));let l=H(a,"tree");l&&ee(l)}}else{Array.from(e.selectedOptions).map(l=>l.remove());let a=z(e,"span");a&&(a.classList.add("wrong"),window.setTimeout(()=>{a.classList.remove("wrong")},100))}};function Ot(t,r){return`
  <div class="hole-marking"
       data-holes="${btoa(JSON.stringify(t.holes.map(e=>[e.start,e.end,!1])))}">
    <div class="textarea-container">
      <div class="marker-container">
        ${t.code.split(`
`).map(e=>e.split("").map(a=>`<span class="char marker">${a}</span>`).join("")).join('<span class="char marker"></span><br>')}
      </div>
      <textarea autocorrect="off"
                spellcheck="false"
                cols="${t.code.split(`
`).map(e=>e.length).reduce((e,a)=>e>a?e:a)}"
                rows="${t.code.split(`
`).length}"
                oninput="stopInput(event, '${btoa(t.code)}')">${t.code}</textarea>
    </div><br>
    <button onclick="checkSelection(event)">
      ${Me[r]["mark selected text as hole"]}
    </button>
  </div>
  `}window.stopInput=(t,r)=>{t.target.value=atob(r)};window.checkSelection=t=>{let r=t.target,e=H(r,"hole-marking");if(!e){console.error("checkProduction called from el. not wrapped in div.hole-marking");return}let a=JSON.parse(atob(e.getAttribute("data-holes"))),l=e.getElementsByTagName("textarea")[0],p=l.selectionStart,m=l.selectionEnd,h=p<m?p:m,b=p<m?m:p,A=-1;if(a.map((f,d)=>{f[0]===h&&f[1]===b&&(f[2]=!0,A=d)}),A>=0)e.setAttribute("data-holes",btoa(JSON.stringify(a))),w([e],".textarea-container/.marker-container/.marker",!0).slice(h,b).map(f=>f.classList.add("correct"));else{let f=w([e],".textarea-container/.marker-container/.marker",!0).slice(h,b);f.map(d=>d.classList.add("wrong")),window.setTimeout(()=>{f.map(d=>d.classList.remove("wrong"))},100)}if(a.every(f=>f[2])){let f=z(e,"span");if(f){f.setAttribute("data-quiz-state","done"),w([f],"../ul/.child-1").map(S=>S.setAttribute("data-collapsed","false"));let d=H(f,"tree");d&&ee(d)}}};function ae(t,r,e){return e=e||" ",t.length>r?t:(r-=t.length,e+=e.repeat(r),t+e.slice(0,r))}var D=class extends Error{constructor(e,a,l,p){super();this.message=e,this.expected=a,this.found=l,this.location=p,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,D.prototype):this.__proto__=D.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,D)}static buildMessage(e,a){function l(f){return f.charCodeAt(0).toString(16).toUpperCase()}function p(f){return f.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,d=>"\\x0"+l(d)).replace(/[\x10-\x1F\x7F-\x9F]/g,d=>"\\x"+l(d))}function m(f){return f.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,d=>"\\x0"+l(d)).replace(/[\x10-\x1F\x7F-\x9F]/g,d=>"\\x"+l(d))}function h(f){switch(f.type){case"literal":return'"'+p(f.text)+'"';case"class":let d=f.parts.map(S=>Array.isArray(S)?m(S[0])+"-"+m(S[1]):m(S));return"["+(f.inverted?"^":"")+d+"]";case"any":return"any character";case"end":return"end of input";case"other":return f.description}}function b(f){let d=f.map(h),S,B;if(d.sort(),d.length>0){for(S=1,B=1;S<d.length;S++)d[S-1]!==d[S]&&(d[B]=d[S],B++);d.length=B}switch(d.length){case 1:return d[0];case 2:return d[0]+" or "+d[1];default:return d.slice(0,-1).join(", ")+", or "+d[d.length-1]}}function A(f){return f?'"'+p(f)+'"':"end of input"}return"Expected "+b(e)+" but "+A(a)+" found."}format(e){let a="Error: "+this.message;if(this.location){let l=null,p;for(p=0;p<e.length;p++)if(e[p].source===this.location.source){l=e[p].text.split(/\r\n|\n|\r/g);break}let m=this.location.start,h=this.location.source+":"+m.line+":"+m.column;if(l){let b=this.location.end,A=ae("",m.line.toString().length," "),f=l[m.line-1],d=m.line===b.line?b.column:f.length+1;a+=`
 --> `+h+`
`+A+` |
`+m.line+" | "+f+`
`+A+" | "+ae("",m.column-1," ")+ae("",d-m.column,"^")}else a+=`
 at `+h}return a}};function Ht(t,r){r=r!==void 0?r:{};let e={},a=r.grammarSource,l={Program:Ce},p=Ce,m=function(n){return n},h=/^[\t \n \r]/,b=W(["	"," ",`
`," ","\r"],!1,!1),A=function(n){return n},f="(define-struct",d=v("(define-struct",!1),S="(",B=v("(",!1),k=")",F=v(")",!1),Qe=function(n,s){return{type:"Struct Definition",binding:n,properties:s}},Q="(define",ie=v("(define",!1),Ue=function(n,s,i){return{type:"Function Definition",name:n,args:s,body:i}},Ve=function(n,s){return{type:"Constant Definition",name:n,value:s}},We=function(n){return n},le="(cond",Ge=v("(cond",!1),Ke=function(n){return{type:"Cond-Expression",options:n}},Xe="[",Ye=v("[",!1),Ze="]",et=v("]",!1),tt=function(n,s){return{type:"Cond-Option",condition:n,result:s}},nt=function(n,s){return{type:"Function Call",name:n,args:s}},ce="define",rt=v("define",!1),pe=/^[^",'`()[\]{}|#\n\t\r0-9 ]/,ue=W(['"',",","'","`","(",")","[","]","{","}","|","#",`
`,"	","\r",["0","9"]," "],!0,!1),ot=function(n){return{type:"Symbol",symbol:n.join("")}},st=function(n){return{type:"Literal Value",value:n}},de=/^[0-9]/,fe=W([["0","9"]],!1,!1),at=function(){return parseInt(ht(),10)},ge="#true",it=v("#true",!1),me="#false",lt=v("#false",!1),ye="#t",ct=v("#t",!1),he="#f",pt=v("#f",!1),ut=function(n){return n==="#true"||n==="#t"},be="'()",dt=v("'()",!1),ft=function(){return"'()"},$e='"',Se=v('"',!1),xe=/^[^"]/,Le=W(['"'],!0,!1),gt=function(n){return n.join("")},mt=Ae("whitespace"),yt=function(){},o=0,$=0,U=[{line:1,column:1}],_=0,te=[],g=0,V;if(r.startRule!==void 0){if(!(r.startRule in l))throw new Error(`Can't start parsing from rule "`+r.startRule+'".');p=l[r.startRule]}function ht(){return t.substring($,o)}function Zt(){return R($,o)}function en(n,s){throw s=s!==void 0?s:R($,o),Te([Ae(n)],t.substring($,o),s)}function tn(n,s){throw s=s!==void 0?s:R($,o),$t(n,s)}function v(n,s){return{type:"literal",text:n,ignoreCase:s}}function W(n,s,i){return{type:"class",parts:n,inverted:s,ignoreCase:i}}function nn(){return{type:"any"}}function bt(){return{type:"end"}}function Ae(n){return{type:"other",description:n}}function Ee(n){let s=U[n],i;if(s)return s;for(i=n-1;!U[i];)i--;for(s=U[i],s={line:s.line,column:s.column};i<n;)t.charCodeAt(i)===10?(s.line++,s.column=1):s.column++,i++;return U[n]=s,s}function R(n,s){let i=Ee(n),c=Ee(s);return{source:a,start:{offset:n,line:i.line,column:i.column},end:{offset:s,line:c.line,column:c.column}}}function y(n){o<_||(o>_&&(_=o,te=[]),te.push(n))}function $t(n,s){return new D(n,[],"",s)}function Te(n,s,i){return new D(D.buildMessage(n,s),n,s,i)}function Ce(){let n,s,i;if(n=o,s=[],i=ve(),i!==e)for(;i!==e;)s.push(i),i=ve();else s=e;return s!==e&&($=n,s=m(s)),n=s,n}function ve(){let n,s,i,c;if(n=o,s=St(),s===e&&(s=I()),s!==e){if(i=[],h.test(t.charAt(o))?(c=t.charAt(o),o++):(c=e,g===0&&y(b)),c!==e)for(;c!==e;)i.push(c),h.test(t.charAt(o))?(c=t.charAt(o),o++):(c=e,g===0&&y(b));else i=e;i!==e?($=n,s=m(s),n=s):(o=n,n=e)}else o=n,n=e;return n}function St(){let n,s,i;return n=o,s=E(),s!==e?(i=xt(),i===e&&(i=Lt(),i===e&&(i=At())),i!==e?($=n,s=A(i),n=s):(o=n,n=e)):(o=n,n=e),n}function xt(){let n,s,i,c,u,P,x,T,M;if(n=o,t.substr(o,14)===f?(s=f,o+=14):(s=e,g===0&&y(d)),s!==e)if(i=N(),i!==e)if(c=E(),c!==e)if(t.charCodeAt(o)===40?(u=S,o++):(u=e,g===0&&y(B)),u!==e){if(P=[],x=N(),x!==e)for(;x!==e;)P.push(x),x=N();else P=e;P!==e?(t.charCodeAt(o)===41?(x=k,o++):(x=e,g===0&&y(F)),x!==e?(T=E(),T!==e?(t.charCodeAt(o)===41?(M=k,o++):(M=e,g===0&&y(F)),M!==e?($=n,s=Qe(i,P),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;else o=n,n=e;else o=n,n=e;return n}function Lt(){let n,s,i,c,u,P,x,T,M,ne;if(n=o,t.substr(o,7)===Q?(s=Q,o+=7):(s=e,g===0&&y(ie)),s!==e)if(i=E(),i!==e)if(t.charCodeAt(o)===40?(c=S,o++):(c=e,g===0&&y(B)),c!==e)if(u=N(),u!==e)if(P=E(),P!==e){if(x=[],T=N(),T!==e)for(;T!==e;)x.push(T),T=N();else x=e;x!==e?(t.charCodeAt(o)===41?(T=k,o++):(T=e,g===0&&y(F)),T!==e?(M=I(),M!==e?(t.charCodeAt(o)===41?(ne=k,o++):(ne=e,g===0&&y(F)),ne!==e?($=n,s=Ue(u,x,M),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;else o=n,n=e;else o=n,n=e;else o=n,n=e;return n}function At(){let n,s,i,c,u;return n=o,t.substr(o,7)===Q?(s=Q,o+=7):(s=e,g===0&&y(ie)),s!==e?(i=N(),i!==e?(c=I(),c!==e?(t.charCodeAt(o)===41?(u=k,o++):(u=e,g===0&&y(F)),u!==e?($=n,s=Ve(i,c),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e),n}function I(){let n,s,i;return n=o,s=E(),s!==e?(i=Et(),i===e&&(i=Tt(),i===e&&(i=N(),i===e&&(i=Ct()))),i!==e?($=n,s=We(i),n=s):(o=n,n=e)):(o=n,n=e),n}function Et(){let n,s,i,c,u;if(n=o,t.substr(o,5)===le?(s=le,o+=5):(s=e,g===0&&y(Ge)),s!==e){if(i=[],c=Be(),c!==e)for(;c!==e;)i.push(c),c=Be();else i=e;i!==e?(c=E(),c!==e?(t.charCodeAt(o)===41?(u=k,o++):(u=e,g===0&&y(F)),u!==e?($=n,s=Ke(i),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;return n}function Be(){let n,s,i,c,u,P,x,T;return n=o,s=E(),s!==e?(t.charCodeAt(o)===91?(i=Xe,o++):(i=e,g===0&&y(Ye)),i!==e?(c=E(),c!==e?(u=I(),u!==e?(P=E(),P!==e?(x=I(),x!==e?(t.charCodeAt(o)===93?(T=Ze,o++):(T=e,g===0&&y(et)),T!==e?($=n,s=tt(u,x),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e),n}function Tt(){let n,s,i,c,u;if(n=o,t.charCodeAt(o)===40?(s=S,o++):(s=e,g===0&&y(B)),s!==e)if(i=N(),i!==e){for(c=[],u=I();u!==e;)c.push(u),u=I();c!==e?(t.charCodeAt(o)===41?(u=k,o++):(u=e,g===0&&y(F)),u!==e?($=n,s=nt(i,c),n=s):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;return n}function N(){let n,s,i,c,u;if(n=o,s=E(),s!==e)if(i=o,g++,t.substr(o,6)===ce?(c=ce,o+=6):(c=e,g===0&&y(rt)),g--,c===e?i=void 0:(o=i,i=e),i!==e){if(c=[],pe.test(t.charAt(o))?(u=t.charAt(o),o++):(u=e,g===0&&y(ue)),u!==e)for(;u!==e;)c.push(u),pe.test(t.charAt(o))?(u=t.charAt(o),o++):(u=e,g===0&&y(ue));else c=e;c!==e?($=n,s=ot(c),n=s):(o=n,n=e)}else o=n,n=e;else o=n,n=e;return n}function Ct(){let n,s;return n=o,s=vt(),s===e&&(s=Bt(),s===e&&(s=Pt(),s===e&&(s=_t()))),s!==e&&($=n,s=st(s)),n=s,n}function vt(){let n,s,i,c;if(n=o,s=E(),s!==e){if(i=[],de.test(t.charAt(o))?(c=t.charAt(o),o++):(c=e,g===0&&y(fe)),c!==e)for(;c!==e;)i.push(c),de.test(t.charAt(o))?(c=t.charAt(o),o++):(c=e,g===0&&y(fe));else i=e;i!==e?($=n,s=at(),n=s):(o=n,n=e)}else o=n,n=e;return n}function Bt(){let n,s,i;return n=o,s=E(),s!==e?(t.substr(o,5)===ge?(i=ge,o+=5):(i=e,g===0&&y(it)),i===e&&(t.substr(o,6)===me?(i=me,o+=6):(i=e,g===0&&y(lt)),i===e&&(t.substr(o,2)===ye?(i=ye,o+=2):(i=e,g===0&&y(ct)),i===e&&(t.substr(o,2)===he?(i=he,o+=2):(i=e,g===0&&y(pt))))),i!==e?($=n,s=ut(i),n=s):(o=n,n=e)):(o=n,n=e),n}function Pt(){let n,s,i;return n=o,s=E(),s!==e?(t.substr(o,3)===be?(i=be,o+=3):(i=e,g===0&&y(dt)),i!==e?($=n,s=ft(),n=s):(o=n,n=e)):(o=n,n=e),n}function _t(){let n,s,i,c,u;if(n=o,s=E(),s!==e)if(t.charCodeAt(o)===34?(i=$e,o++):(i=e,g===0&&y(Se)),i!==e){if(c=[],xe.test(t.charAt(o))?(u=t.charAt(o),o++):(u=e,g===0&&y(Le)),u!==e)for(;u!==e;)c.push(u),xe.test(t.charAt(o))?(u=t.charAt(o),o++):(u=e,g===0&&y(Le));else c=e;c!==e?(t.charCodeAt(o)===34?(u=$e,o++):(u=e,g===0&&y(Se)),u!==e?($=n,s=gt(c),n=s):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;return n}function E(){let n,s,i;for(g++,n=o,s=[],h.test(t.charAt(o))?(i=t.charAt(o),o++):(i=e,g===0&&y(b));i!==e;)s.push(i),h.test(t.charAt(o))?(i=t.charAt(o),o++):(i=e,g===0&&y(b));return s!==e&&($=n,s=yt()),n=s,g--,n===e&&(s=e,g===0&&y(mt)),n}if(V=p(),V!==e&&o===t.length)return V;throw V!==e&&o<t.length&&y(bt()),Te(te,_<t.length?t.charAt(_):null,_<t.length?R(_,_+1):R(_,_))}var Re=Ht;var qe=`/* css for errors */
.error-wrapper{
    display:flex;
    flex-direction:column;
    margin:2vw;
    font-size:inherit;
}

.error{
    font-size:1.2em;
}
`;function Je(){Array.from(document.getElementsByTagName("bsltree")).map(t=>{try{let r=Re(Oe(t.innerHTML)),e=Jt(r),a=t.getAttribute("quiz")==="true",l=t.getAttribute("lang")?t.getAttribute("lang"):void 0;Ie(e,t,qt,a,l)}catch(r){Rt(t,`${r.location.start.line}:${r.location.start.column} ${r}`)}})}function Rt(t,r){if(!document.getElementById("bsl-tools-error-style")){let b=document.createElement("style");b.innerHTML=qe,b.id="bsl-tools-error-style",document.getElementsByTagName("head")[0].appendChild(b)}let e=t.innerHTML;t.innerHTML="";let a=document.createElement("div");a.classList.add("error-wrapper"),t.appendChild(a);let l=`<p> BSL-Tree could not be parsed! </p>
                  <p> Input: <b style="font-size:0.9em;">${e}</b> </p>`,p=document.createElement("div");p.classList.add("origin"),p.innerHTML=l,a.appendChild(p);let m=document.createElement("pre");m.classList.add("error");let h=document.createElement("code");h.textContent=r,a.appendChild(m),m.appendChild(h)}var qt=["<program>","<def-or-expr>*","<def-or-expr>","<definition>","<e>","<e>*","{[ <e> <e> ]}+","[ <e> <e> ]","<name>*","<name>+","<name>","<v>"];function Jt(t){let r=t.map(oe),e=[],a="";for(let l=0;l<r.length;l++){l>0&&(a=`${a}
`);let p=a.length;a=`${a}${r[l]}`;let m=a.length;e.push({start:p,end:m})}return{production:"<program>",code:a,holes:[{start:0,end:a.length,content:{production:"<def-or-expr>*",code:a,holes:e.map((l,p)=>({start:l.start,end:l.end,content:Qt(t[p])}))}}]}}function Qt(t){let r=oe(t);return{production:"<def-or-expr>",code:r,holes:[{start:0,end:r.length,content:G(t)?Ut(t):j(t)}]}}function Ut(t){let r="",e=[];if(q(t)){r="(define (";let a=r.length;r=`${r}${L(t.name)}`,e.push({start:a,end:r.length,content:O(t.name)}),r=`${r} `,a=r.length,r=`${r}${t.args.map(L).join(" ")}`,e.push({start:a,end:r.length,content:Vt(t.args)}),r=`${r}) `,a=r.length,r=`${r}${C(t.body)}`,e.push({start:a,end:r.length,content:j(t.body)}),r=`${r})`}else if(J(t)){r="(define ";let a=r.length;r=`${r}${L(t.name)}`,e.push({start:a,end:r.length,content:O(t.name)}),r=`${r} `,a=r.length,r=`${r}${C(t.value)}`,e.push({start:a,end:r.length,content:j(t.value)}),r=`${r})`}else{r="(define-struct ";let a=r.length;r=`${r}${L(t.binding)}`,e.push({start:a,end:r.length,content:O(t.binding)}),r=`${r} (`,a=r.length,r=`${r}${t.properties.map(L).join(" ")}`,e.push({start:a,end:r.length,content:Wt(t.properties)}),r=`${r}))`}return{production:"<definition>",code:r,holes:e}}function j(t){let r="",e=[];if(K(t)){r="(";let a=r.length;r=`${r}${L(t.name)}`,e.push({start:a,end:r.length,content:O(t.name)}),r=`${r} `,a=r.length,r=`${r}${t.args.map(C).join(" ")}`,e.push({start:a,end:r.length,content:Gt(t.args)}),r=`${r})`}else if(X(t)){r="(cond ";let a=r.length;r=`${r}${t.options.map(Z).join(" ")}`,e.push({start:a,end:r.length,content:Kt(t.options)}),r=`${r})`}else Y(t)?(r=L(t),e.push({start:0,end:r.length,content:O(t)})):(r=C(t),e.push({start:0,end:r.length,content:Yt(t)}));return{production:"<e>",code:r,holes:e}}function O(t){return{production:"<name>",code:L(t),holes:[]}}function Vt(t){t.length<1&&console.error("<name>+ but used but names are empty");let r="",e=[];for(let a=0;a<t.length;a++){let l=r.length;r=`${r}${L(t[a])}`,e.push({start:l,end:r.length,content:O(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"<name>+",code:r,holes:e}}function Wt(t){let r="",e=[];for(let a=0;a<t.length;a++){let l=r.length;r=`${r}${L(t[a])}`,e.push({start:l,end:r.length,content:O(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"<name>*",code:r,holes:e}}function Gt(t){let r="",e=[];for(let a=0;a<t.length;a++){let l=r.length;r=`${r}${C(t[a])}`,e.push({start:l,end:r.length,content:j(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"<e>*",code:r,holes:e}}function Kt(t){let r="",e=[];for(let a=0;a<t.length;a++){let l=r.length;r=`${r}${Z(t[a])}`,e.push({start:l,end:r.length,content:Xt(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"{[ <e> <e> ]}+",code:r,holes:e}}function Xt(t){let r="",e=[];r=`${r}[`;let a=r.length;return r=`${r}${C(t.condition)}`,e.push({start:a,end:r.length,content:j(t.condition)}),r=`${r} `,a=r.length,r=`${r}${C(t.result)}`,e.push({start:a,end:r.length,content:j(t.result)}),r=`${r}]`,{production:"[ <e> <e> ]",code:r,holes:e}}function Yt(t){return{production:"<v>",code:C(t),holes:[]}}window.onload=()=>{Je()};})();
//# sourceMappingURL=data:application/json;base64,
