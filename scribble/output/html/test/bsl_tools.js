(()=>{var wt=Object.defineProperty;var _e=Object.getOwnPropertySymbols;var Dt=Object.prototype.hasOwnProperty,Nt=Object.prototype.propertyIsEnumerable;var ke=(t,r,e)=>r in t?wt(t,r,{enumerable:!0,configurable:!0,writable:!0,value:e}):t[r]=e,we=(t,r)=>{for(var e in r||(r={}))Dt.call(r,e)&&ke(t,e,r[e]);if(_e)for(var e of _e(r))Nt.call(r,e)&&ke(t,e,r[e]);return t};function G(t){return R(t)||q(t)||re(t)}function R(t){return t.type==="Function Definition"}function q(t){return t.type==="Constant Definition"}function re(t){return t.type==="Struct Definition"}function K(t){return t.type==="Function Call"}function X(t){return t.type==="Cond-Expression"}function Y(t){return t.type==="Symbol"}function De(t){return t.type==="Literal Value"}function oe(t){return G(t)?Ft(t):C(t)}function Ft(t){if(R(t))return`(define (${L(t.name)} ${t.args.map(L).join(" ")}) ${C(t.body)})`;if(q(t))return`(define ${L(t.name)} ${C(t.value)})`;if(re(t))return`(define-struct ${L(t.binding)} (${t.properties.map(L).join(" ")}))`;console.error("Invalid input to printDefinition")}function C(t){return K(t)?`(${L(t.name)} ${t.args.map(C).join(" ")})`:X(t)?`(cond ${t.options.map(Z).join(" ")})`:Y(t)?L(t):De(t)?typeof t.value=="string"&&t.value!=="'()"?`"${t.value}"`:typeof t.value=="boolean"?t.value?"#true":"#false":`${t.value}`:(console.error("Invalid input to printE"),`<${t}>`)}function Z(t){return`[${C(t.condition)} ${C(t.result)}]`}function L(t){return t.symbol}var fn=[{type:"Function Definition",name:{type:"Symbol",symbol:"f"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}],body:{type:"Function Call",name:{type:"Symbol",symbol:"+"},args:[{type:"Symbol",symbol:"x"},{type:"Symbol",symbol:"y"}]}},{type:"Cond-Expression",options:[{type:"Cond-Option",condition:{type:"Function Call",name:{type:"Symbol",symbol:"="},args:[{type:"Symbol",symbol:"x"},{type:"Literal Value",value:3}]},result:{type:"Literal Value",value:"isThree"}},{type:"Cond-Option",condition:{type:"Literal Value",value:!1},result:{type:"Literal Value",value:"'()"}}]},{type:"Constant Definition",name:{type:"Symbol",symbol:"x"},value:{type:"Literal Value",value:42}},{type:"Struct Definition",binding:{type:"Symbol",symbol:"name"},properties:[{type:"Symbol",symbol:"firstName"},{type:"Symbol",symbol:"lastName"}]}];function k(t,r,e=!1){if(t.length===0)return[];let a=r.split("/"),c=a.shift();if(c=="")return t;let f=a.join("/"),m=[];if(c=="..")m=t.map(h=>h.parentElement).filter(h=>h);else if(c=="+")m=t.map(h=>h.nextElementSibling).filter(h=>h);else if(c.startsWith(".")){let h=c.slice(1);m=t.flatMap($=>Array.from($.children).filter(A=>A.classList.contains(h)))}else m=t.flatMap(h=>Array.from(h.children).filter($=>$.tagName==c.toUpperCase()));return m.length===0&&e&&console.error(`Error traversing ${r}: No element found`),k(m,f)}function F(t,r){if(t.tagName==r.toUpperCase())return t;{let e=t.parentElement;return e?F(e,r):(console.error("Could not find parent element with requested tag ",r),null)}}function J(t,r){if(t.classList.contains(r))return t;{let e=t.parentElement;return e?J(e,r):(console.error("Could not find parent element with requested class ",r),null)}}function Ie(t,r,e=!1,a="en"){Fe.includes(a)||(console.error(`
      Selected language "${a}" is not implemented, defaulting to "en".
      Available language codes: ${Fe.join(", ")}
    `),a="en"),r.innerHTML=Mt(t,e,a),e&&k([r],"ul/li/ul/li").map(c=>c.setAttribute("data-collapsed","false")),ee(r)}var Fe=["en","de"],Me={en:{"select production":"Select production","mark selected text as hole":"Mark selected text as hole"},de:{"select production":"Produktion ausw\xE4hlen","mark selected text as hole":"Auswahl als Loch markieren"}};function ee(t){let r=parseFloat(getComputedStyle(t).fontSize)*3;for(let e=1;;e++){let a=Array.from(t.getElementsByClassName(`hole-${e}`));if(a.length<1)return;a.map(c=>{let f=c,m=.5*(f.getBoundingClientRect().x+f.getBoundingClientRect().right);if(m==0)return;let h=F(f,"li");!h||k([h],`ul/.child-${e}/span`).map($=>{let A=$,d=.5*(A.getBoundingClientRect().x+A.getBoundingClientRect().right),u=m-d,S=-Math.atan2(r,u),B=Math.sqrt(u*u+r*r),w=u/2-B/2;A.style.cssText=`
          --connector-width: ${B}px;
          --connector-left: calc(50% + ${w}px);
          --edgetext-right: calc(50% - ${u/2}px);
          --connector-transform: rotate(${S}rad);
        `})})}}function Mt(t,r,e){let a=Jt(t);return`
    <ul class="tree ast">
      ${r?Re(a,e):ze(a)}
    </ul>
  `}function ze(t,r=-1){let e=Oe(t);return`
    <li class="${r>=0?`child-${r+1}`:""}"
        data-collapsed="${r>=0?"true":"false"}">
      <span class="${t.holes.length>0?"":"terminal-symbol"}">

        <div class="name">${se(t.production)}</div>

        ${je(e,t)}

      </span>
      ${t.holes.length>0?`<ul>${t.holes.map((a,c)=>ze(a.content,c)).join("")}</ul>`:""}
    </li>
  `}function Oe(t){let r=[],e=0;for(let a=0;a<t.holes.length;a++)t.holes[a].start>e&&r.push({pos:!1,start:e,end:t.holes[a].start}),r.push(we({pos:a+1},t.holes[a])),e=t.holes[a].end;return e<t.code.length&&r.push({pos:!1,start:e,end:t.code.length}),r}function je(t,r){return`
  <div class="code">${t.map(e=>`<span class="char ${e.pos?`hole hole-${e.pos}`:""}"
             ${e.pos?`onclick="toggleChild(event,${e.pos})"`:""}
             >${r.code.slice(e.start,e.end)}</span>`).join("")}
  </div>
  `}function zt(t,r){let e=t.target,a=F(e,"li"),c=F(e,"bsltree");if(!a||!c){console.error("toggleChild called from .hole not in li/bsltree");return}k([a],`ul/.child-${r}`).map(f=>{f.setAttribute("data-collapsed",f.getAttribute("data-collapsed")==="true"?"false":"true")}),ee(c)}window.toggleChild=zt;function se(t){return t.replaceAll("<","&lt;").replaceAll(">","&gt;")}function He(t){return t.replaceAll("&lt;","<").replaceAll("&gt;",">")}var Ot=["<program>","<def-or-expr>*","<def-or-expr>","<definition>","<e>","<e>*","{[ <e> <e> ]}+","[ <e> <e> ]","<name>*","<name>+","<name>","<v>"];function Re(t,r,e=-1){let a=Oe(t);return`
    <li class="${e>=0?`child-${e+1}`:""}"
        data-collapsed="${e>=0?"true":"false"}">
      <span class="${t.holes.length>0?"":"terminal-symbol"}"
            data-quiz-state="${e>=0?"production":"done"}"
            data-is-terminal="${t.holes.length<=0}"
            data-is-trivial-hole="${t.holes.length===1&&t.holes[0].start===0&&t.holes[0].end===t.code.length}">

        ${jt(t,r)}

        ${Rt(t,r)}

        <div class="name">
          ${se(t.production)}
        </div>
        ${je(a,t)}
      </span>
      ${t.holes.length>0?`<ul>${t.holes.map((c,f)=>Re(c.content,r,f)).join("")}</ul>`:""}
    </li>
  `}function jt(t,r){return`
  <div class="production">
    <select onchange="checkProduction(event, '${t.production}')">
      <option selected="true">${Me[r]["select production"]}</option>
      ${Ot.map(e=>`
          <option value="${e}">${se(e)}</option>
        `).join("")}
    </select>
  </div>
  `}function Ht(t,r){let e=t.target;if(e.value===r){let a=F(e,"span");if(a){a.getAttribute("data-is-terminal")==="true"?a.setAttribute("data-quiz-state","done"):a.getAttribute("data-is-trivial-hole")==="true"?(a.setAttribute("data-quiz-state","done"),k([a],"+/li",!0).map(f=>f.setAttribute("data-collapsed","false"))):a.setAttribute("data-quiz-state","hole-marking"),k([a],"../+").map(f=>f.setAttribute("data-collapsed","false"));let c=J(a,"tree");c&&ee(c)}}else{Array.from(e.selectedOptions).map(c=>c.remove());let a=F(e,"span");a&&(a.classList.add("wrong"),window.setTimeout(()=>{a.classList.remove("wrong")},100))}}window.checkProduction=Ht;function Rt(t,r){return`
  <div class="hole-marking"
       data-holes="${JSON.stringify(t.holes.map(e=>[e.start,e.end,!1]))}">
    <div class="textarea-container">
      <div class="marker-container">
        ${t.code.split(`
`).map(e=>e.split("").map(a=>`<span class="char marker">${a}</span>`).join("")).join('<span class="char marker"></span><br>')}
      </div>
      <textarea autocorrect="off"
                spellcheck="false"
                cols="${t.code.split(`
`).map(e=>e.length).reduce((e,a)=>e>a?e:a)}"
                rows="${t.code.split(`
`).length}"
                readonly="true">${t.code}</textarea>
    </div><br>
    <button onclick="checkSelection(event)">
      ${Me[r]["mark selected text as hole"]}
    </button>
  </div>
  `}function qt(t){let r=t.target,e=J(r,"hole-marking");if(!e){console.error("checkProduction called from el. not wrapped in div.hole-marking");return}let a=JSON.parse(e.getAttribute("data-holes")),c=e.getElementsByTagName("textarea")[0],f=c.selectionStart,m=c.selectionEnd,h=f<m?f:m,$=f<m?m:f,A=-1;if(a.map((d,u)=>{d[0]===h&&d[1]===$&&(d[2]=!0,A=u)}),A>=0)e.setAttribute("data-holes",JSON.stringify(a)),k([e],".textarea-container/.marker-container/.marker",!0).slice(h,$).map(d=>d.classList.add("correct"));else{let d=k([e],".textarea-container/.marker-container/.marker",!0).slice(h,$);d.map(u=>u.classList.add("wrong")),window.setTimeout(()=>{d.map(u=>u.classList.remove("wrong"))},100)}if(a.every(d=>d[2])){let d=F(e,"span");if(d){d.setAttribute("data-quiz-state","done"),k([d],"../ul/.child-1").map(S=>S.setAttribute("data-collapsed","false"));let u=J(d,"tree");u&&ee(u)}}}window.checkSelection=qt;function Jt(t){let r=t.map(oe),e=[],a="";for(let c=0;c<r.length;c++){c>0&&(a=`${a}
`);let f=a.length;a=`${a}${r[c]}`;let m=a.length;e.push({start:f,end:m})}return{production:"<program>",code:a,holes:[{start:0,end:a.length,content:{production:"<def-or-expr>*",code:a,holes:e.map((c,f)=>({start:c.start,end:c.end,content:Qt(t[f])}))}}]}}function Qt(t){let r=oe(t);return{production:"<def-or-expr>",code:r,holes:[{start:0,end:r.length,content:G(t)?Ut(t):j(t)}]}}function Ut(t){let r="",e=[];if(R(t)){r="(define (";let a=r.length;r=`${r}${L(t.name)}`,e.push({start:a,end:r.length,content:O(t.name)}),r=`${r} `,a=r.length,r=`${r}${t.args.map(L).join(" ")}`,e.push({start:a,end:r.length,content:Vt(t.args)}),r=`${r}) `,a=r.length,r=`${r}${C(t.body)}`,e.push({start:a,end:r.length,content:j(t.body)}),r=`${r})`}else if(q(t)){r="(define ";let a=r.length;r=`${r}${L(t.name)}`,e.push({start:a,end:r.length,content:O(t.name)}),r=`${r} `,a=r.length,r=`${r}${C(t.value)}`,e.push({start:a,end:r.length,content:j(t.value)}),r=`${r})`}else{r="(define-struct ";let a=r.length;r=`${r}${L(t.binding)}`,e.push({start:a,end:r.length,content:O(t.binding)}),r=`${r} (`,a=r.length,r=`${r}${t.properties.map(L).join(" ")}`,e.push({start:a,end:r.length,content:Wt(t.properties)}),r=`${r}))`}return{production:"<definition>",code:r,holes:e}}function j(t){let r="",e=[];if(K(t)){r="(";let a=r.length;r=`${r}${L(t.name)}`,e.push({start:a,end:r.length,content:O(t.name)}),r=`${r} `,a=r.length,r=`${r}${t.args.map(C).join(" ")}`,e.push({start:a,end:r.length,content:Gt(t.args)}),r=`${r})`}else if(X(t)){r="(cond ";let a=r.length;r=`${r}${t.options.map(Z).join(" ")}`,e.push({start:a,end:r.length,content:Kt(t.options)}),r=`${r})`}else Y(t)?(r=L(t),e.push({start:0,end:r.length,content:O(t)})):(r=C(t),e.push({start:0,end:r.length,content:Yt(t)}));return{production:"<e>",code:r,holes:e}}function O(t){return{production:"<name>",code:L(t),holes:[]}}function Vt(t){t.length<1&&console.error("<name>+ but used but names are empty");let r="",e=[];for(let a=0;a<t.length;a++){let c=r.length;r=`${r}${L(t[a])}`,e.push({start:c,end:r.length,content:O(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"<name>+",code:r,holes:e}}function Wt(t){let r="",e=[];for(let a=0;a<t.length;a++){let c=r.length;r=`${r}${L(t[a])}`,e.push({start:c,end:r.length,content:O(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"<name>*",code:r,holes:e}}function Gt(t){let r="",e=[];for(let a=0;a<t.length;a++){let c=r.length;r=`${r}${C(t[a])}`,e.push({start:c,end:r.length,content:j(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"<e>*",code:r,holes:e}}function Kt(t){let r="",e=[];for(let a=0;a<t.length;a++){let c=r.length;r=`${r}${Z(t[a])}`,e.push({start:c,end:r.length,content:Xt(t[a])}),a<t.length-1&&(r=`${r} `)}return{production:"{[ <e> <e> ]}+",code:r,holes:e}}function Xt(t){let r="",e=[];r=`${r}[`;let a=r.length;return r=`${r}${C(t.condition)}`,e.push({start:a,end:r.length,content:j(t.condition)}),r=`${r} `,a=r.length,r=`${r}${C(t.result)}`,e.push({start:a,end:r.length,content:j(t.result)}),r=`${r}]`,{production:"[ <e> <e> ]",code:r,holes:e}}function Yt(t){return{production:"<v>",code:C(t),holes:[]}}function ae(t,r,e){return e=e||" ",t.length>r?t:(r-=t.length,e+=e.repeat(r),t+e.slice(0,r))}var N=class extends Error{constructor(e,a,c,f){super();this.message=e,this.expected=a,this.found=c,this.location=f,this.name="SyntaxError",typeof Object.setPrototypeOf=="function"?Object.setPrototypeOf(this,N.prototype):this.__proto__=N.prototype,typeof Error.captureStackTrace=="function"&&Error.captureStackTrace(this,N)}static buildMessage(e,a){function c(d){return d.charCodeAt(0).toString(16).toUpperCase()}function f(d){return d.replace(/\\/g,"\\\\").replace(/"/g,'\\"').replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,u=>"\\x0"+c(u)).replace(/[\x10-\x1F\x7F-\x9F]/g,u=>"\\x"+c(u))}function m(d){return d.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,u=>"\\x0"+c(u)).replace(/[\x10-\x1F\x7F-\x9F]/g,u=>"\\x"+c(u))}function h(d){switch(d.type){case"literal":return'"'+f(d.text)+'"';case"class":let u=d.parts.map(S=>Array.isArray(S)?m(S[0])+"-"+m(S[1]):m(S));return"["+(d.inverted?"^":"")+u+"]";case"any":return"any character";case"end":return"end of input";case"other":return d.description}}function $(d){let u=d.map(h),S,B;if(u.sort(),u.length>0){for(S=1,B=1;S<u.length;S++)u[S-1]!==u[S]&&(u[B]=u[S],B++);u.length=B}switch(u.length){case 1:return u[0];case 2:return u[0]+" or "+u[1];default:return u.slice(0,-1).join(", ")+", or "+u[u.length-1]}}function A(d){return d?'"'+f(d)+'"':"end of input"}return"Expected "+$(e)+" but "+A(a)+" found."}format(e){let a="Error: "+this.message;if(this.location){let c=null,f;for(f=0;f<e.length;f++)if(e[f].source===this.location.source){c=e[f].text.split(/\r\n|\n|\r/g);break}let m=this.location.start,h=this.location.source+":"+m.line+":"+m.column;if(c){let $=this.location.end,A=ae("",m.line.toString().length," "),d=c[m.line-1],u=m.line===$.line?$.column:d.length+1;a+=`
 --> `+h+`
`+A+` |
`+m.line+" | "+d+`
`+A+" | "+ae("",m.column-1," ")+ae("",u-m.column,"^")}else a+=`
 at `+h}return a}};function en(t,r){r=r!==void 0?r:{};let e={},a=r.grammarSource,c={Program:ve},f=ve,m=function(n){return n},h=/^[\t \n \r]/,$=W(["	"," ",`
`," ","\r"],!1,!1),A=function(n){return n},d="(define-struct",u=v("(define-struct",!1),S="(",B=v("(",!1),w=")",I=v(")",!1),Ue=function(n,s){return{type:"Struct Definition",binding:n,properties:s}},Q="(define",le=v("(define",!1),Ve=function(n,s,i){return{type:"Function Definition",name:n,args:s,body:i}},We=function(n,s){return{type:"Constant Definition",name:n,value:s}},Ge=function(n){return n},ce="(cond",Ke=v("(cond",!1),Xe=function(n){return{type:"Cond-Expression",options:n}},Ye="[",Ze=v("[",!1),et="]",tt=v("]",!1),nt=function(n,s){return{type:"Cond-Option",condition:n,result:s}},rt=function(n,s){return{type:"Function Call",name:n,args:s}},pe="define",ot=v("define",!1),ue=/^[^",'`()[\]{}|#\n\t\r0-9 ]/,fe=W(['"',",","'","`","(",")","[","]","{","}","|","#",`
`,"	","\r",["0","9"]," "],!0,!1),st=function(n){return{type:"Symbol",symbol:n.join("")}},at=function(n){return{type:"Literal Value",value:n}},de=/^[0-9]/,ge=W([["0","9"]],!1,!1),it=function(){return parseInt(bt(),10)},me="#true",lt=v("#true",!1),ye="#false",ct=v("#false",!1),he="#t",pt=v("#t",!1),be="#f",ut=v("#f",!1),ft=function(n){return n==="#true"||n==="#t"},$e="'()",dt=v("'()",!1),gt=function(){return"'()"},Se='"',xe=v('"',!1),Le=/^[^"]/,Ae=W(['"'],!0,!1),mt=function(n){return n.join("")},yt=Te("whitespace"),ht=function(){},o=0,b=0,U=[{line:1,column:1}],_=0,te=[],g=0,V;if(r.startRule!==void 0){if(!(r.startRule in c))throw new Error(`Can't start parsing from rule "`+r.startRule+'".');f=c[r.startRule]}function bt(){return t.substring(b,o)}function sn(){return H(b,o)}function an(n,s){throw s=s!==void 0?s:H(b,o),Ce([Te(n)],t.substring(b,o),s)}function ln(n,s){throw s=s!==void 0?s:H(b,o),St(n,s)}function v(n,s){return{type:"literal",text:n,ignoreCase:s}}function W(n,s,i){return{type:"class",parts:n,inverted:s,ignoreCase:i}}function cn(){return{type:"any"}}function $t(){return{type:"end"}}function Te(n){return{type:"other",description:n}}function Ee(n){let s=U[n],i;if(s)return s;for(i=n-1;!U[i];)i--;for(s=U[i],s={line:s.line,column:s.column};i<n;)t.charCodeAt(i)===10?(s.line++,s.column=1):s.column++,i++;return U[n]=s,s}function H(n,s){let i=Ee(n),l=Ee(s);return{source:a,start:{offset:n,line:i.line,column:i.column},end:{offset:s,line:l.line,column:l.column}}}function y(n){o<_||(o>_&&(_=o,te=[]),te.push(n))}function St(n,s){return new N(n,[],"",s)}function Ce(n,s,i){return new N(N.buildMessage(n,s),n,s,i)}function ve(){let n,s,i;if(n=o,s=[],i=Be(),i!==e)for(;i!==e;)s.push(i),i=Be();else s=e;return s!==e&&(b=n,s=m(s)),n=s,n}function Be(){let n,s,i,l;if(n=o,s=xt(),s===e&&(s=M()),s!==e){if(i=[],h.test(t.charAt(o))?(l=t.charAt(o),o++):(l=e,g===0&&y($)),l!==e)for(;l!==e;)i.push(l),h.test(t.charAt(o))?(l=t.charAt(o),o++):(l=e,g===0&&y($));else i=e;i!==e?(b=n,s=m(s),n=s):(o=n,n=e)}else o=n,n=e;return n}function xt(){let n,s,i;return n=o,s=T(),s!==e?(i=Lt(),i===e&&(i=At(),i===e&&(i=Tt())),i!==e?(b=n,s=A(i),n=s):(o=n,n=e)):(o=n,n=e),n}function Lt(){let n,s,i,l,p,P,x,E,z;if(n=o,t.substr(o,14)===d?(s=d,o+=14):(s=e,g===0&&y(u)),s!==e)if(i=D(),i!==e)if(l=T(),l!==e)if(t.charCodeAt(o)===40?(p=S,o++):(p=e,g===0&&y(B)),p!==e){if(P=[],x=D(),x!==e)for(;x!==e;)P.push(x),x=D();else P=e;P!==e?(t.charCodeAt(o)===41?(x=w,o++):(x=e,g===0&&y(I)),x!==e?(E=T(),E!==e?(t.charCodeAt(o)===41?(z=w,o++):(z=e,g===0&&y(I)),z!==e?(b=n,s=Ue(i,P),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;else o=n,n=e;else o=n,n=e;return n}function At(){let n,s,i,l,p,P,x,E,z,ne;if(n=o,t.substr(o,7)===Q?(s=Q,o+=7):(s=e,g===0&&y(le)),s!==e)if(i=T(),i!==e)if(t.charCodeAt(o)===40?(l=S,o++):(l=e,g===0&&y(B)),l!==e)if(p=D(),p!==e)if(P=T(),P!==e){if(x=[],E=D(),E!==e)for(;E!==e;)x.push(E),E=D();else x=e;x!==e?(t.charCodeAt(o)===41?(E=w,o++):(E=e,g===0&&y(I)),E!==e?(z=M(),z!==e?(t.charCodeAt(o)===41?(ne=w,o++):(ne=e,g===0&&y(I)),ne!==e?(b=n,s=Ve(p,x,z),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;else o=n,n=e;else o=n,n=e;else o=n,n=e;return n}function Tt(){let n,s,i,l,p;return n=o,t.substr(o,7)===Q?(s=Q,o+=7):(s=e,g===0&&y(le)),s!==e?(i=D(),i!==e?(l=M(),l!==e?(t.charCodeAt(o)===41?(p=w,o++):(p=e,g===0&&y(I)),p!==e?(b=n,s=We(i,l),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e),n}function M(){let n,s,i;return n=o,s=T(),s!==e?(i=Et(),i===e&&(i=Ct(),i===e&&(i=D(),i===e&&(i=vt()))),i!==e?(b=n,s=Ge(i),n=s):(o=n,n=e)):(o=n,n=e),n}function Et(){let n,s,i,l,p;if(n=o,t.substr(o,5)===ce?(s=ce,o+=5):(s=e,g===0&&y(Ke)),s!==e){if(i=[],l=Pe(),l!==e)for(;l!==e;)i.push(l),l=Pe();else i=e;i!==e?(l=T(),l!==e?(t.charCodeAt(o)===41?(p=w,o++):(p=e,g===0&&y(I)),p!==e?(b=n,s=Xe(i),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;return n}function Pe(){let n,s,i,l,p,P,x,E;return n=o,s=T(),s!==e?(t.charCodeAt(o)===91?(i=Ye,o++):(i=e,g===0&&y(Ze)),i!==e?(l=T(),l!==e?(p=M(),p!==e?(P=T(),P!==e?(x=M(),x!==e?(t.charCodeAt(o)===93?(E=et,o++):(E=e,g===0&&y(tt)),E!==e?(b=n,s=nt(p,x),n=s):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e)):(o=n,n=e),n}function Ct(){let n,s,i,l,p;if(n=o,t.charCodeAt(o)===40?(s=S,o++):(s=e,g===0&&y(B)),s!==e)if(i=D(),i!==e){for(l=[],p=M();p!==e;)l.push(p),p=M();l!==e?(t.charCodeAt(o)===41?(p=w,o++):(p=e,g===0&&y(I)),p!==e?(b=n,s=rt(i,l),n=s):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;return n}function D(){let n,s,i,l,p;if(n=o,s=T(),s!==e)if(i=o,g++,t.substr(o,6)===pe?(l=pe,o+=6):(l=e,g===0&&y(ot)),g--,l===e?i=void 0:(o=i,i=e),i!==e){if(l=[],ue.test(t.charAt(o))?(p=t.charAt(o),o++):(p=e,g===0&&y(fe)),p!==e)for(;p!==e;)l.push(p),ue.test(t.charAt(o))?(p=t.charAt(o),o++):(p=e,g===0&&y(fe));else l=e;l!==e?(b=n,s=st(l),n=s):(o=n,n=e)}else o=n,n=e;else o=n,n=e;return n}function vt(){let n,s;return n=o,s=Bt(),s===e&&(s=Pt(),s===e&&(s=_t(),s===e&&(s=kt()))),s!==e&&(b=n,s=at(s)),n=s,n}function Bt(){let n,s,i,l;if(n=o,s=T(),s!==e){if(i=[],de.test(t.charAt(o))?(l=t.charAt(o),o++):(l=e,g===0&&y(ge)),l!==e)for(;l!==e;)i.push(l),de.test(t.charAt(o))?(l=t.charAt(o),o++):(l=e,g===0&&y(ge));else i=e;i!==e?(b=n,s=it(),n=s):(o=n,n=e)}else o=n,n=e;return n}function Pt(){let n,s,i;return n=o,s=T(),s!==e?(t.substr(o,5)===me?(i=me,o+=5):(i=e,g===0&&y(lt)),i===e&&(t.substr(o,6)===ye?(i=ye,o+=6):(i=e,g===0&&y(ct)),i===e&&(t.substr(o,2)===he?(i=he,o+=2):(i=e,g===0&&y(pt)),i===e&&(t.substr(o,2)===be?(i=be,o+=2):(i=e,g===0&&y(ut))))),i!==e?(b=n,s=ft(i),n=s):(o=n,n=e)):(o=n,n=e),n}function _t(){let n,s,i;return n=o,s=T(),s!==e?(t.substr(o,3)===$e?(i=$e,o+=3):(i=e,g===0&&y(dt)),i!==e?(b=n,s=gt(),n=s):(o=n,n=e)):(o=n,n=e),n}function kt(){let n,s,i,l,p;if(n=o,s=T(),s!==e)if(t.charCodeAt(o)===34?(i=Se,o++):(i=e,g===0&&y(xe)),i!==e){if(l=[],Le.test(t.charAt(o))?(p=t.charAt(o),o++):(p=e,g===0&&y(Ae)),p!==e)for(;p!==e;)l.push(p),Le.test(t.charAt(o))?(p=t.charAt(o),o++):(p=e,g===0&&y(Ae));else l=e;l!==e?(t.charCodeAt(o)===34?(p=Se,o++):(p=e,g===0&&y(xe)),p!==e?(b=n,s=mt(l),n=s):(o=n,n=e)):(o=n,n=e)}else o=n,n=e;else o=n,n=e;return n}function T(){let n,s,i;for(g++,n=o,s=[],h.test(t.charAt(o))?(i=t.charAt(o),o++):(i=e,g===0&&y($));i!==e;)s.push(i),h.test(t.charAt(o))?(i=t.charAt(o),o++):(i=e,g===0&&y($));return s!==e&&(b=n,s=ht()),n=s,g--,n===e&&(s=e,g===0&&y(yt)),n}if(V=f(),V!==e&&o===t.length)return V;throw V!==e&&o<t.length&&y($t()),Ce(te,_<t.length?t.charAt(_):null,_<t.length?H(_,_+1):H(_,_))}var qe=en;var Je=`/* ######## color variables ###### */
.tree {
  --branch-color: #666;
  --node-background: #ebf0f4; /* racket azure */
  --text-grey: #444; /* like in scribble */
  --hole-yellow: #fdf68d; /* pale yellow */
  --highlight-border-connectors: lime;
  --wrong-background: red;
  --correct-background: lime;
  --hole-selection-background: white;
}
/*
CSS for tree by Ross Angus
https://www.cssscript.com/clean-tree-diagram/
(Edited and extended)
*/

/* ###### node layout ######## */
.tree,
.tree ul,
.tree li {
    list-style: none;
    margin: 0;
    padding: 0;
    position: relative;
    white-space: nowrap;
}

.tree {
    margin: 0 0 1em;
    text-align: center;
}

.tree,
.tree ul {
    display: table;
}

.tree ul {
    width: 100%;
}

.tree li {
    display: table-cell;
    padding: 0;
    padding-top: 1.5em;
    vertical-align: top;
}

.tree code,
.tree span {
    border: solid .1em var(--branch-color);
    border-radius: .2em;
    display: inline-block;
    margin-left: 1em;
    margin-right: 1em;
    margin-top: 1.5em;
    padding: .2em .5em;
    position: relative;
    box-sizing: border-box;
}

/* ########### custom AST node  styles ######## */
.tree span {
  font-family: 'Fira-Mono', monospace;
  background-color: var(--node-background);
  transition: 1s background-color ease-out;
}
.tree .name {
  color: var(--text-grey);
  font-style: italic;
  font-size: 0.85em;
  text-align: right;

  position: absolute;
  top: calc(-0.85em - 1.5em);
  right: var(--edgetext-right, 50%); /* to be set dynamically */
  margin-right: -1.5em;
  background-color: rgba(255,255,255,0.7);
}
.tree .terminal-symbol {
  border-width: .2em;
  border-style: double;
}

/* ###### connectors ########### */
/* part above box */
.tree span:before {
    outline: solid 1px var(--branch-color);
    content: "";
    width: var(--connector-width, 0px); /* to be set dynamically */
    left: var(--connector-left, 50%); /* to be set dynamically */
    position: absolute;
    top: -1.5em;
    transform: var(--connector-transform); /* to be set dynamically */
}
.tree span.terminal-symbol:before {
  top: calc(-1.5em - .2em);
}

/* ####### highlight way back up from a node ###### */
/* .tree li:hover > span {
  border-color: var(--highlight-border-connectors);
}
.tree li:hover::before {
  border-color: var(--highlight-border-connectors);
  z-index: 1000;
}
.tree li:hover > span::before {
  outline-color: var(--highlight-border-connectors);
} */

/* ######## hide connectors over root ######## */
.tree>li:before,
.tree>li:after,
.tree>li>code:before,
.tree>li>span:before {
    outline: none !important;
    border: none !important;
}
.tree>li {
    margin-top: 0;
}

/* ####### collapse nodes ######## */
/* click on span to hide/show */
.tree .hole:hover {
  cursor: pointer;
}

.tree [data-collapsed="true"] {
  display: none;
}

/* ######### holes ########## */
.tree .char {
  display: inline;
  margin: 0;
  border: none;
  padding: 0;
  border-radius: 0;
  background-color: transparent;
  transition: background-color 1s ease-out;
}
.tree .char::before {
  display: none;
}

.tree .hole {
  display: inline-block;
  background-color: var(--hole-yellow);
  border: 1px solid var(--text-grey);
  color: var(--text-grey);
  padding-left: 0.25em;
  padding-right: 0.25em;
  position: relative;
}

/* ########### quiz ########## */

/* quiz stages */
.tree span[data-quiz-state="production"] .name,
.tree span[data-quiz-state="production"] .code,
.tree span[data-quiz-state="production"] .hole-marking {
  display: none;
}

.tree span[data-quiz-state="hole-marking"] .name,
.tree span[data-quiz-state="hole-marking"] .code,
.tree span[data-quiz-state="hole-marking"] .production {
  display: none;
}

.tree span[data-quiz-state="done"] .production,
.tree span[data-quiz-state="done"] .hole-marking {
  display: none;
}

/* highlighting text by putting a div behind a textarea */
.tree textarea,
.tree .marker-container {
  font-family: inherit;
  resize: none;
  font-size: calc(1em);
  padding: 2px;
  margin: .2em;
  border: none;
  box-sizing: border-box;
}

.tree .textarea-container {
  position: relative;
  display: inline-block;
}
.tree textarea {
  position: relative;
  background-color: transparent;
  z-index: 2;
}
.tree .marker-container {
  text-align: left;
  background-color: var(--hole-selection-background);
  position: absolute;
  top: 0;
  left: 0;
  z-index: 1;
}
.tree .marker {
  color: transparent;
  background-color: transparent;
  transition: 1s background-color ease-out;
}

/* feedback for wrong answer */
.tree .wrong {
  background-color: var(--wrong-background);
  transition: none;
}
.tree .correct {
  background-color: var(--correct-background);
  transition: none;
}
`;var Qe=`/* css for errors */
.error-wrapper{
    display:flex;
    flex-direction:column;
    margin:2vw;
    font-size:inherit;
}

.error{
    font-size:1.2em;
}
`;var ie=document.createElement("style");ie.innerHTML=Je;ie.innerHTML+=Qe;document.getElementsByTagName("head")[0].appendChild(ie);function rn(){Array.from(document.getElementsByTagName("bsltree")).map(t=>{try{let r=qe(He(t.innerHTML)),e=t.getAttribute("quiz")==="true",a=t.getAttribute("lang")?t.getAttribute("lang"):void 0;Ie(r,t,e,a)}catch(r){on(t,`${r.location.start.line}:${r.location.start.column} ${r}`)}})}window.onload=()=>{rn()};function on(t,r){let e=t.innerHTML;t.innerHTML="";let a=document.createElement("div");a.classList.add("error-wrapper"),t.appendChild(a);let c=`<p> BSL-Tree could not be parsed! </p>
                  <p> Input: <b style="font-size:0.9em;">${e}</b> </p>`,f=document.createElement("div");f.classList.add("origin"),f.innerHTML=c,a.appendChild(f);let m=document.createElement("pre");m.classList.add("error");let h=document.createElement("code");h.textContent=r,a.appendChild(m),m.appendChild(h)}})();
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL0JTTF9BU1QudHMiLCAiLi4vc3JjL0JTTF9QcmludC50cyIsICIuLi9zcmMvRE9NX0hlbHBlcnMudHMiLCAiLi4vc3JjL0JTTF9UcmVlLnRzIiwgIi4uL3NyYy9CU0xfUGFyc2VyLnRzIiwgIi4uL3NyYy9ic2xfdG9vbHMudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImV4cG9ydCBlbnVtIFByb2R1Y3Rpb24ge1xuICBGdW5jdGlvbkRlZmluaXRpb24gPSAnRnVuY3Rpb24gRGVmaW5pdGlvbicsXG4gIENvbnN0YW50RGVmaW5pdGlvbiA9ICdDb25zdGFudCBEZWZpbml0aW9uJyxcbiAgU3RydWN0RGVmaW5pdGlvbiA9ICdTdHJ1Y3QgRGVmaW5pdGlvbicsXG4gIEZ1bmN0aW9uQ2FsbCA9ICdGdW5jdGlvbiBDYWxsJyxcbiAgQ29uZEV4cHJlc3Npb24gPSAnQ29uZC1FeHByZXNzaW9uJyxcbiAgQ29uZE9wdGlvbiA9ICdDb25kLU9wdGlvbicsXG4gIFN5bWJvbCA9ICdTeW1ib2wnLFxuICBMaXRlcmFsID0gJ0xpdGVyYWwgVmFsdWUnXG59XG5cbmV4cG9ydCB0eXBlIHByb2dyYW0gPSBkZWZPckV4cHJbXTtcblxuZXhwb3J0IHR5cGUgZGVmT3JFeHByID0gZGVmaW5pdGlvbiB8IGV4cHI7XG5leHBvcnQgdHlwZSBkZWZpbml0aW9uID0gRnVuRGVmIHwgQ29uc3REZWYgfCBTdHJ1Y3REZWY7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRnVuRGVme1xuICAgIHR5cGU6IFByb2R1Y3Rpb24uRnVuY3Rpb25EZWZpbml0aW9uO1xuICAgIG5hbWU6IE5hbWU7XG4gICAgYXJnczogTmFtZVtdO1xuICAgIGJvZHk6IGV4cHI7XG59XG5leHBvcnQgaW50ZXJmYWNlIENvbnN0RGVme1xuICAgIHR5cGU6IFByb2R1Y3Rpb24uQ29uc3RhbnREZWZpbml0aW9uO1xuICAgIG5hbWU6IE5hbWU7XG4gICAgdmFsdWU6IGV4cHI7XG59XG5leHBvcnQgaW50ZXJmYWNlIFN0cnVjdERlZntcbiAgICB0eXBlOiBQcm9kdWN0aW9uLlN0cnVjdERlZmluaXRpb247XG4gICAgYmluZGluZzogTmFtZTtcbiAgICBwcm9wZXJ0aWVzOiBOYW1lW107XG59O1xuZXhwb3J0IHR5cGUgZXhwciA9IENhbGwgfCBDb25kIHwgTmFtZSB8IExpdGVyYWw7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FsbHtcbiAgICB0eXBlOiBQcm9kdWN0aW9uLkZ1bmN0aW9uQ2FsbDtcbiAgICBuYW1lOiBOYW1lO1xuICAgIGFyZ3M6IGV4cHJbXTtcbn07XG5leHBvcnQgaW50ZXJmYWNlIENsYXVzZXtcbiAgICB0eXBlOiBQcm9kdWN0aW9uLkNvbmRPcHRpb24sXG4gICAgY29uZGl0aW9uOiBleHByO1xuICAgIHJlc3VsdDogZXhwcjtcbn1cbmV4cG9ydCBpbnRlcmZhY2UgQ29uZHtcbiAgICB0eXBlOiBQcm9kdWN0aW9uLkNvbmRFeHByZXNzaW9uO1xuICAgIG9wdGlvbnM6IENsYXVzZVtdXG59XG5leHBvcnQgaW50ZXJmYWNlIE5hbWV7XG4gICAgdHlwZTogUHJvZHVjdGlvbi5TeW1ib2w7XG4gICAgc3ltYm9sOnN0cmluZztcbn07XG5leHBvcnQgaW50ZXJmYWNlIExpdGVyYWwge1xuICAgIHR5cGU6IFByb2R1Y3Rpb24uTGl0ZXJhbCxcbiAgICB2YWx1ZTogYm9vbGVhbiB8IHN0cmluZyB8IG51bWJlciB8IGAnKClgO1xufVxuXG4vLyBydW50aW1lIHR5cGUgY2hlY2tpbmdcbmV4cG9ydCBmdW5jdGlvbiBpc0RlZmluaXRpb24ob2JqOiBhbnkpOiBvYmogaXMgZGVmaW5pdGlvbiB7XG4gIHJldHVybiBpc0Z1bkRlZihvYmopIHx8IGlzQ29uc3REZWYob2JqKSB8fCBpc1N0cnVjdERlZihvYmopO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzRnVuRGVmKG9iajogYW55KTogb2JqIGlzIEZ1bkRlZiB7XG4gIHJldHVybiBvYmoudHlwZSA9PT0gUHJvZHVjdGlvbi5GdW5jdGlvbkRlZmluaXRpb247XG59XG5leHBvcnQgZnVuY3Rpb24gaXNDb25zdERlZihvYmo6IGFueSk6IG9iaiBpcyBDb25zdERlZiB7XG4gIHJldHVybiBvYmoudHlwZSA9PT0gUHJvZHVjdGlvbi5Db25zdGFudERlZmluaXRpb247XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTdHJ1Y3REZWYob2JqOiBhbnkpOiBvYmogaXMgU3RydWN0RGVmIHtcbiAgcmV0dXJuIG9iai50eXBlID09PSBQcm9kdWN0aW9uLlN0cnVjdERlZmluaXRpb247XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0V4cHIob2JqOiBhbnkpOiBvYmogaXMgZXhwciB7XG4gIHJldHVybiBpc0NhbGwob2JqKSB8fCBpc0NvbmQob2JqKSB8fCBpc05hbWUob2JqKSB8fCBpc0xpdGVyYWwob2JqKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0NhbGwob2JqOiBhbnkpOiBvYmogaXMgQ2FsbCB7XG4gIHJldHVybiBvYmoudHlwZSA9PT0gUHJvZHVjdGlvbi5GdW5jdGlvbkNhbGw7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNDb25kKG9iajogYW55KTogb2JqIGlzIENvbmQge1xuICByZXR1cm4gb2JqLnR5cGUgPT09IFByb2R1Y3Rpb24uQ29uZEV4cHJlc3Npb247XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOYW1lKG9iajogYW55KTogb2JqIGlzIE5hbWUge1xuICByZXR1cm4gb2JqLnR5cGUgPT09IFByb2R1Y3Rpb24uU3ltYm9sO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzTGl0ZXJhbChvYmo6IGFueSk6IG9iaiBpcyBMaXRlcmFsIHtcbiAgcmV0dXJuIG9iai50eXBlID09PSBQcm9kdWN0aW9uLkxpdGVyYWw7XG59XG4iLCAiaW1wb3J0ICogYXMgQlNMX0FTVCBmcm9tIFwiLi9CU0xfQVNUXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcHJpbnQocDogQlNMX0FTVC5wcm9ncmFtKTogc3RyaW5nIHtcbiAgcmV0dXJuIHAubWFwKHByaW50RGVmT3JFeHByKS5qb2luKCdcXG4nKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcmludERlZk9yRXhwcihlb2Q6IEJTTF9BU1QuZGVmT3JFeHByKSB7XG4gIGlmKEJTTF9BU1QuaXNEZWZpbml0aW9uKGVvZCkpIHtcbiAgICByZXR1cm4gcHJpbnREZWZpbml0aW9uKGVvZCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHByaW50RShlb2QpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpbnREZWZpbml0aW9uKGQ6IEJTTF9BU1QuZGVmaW5pdGlvbikge1xuICBpZihCU0xfQVNULmlzRnVuRGVmKGQpKSB7XG4gICAgcmV0dXJuIGAoZGVmaW5lICgke3ByaW50TmFtZShkLm5hbWUpfSAke2QuYXJncy5tYXAocHJpbnROYW1lKS5qb2luKCcgJyl9KSAke3ByaW50RShkLmJvZHkpfSlgO1xuICB9IGVsc2UgaWYoQlNMX0FTVC5pc0NvbnN0RGVmKGQpKSB7XG4gICAgcmV0dXJuIGAoZGVmaW5lICR7cHJpbnROYW1lKGQubmFtZSl9ICR7cHJpbnRFKGQudmFsdWUpfSlgO1xuICB9IGVsc2UgaWYoQlNMX0FTVC5pc1N0cnVjdERlZihkKSkge1xuICAgIHJldHVybiBgKGRlZmluZS1zdHJ1Y3QgJHtwcmludE5hbWUoZC5iaW5kaW5nKX0gKCR7ZC5wcm9wZXJ0aWVzLm1hcChwcmludE5hbWUpLmpvaW4oJyAnKX0pKWBcbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIGlucHV0IHRvIHByaW50RGVmaW5pdGlvbicpO1xuICB9XG59XG5leHBvcnQgZnVuY3Rpb24gcHJpbnRFKGU6IEJTTF9BU1QuZXhwcik6IHN0cmluZyB7XG4gIGlmKEJTTF9BU1QuaXNDYWxsKGUpKSB7XG4gICAgcmV0dXJuIGAoJHtwcmludE5hbWUoZS5uYW1lKX0gJHtlLmFyZ3MubWFwKHByaW50RSkuam9pbignICcpfSlgO1xuICB9IGVsc2UgaWYoQlNMX0FTVC5pc0NvbmQoZSkpIHtcbiAgICByZXR1cm4gYChjb25kICR7ZS5vcHRpb25zLm1hcChwcmludE9wdGlvbikuam9pbignICcpfSlgO1xuICB9IGVsc2UgaWYoQlNMX0FTVC5pc05hbWUoZSkpIHtcbiAgICByZXR1cm4gcHJpbnROYW1lKGUpO1xuICB9IGVsc2UgaWYoQlNMX0FTVC5pc0xpdGVyYWwoZSkpIHtcbiAgICBpZih0eXBlb2YoZS52YWx1ZSkgPT09ICdzdHJpbmcnICYmIGUudmFsdWUgIT09IGAnKClgKSB7XG4gICAgICByZXR1cm4gYFwiJHtlLnZhbHVlfVwiYDtcbiAgICB9IGVsc2UgaWYodHlwZW9mKGUudmFsdWUpID09PSAnYm9vbGVhbicpIHtcbiAgICAgIHJldHVybiBlLnZhbHVlID8gJyN0cnVlJyA6ICcjZmFsc2UnO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYCR7ZS52YWx1ZX1gO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIGlucHV0IHRvIHByaW50RScpO1xuICAgIHJldHVybiBgPCR7ZX0+YDtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRPcHRpb24obzogQlNMX0FTVC5DbGF1c2UpIHtcbiAgcmV0dXJuIGBbJHtwcmludEUoby5jb25kaXRpb24pfSAke3ByaW50RShvLnJlc3VsdCl9XWA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmludE5hbWUoczogQlNMX0FTVC5OYW1lKTogc3RyaW5nIHtcbiAgcmV0dXJuIHMuc3ltYm9sO1xufVxuXG5leHBvcnQgY29uc3QgdGVzdHByb2dyYW06IEJTTF9BU1QucHJvZ3JhbSA9IFtcbiAge1xuICAgIHR5cGU6IEJTTF9BU1QuUHJvZHVjdGlvbi5GdW5jdGlvbkRlZmluaXRpb24sXG4gICAgbmFtZToge1xuICAgICAgdHlwZTogQlNMX0FTVC5Qcm9kdWN0aW9uLlN5bWJvbCxcbiAgICAgIHN5bWJvbDogJ2YnXG4gICAgfSxcbiAgICBhcmdzOiBbe1xuICAgICAgdHlwZTogQlNMX0FTVC5Qcm9kdWN0aW9uLlN5bWJvbCxcbiAgICAgIHN5bWJvbDogJ3gnXG4gICAgfSwge1xuICAgICAgdHlwZTogQlNMX0FTVC5Qcm9kdWN0aW9uLlN5bWJvbCxcbiAgICAgIHN5bWJvbDogJ3knXG4gICAgfV0sXG4gICAgYm9keToge1xuICAgICAgdHlwZTogQlNMX0FTVC5Qcm9kdWN0aW9uLkZ1bmN0aW9uQ2FsbCxcbiAgICAgIG5hbWU6IHtcbiAgICAgICAgdHlwZTogQlNMX0FTVC5Qcm9kdWN0aW9uLlN5bWJvbCxcbiAgICAgICAgc3ltYm9sOiAnKydcbiAgICAgIH0sXG4gICAgICBhcmdzOiBbe1xuICAgICAgICB0eXBlOiBCU0xfQVNULlByb2R1Y3Rpb24uU3ltYm9sLFxuICAgICAgICBzeW1ib2w6ICd4J1xuICAgICAgfSwge1xuICAgICAgICB0eXBlOiBCU0xfQVNULlByb2R1Y3Rpb24uU3ltYm9sLFxuICAgICAgICBzeW1ib2w6ICd5J1xuICAgICAgfV19XG4gIH0sXG4gIHtcbiAgICB0eXBlOiBCU0xfQVNULlByb2R1Y3Rpb24uQ29uZEV4cHJlc3Npb24sXG4gICAgb3B0aW9uczogW1xuICAgICAge1xuICAgICAgICB0eXBlOiBCU0xfQVNULlByb2R1Y3Rpb24uQ29uZE9wdGlvbixcbiAgICAgICAgY29uZGl0aW9uOiB7XG4gICAgICAgICAgdHlwZTogQlNMX0FTVC5Qcm9kdWN0aW9uLkZ1bmN0aW9uQ2FsbCxcbiAgICAgICAgICBuYW1lOiB7XG4gICAgICAgICAgICB0eXBlOiBCU0xfQVNULlByb2R1Y3Rpb24uU3ltYm9sLFxuICAgICAgICAgICAgc3ltYm9sOiAnPSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGFyZ3M6IFt7XG4gICAgICAgICAgICB0eXBlOiBCU0xfQVNULlByb2R1Y3Rpb24uU3ltYm9sLFxuICAgICAgICAgICAgc3ltYm9sOiAneCdcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IEJTTF9BU1QuUHJvZHVjdGlvbi5MaXRlcmFsLFxuICAgICAgICAgICAgdmFsdWU6IDNcbiAgICAgICAgICB9XVxuICAgICAgICB9LFxuICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICB0eXBlOiBCU0xfQVNULlByb2R1Y3Rpb24uTGl0ZXJhbCxcbiAgICAgICAgICB2YWx1ZTogJ2lzVGhyZWUnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6IEJTTF9BU1QuUHJvZHVjdGlvbi5Db25kT3B0aW9uLFxuICAgICAgICBjb25kaXRpb246IHtcbiAgICAgICAgICB0eXBlOiBCU0xfQVNULlByb2R1Y3Rpb24uTGl0ZXJhbCxcbiAgICAgICAgICB2YWx1ZTogZmFsc2VcbiAgICAgICAgfSxcbiAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgdHlwZTogQlNMX0FTVC5Qcm9kdWN0aW9uLkxpdGVyYWwsXG4gICAgICAgICAgdmFsdWU6IGAnKClgXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICBdXG4gIH0sXG4gIHtcbiAgICB0eXBlOiBCU0xfQVNULlByb2R1Y3Rpb24uQ29uc3RhbnREZWZpbml0aW9uLFxuICAgIG5hbWU6IHtcbiAgICAgIHR5cGU6IEJTTF9BU1QuUHJvZHVjdGlvbi5TeW1ib2wsXG4gICAgICBzeW1ib2w6ICd4J1xuICAgIH0sXG4gICAgdmFsdWU6IHtcbiAgICAgIHR5cGU6IEJTTF9BU1QuUHJvZHVjdGlvbi5MaXRlcmFsLFxuICAgICAgdmFsdWU6IDQyXG4gICAgfVxuICB9LFxuICB7XG4gICAgdHlwZTogQlNMX0FTVC5Qcm9kdWN0aW9uLlN0cnVjdERlZmluaXRpb24sXG4gICAgYmluZGluZzoge1xuICAgICAgdHlwZTogQlNMX0FTVC5Qcm9kdWN0aW9uLlN5bWJvbCxcbiAgICAgIHN5bWJvbDogJ25hbWUnXG4gICAgfSxcbiAgICBwcm9wZXJ0aWVzOiBbXG4gICAgICB7XG4gICAgICAgIHR5cGU6IEJTTF9BU1QuUHJvZHVjdGlvbi5TeW1ib2wsXG4gICAgICAgIHN5bWJvbDogJ2ZpcnN0TmFtZSdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHR5cGU6IEJTTF9BU1QuUHJvZHVjdGlvbi5TeW1ib2wsXG4gICAgICAgIHN5bWJvbDogJ2xhc3ROYW1lJ1xuICAgICAgfVxuICAgIF1cbiAgfVxuXTtcbiIsICIvLyBuYXZpZ2F0ZSB0aGUgRE9NIHVzaW5nIHBhdGggbm90YXRpb25cbi8vIC4uIC0+IHBhcmVudFxuLy8gKyAgLT4gbmV4dCBzaWJsaW5nXG4vLyAuY2xhc3MgLT4gYWxsIGNoaWxkcmVuIHdpdGggYSBjbGFzc1xuLy8gdGFnIC0+IGFsbCBjaGlsZHJlbiBvZiBhIGNlcnRhaW4gdGFnXG4vLyBkaXZpZGVkIGJ5IC9cbmV4cG9ydCBmdW5jdGlvbiBuYXZpZ2F0ZURPTShwb3NpdGlvbnM6IEhUTUxFbGVtZW50W10sIHBhdGg6IHN0cmluZywgc3RyaWN0OiBib29sZWFuID0gZmFsc2UpOiBIVE1MRWxlbWVudFtdIHtcbiAgaWYgKHBvc2l0aW9ucy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcbiAgY29uc3Qgc3RlcHMgPSBwYXRoLnNwbGl0KCcvJyk7XG4gIGNvbnN0IGN1cnJTdGVwID0gc3RlcHMuc2hpZnQoKSBhcyBzdHJpbmc7XG4gIGlmIChjdXJyU3RlcCA9PSAnJykgcmV0dXJuIHBvc2l0aW9ucztcbiAgY29uc3QgcmVzdFN0ZXBzID0gc3RlcHMuam9pbignLycpO1xuXG4gIGxldCBuZXdQb3NpdGlvbnMgPSBbXTtcbiAgaWYgKGN1cnJTdGVwID09ICcuLicpIHtcbiAgICAvLyBuYXZpZ2F0ZSB1cFxuICAgIG5ld1Bvc2l0aW9ucyA9IHBvc2l0aW9ucy5tYXAocCA9PiBwLnBhcmVudEVsZW1lbnQpLmZpbHRlcihwID0+IHApO1xuICB9IGVsc2UgaWYgKGN1cnJTdGVwID09ICcrJykge1xuICAgIC8vIG5hdmlnYXRlIHNpZGV3YXlzXG4gICAgbmV3UG9zaXRpb25zID0gcG9zaXRpb25zLm1hcChwID0+IHAubmV4dEVsZW1lbnRTaWJsaW5nKS5maWx0ZXIocCA9PiBwKTtcbiAgfSBlbHNlIGlmIChjdXJyU3RlcC5zdGFydHNXaXRoKCcuJykpIHtcbiAgICAvLyBuYXZpZ2F0ZSBkb3duICsgZmlsdGVyIGZvciBjbGFzc1xuICAgIGNvbnN0IGNsYXNzTmFtZSA9IGN1cnJTdGVwLnNsaWNlKDEpO1xuICAgIG5ld1Bvc2l0aW9ucyA9IHBvc2l0aW9ucy5mbGF0TWFwKHAgPT4gQXJyYXkuZnJvbShwLmNoaWxkcmVuKS5maWx0ZXIoYyA9PiBjLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpKSk7XG4gIH0gZWxzZSB7XG4gICAgLy8gbmF2aWdhdGUgZG93biArIGZpbHRlciBmb3IgdGFnXG4gICAgbmV3UG9zaXRpb25zID0gcG9zaXRpb25zLmZsYXRNYXAocCA9PiBBcnJheS5mcm9tKHAuY2hpbGRyZW4pLmZpbHRlcihjID0+IGMudGFnTmFtZSA9PSBjdXJyU3RlcC50b1VwcGVyQ2FzZSgpKSk7XG4gIH1cbiAgaWYgKG5ld1Bvc2l0aW9ucy5sZW5ndGggPT09IDAgJiYgc3RyaWN0KSB7XG4gICAgY29uc29sZS5lcnJvcihgRXJyb3IgdHJhdmVyc2luZyAke3BhdGh9OiBObyBlbGVtZW50IGZvdW5kYCk7XG4gIH1cbiAgcmV0dXJuIG5hdmlnYXRlRE9NKG5ld1Bvc2l0aW9ucyBhcyBIVE1MRWxlbWVudFtdLCByZXN0U3RlcHMpO1xufVxuXG4vLyBnZXRQYXJlbnRUYWdSZWN1cnNpdmUgZnJvbSBhIGNoaWxkIGVsZW1lbnRcbi8vIGlmIGVsZW1lbnQgaGFzIFRhZ05hbWVcbi8vIHJldHVybjtcbi8vIGVsc2U6IHJldHJ5IHdpdGggcGFyZW50RWxlbWVudFxuZXhwb3J0IGZ1bmN0aW9uIGdldFBhcmVudFRhZ1JlY3Vyc2l2ZShlbDogSFRNTEVsZW1lbnQsIHRhZzogc3RyaW5nKTogSFRNTEVsZW1lbnQgfCBudWxsIHtcbiAgaWYgKGVsLnRhZ05hbWUgPT0gdGFnLnRvVXBwZXJDYXNlKCkpIHtcbiAgICByZXR1cm4gZWw7XG4gIH1cbiAgZWxzZSB7XG4gICAgbGV0IHBhcmVudCA9IGVsLnBhcmVudEVsZW1lbnQ7XG4gICAgaWYgKCFwYXJlbnQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0NvdWxkIG5vdCBmaW5kIHBhcmVudCBlbGVtZW50IHdpdGggcmVxdWVzdGVkIHRhZyAnLCB0YWcpO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiBnZXRQYXJlbnRUYWdSZWN1cnNpdmUocGFyZW50LCB0YWcpIGFzIEhUTUxFbGVtZW50O1xuICB9XG59XG5cbi8vIGdldFBhcmVudENsYXNzUmVjdXJzaXZlIGZyb20gYSBjaGlsZCBlbGVtZW50XG4vLyBpZiBlbGVtZW50IGhhcyBjbGFzc1xuLy8gcmV0dXJuO1xuLy8gZWxzZTogcmV0cnkgd2l0aCBwYXJlbnRFbGVtZW50XG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyZW50Q2xhc3NSZWN1cnNpdmUoZWw6IEhUTUxFbGVtZW50LCBjOiBzdHJpbmcpOiBIVE1MRWxlbWVudCB8IG51bGwge1xuICBpZiAoZWwuY2xhc3NMaXN0LmNvbnRhaW5zKGMpKSB7XG4gICAgcmV0dXJuIGVsO1xuICB9XG4gIGVsc2Uge1xuICAgIGxldCBwYXJlbnQgPSBlbC5wYXJlbnRFbGVtZW50O1xuICAgIGlmICghcGFyZW50KSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdDb3VsZCBub3QgZmluZCBwYXJlbnQgZWxlbWVudCB3aXRoIHJlcXVlc3RlZCBjbGFzcyAnLCBjKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gZ2V0UGFyZW50Q2xhc3NSZWN1cnNpdmUocGFyZW50LCBjKTtcbiAgfVxufVxuIiwgIi8vICMjIyMjIyMjIyBMQVlPVVQgQVNUIEFTIFRSRUUgRElBR1JBTSAjIyMjIyMjI1xuaW1wb3J0ICogYXMgQlNMX0FTVCBmcm9tIFwiLi9CU0xfQVNUXCI7XG5pbXBvcnQgKiBhcyBCU0xfUHJpbnQgZnJvbSBcIi4vQlNMX1ByaW50XCI7XG5pbXBvcnQge25hdmlnYXRlRE9NLCBnZXRQYXJlbnRUYWdSZWN1cnNpdmUsIGdldFBhcmVudENsYXNzUmVjdXJzaXZlfSBmcm9tIFwiLi9ET01fSGVscGVyc1wiO1xuLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0NTU19PYmplY3RfTW9kZWwvRGV0ZXJtaW5pbmdfdGhlX2RpbWVuc2lvbnNfb2ZfZWxlbWVudHNcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MRWxlbWVudC9vZmZzZXRMZWZ0XG5cbi8vICMjIyMgbWFpbiBhcGkgIyMjIyNcbi8vIGFkZCBmb3Jlc3Qgb2YgcHJvZ3JhbSBleHByZXNzaW9ucyB0byBodG1sIGVsZW1lbnRcbmV4cG9ydCBmdW5jdGlvbiB0cmVlUHJvZ3JhbShwcm9ncmFtOiBCU0xfQVNULnByb2dyYW0sIHRhcmdldDogSFRNTEVsZW1lbnQsIHF1aXo9ZmFsc2UsIGxhbmc9J2VuJyl7XG4gIGlmICghaW1wbGVtZW50ZWRMYW5ndWFnZXMuaW5jbHVkZXMobGFuZykpIHtcbiAgICBjb25zb2xlLmVycm9yKGBcbiAgICAgIFNlbGVjdGVkIGxhbmd1YWdlIFwiJHtsYW5nfVwiIGlzIG5vdCBpbXBsZW1lbnRlZCwgZGVmYXVsdGluZyB0byBcImVuXCIuXG4gICAgICBBdmFpbGFibGUgbGFuZ3VhZ2UgY29kZXM6ICR7aW1wbGVtZW50ZWRMYW5ndWFnZXMuam9pbignLCAnKX1cbiAgICBgKTtcbiAgICBsYW5nID0gJ2VuJztcbiAgfVxuICB0YXJnZXQuaW5uZXJIVE1MID0gcmVuZGVyUHJvZ3JhbShwcm9ncmFtLCBxdWl6LCBsYW5nIGFzIGltcGxlbWVudGVkTGFuZ3VhZ2UpO1xuICBpZiAocXVpeikge1xuICAgIC8vIHNob3cgZmlyc3QgcXVpeiBub2RlXG4gICAgbmF2aWdhdGVET00oW3RhcmdldF0sJ3VsL2xpL3VsL2xpJykubWFwKGMgPT5cbiAgICAgIGMuc2V0QXR0cmlidXRlKCdkYXRhLWNvbGxhcHNlZCcsJ2ZhbHNlJykpO1xuICB9XG4gIC8vIGFsaWduIGNvbm5lY3RvcnMgaG9yaXpvbnRhbGx5XG4gIGFkanVzdENvbm5lY3RvcnModGFyZ2V0KTtcbn1cblxuLy8gIyMjIyMjIGludGVybmF0aW9uYWxpemF0aW9uIGZvciB0aGlzIG1vZHVsZSAjIyMjI1xudHlwZSBpbXBsZW1lbnRlZExhbmd1YWdlID0gJ2VuJyB8ICdkZSc7XG5jb25zdCBpbXBsZW1lbnRlZExhbmd1YWdlcyA9IFsnZW4nLCAnZGUnXTtcblxuY29uc3QgZGljdGlvbmFyeSA9IHtcbiAgJ2VuJzoge1xuICAgICdzZWxlY3QgcHJvZHVjdGlvbic6ICdTZWxlY3QgcHJvZHVjdGlvbicsXG4gICAgJ21hcmsgc2VsZWN0ZWQgdGV4dCBhcyBob2xlJzogJ01hcmsgc2VsZWN0ZWQgdGV4dCBhcyBob2xlJyxcbiAgfSxcbiAgJ2RlJzoge1xuICAgICdzZWxlY3QgcHJvZHVjdGlvbic6ICdQcm9kdWt0aW9uIGF1c3dcdTAwRTRobGVuJyxcbiAgICAnbWFyayBzZWxlY3RlZCB0ZXh0IGFzIGhvbGUnOiAnQXVzd2FobCBhbHMgTG9jaCBtYXJraWVyZW4nLFxuICB9LFxufTtcbi8vICMjIyMjIyBsYXlvdXQgaGVscGVyICMjIyMjIyMjXG4vLyBkeW5hbWljYWxseSBjb21wdXRlIGRpbWVuc2lvbnMgb2YgY29ubmVjdG9ycyBiZXR3ZWVuIG5vZGVzXG4vLyBzdWNoIHRoYXQgdGhleSBwb2ludCB0byB0aGUgY29ycmVjdCBcImhvbGVcIlxuZnVuY3Rpb24gYWRqdXN0Q29ubmVjdG9ycyh0cmVlOiBIVE1MRWxlbWVudCkge1xuICBjb25zdCB5ZGlmZiA9IHBhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZSh0cmVlKS5mb250U2l6ZSkgKiAzOyAvLyAzZW1cbiAgZm9yKGxldCBpID0gMTsgO2krKykge1xuICAgIGNvbnN0IGhvbGVzID0gQXJyYXkuZnJvbSh0cmVlLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoYGhvbGUtJHtpfWApKTtcbiAgICBpZiAoaG9sZXMubGVuZ3RoIDwgMSkgcmV0dXJuO1xuICAgIGhvbGVzLm1hcChoID0+IHtcbiAgICAgIGNvbnN0IGVsOiBIVE1MRWxlbWVudCA9IGggYXMgSFRNTEVsZW1lbnQ7XG4gICAgICBjb25zdCB4cG9zID0gMC41ICogKGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnggKyBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCk7XG4gICAgICAvLyBubyBsYXlvdXQgZWZmZWN0IGlmIGhvbGUgaXMgaW52aXNpYmxlXG4gICAgICBpZiAoeHBvcyA9PSAwKSByZXR1cm47XG5cbiAgICAgIC8vIG5hdmlnYXRlIHRoZSBET01cbiAgICAgIGNvbnN0IGxpID0gZ2V0UGFyZW50VGFnUmVjdXJzaXZlKGVsLCAnbGknKTtcbiAgICAgIC8vIG5vdCBpbnNpZGUgYSBsaXN0IG5vZGU/IHByb2JhYmx5IHdyb25nIHRhZywgcmV0dXJuXG4gICAgICBpZighbGkpIHJldHVybjtcblxuICAgICAgLy8gcHJvY2VzcyBjaGlsZHJlblxuICAgICAgbmF2aWdhdGVET00oW2xpXSwgYHVsLy5jaGlsZC0ke2l9L3NwYW5gKS5tYXAoYyA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkID0gYyBhcyBIVE1MRWxlbWVudDtcbiAgICAgICAgY29uc3QgeHBvc0NoaWxkID0gMC41ICogKGNoaWxkLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnggKyBjaGlsZC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCk7XG4gICAgICAgIGNvbnN0IHhkaWZmID0geHBvcyAtIHhwb3NDaGlsZDtcbiAgICAgICAgY29uc3QgYW5nbGUgPSAtIE1hdGguYXRhbjIoeWRpZmYsIHhkaWZmKTtcbiAgICAgICAgY29uc3QgYW1vdW50ID0gTWF0aC5zcXJ0KHhkaWZmKnhkaWZmICsgeWRpZmYqeWRpZmYpO1xuICAgICAgICBjb25zdCBsZWZ0ID0gKHhkaWZmLzIpIC0gKGFtb3VudC8yKTtcbiAgICAgICAgY2hpbGQuc3R5bGUuY3NzVGV4dCA9IGBcbiAgICAgICAgICAtLWNvbm5lY3Rvci13aWR0aDogJHthbW91bnR9cHg7XG4gICAgICAgICAgLS1jb25uZWN0b3ItbGVmdDogY2FsYyg1MCUgKyAke2xlZnR9cHgpO1xuICAgICAgICAgIC0tZWRnZXRleHQtcmlnaHQ6IGNhbGMoNTAlIC0gJHt4ZGlmZi8yfXB4KTtcbiAgICAgICAgICAtLWNvbm5lY3Rvci10cmFuc2Zvcm06IHJvdGF0ZSgke2FuZ2xlfXJhZCk7XG4gICAgICAgIGA7XG4gICAgICB9KTtcblxuICAgIH0pO1xuICB9XG59XG5cbi8vICMjIyMjIGdlbmVyYXRlIEhUTUxcbi8vIHJlbmRlciBmdW5jdGlvbnMgYW5kIHRoZWlyIGhlbHBlcnNcblxuLy8gdG9wIGxldmVsIChwcm9ncmFtKVxuZnVuY3Rpb24gcmVuZGVyUHJvZ3JhbShwOiBCU0xfQVNULnByb2dyYW0sIHF1aXo6IGJvb2xlYW4sIGxhbmc6IGltcGxlbWVudGVkTGFuZ3VhZ2UpOnN0cmluZyB7XG4gIGNvbnN0IHJvb3QgPSBwcm9ncmFtVG9Ob2RlKHApO1xuICByZXR1cm4gYFxuICAgIDx1bCBjbGFzcz1cInRyZWUgYXN0XCI+XG4gICAgICAke3F1aXogPyByZW5kZXJRdWl6Tm9kZShyb290LCBsYW5nKSA6IHJlbmRlck5vZGUocm9vdCl9XG4gICAgPC91bD5cbiAgYDtcbn1cblxuLy8gc2ltcGxlIGhlbHBlciBzdHJ1Y3R1cmUgcmVwcmVzZW50aW5nIGEgcHJpbnRlZCB0cmVlXG4vLyBhbHNvIHVzZWQgZnVydGhlciBkb3duIGJ5IHRyYW5zZm9ybSBmdW5jdGlvblxuaW50ZXJmYWNlIG5vZGUge1xuICBwcm9kdWN0aW9uOiBzdHJpbmc7XG4gIGNvZGU6IHN0cmluZztcbiAgaG9sZXM6IHtzdGFydDpudW1iZXIsIGVuZDpudW1iZXIsIGNvbnRlbnQ6bm9kZX1bXTtcbn1cblxuLy8gcmVndWxhciBub2RlL3RyZWVcbmZ1bmN0aW9uIHJlbmRlck5vZGUobjogbm9kZSwgaTpudW1iZXI9LTEpOnN0cmluZyB7XG4gIC8vIHNsaWNlIHRleHQgaW50byBob2xlc1xuICBjb25zdCBzcGFucyA9IGdldFNwYW5zKG4pO1xuICByZXR1cm4gYFxuICAgIDxsaSBjbGFzcz1cIiR7aSA+PSAwID8gYGNoaWxkLSR7aSsxfWAgOiAnJ31cIlxuICAgICAgICBkYXRhLWNvbGxhcHNlZD1cIiR7aSA+PSAwID8gJ3RydWUnIDogJ2ZhbHNlJ31cIj5cbiAgICAgIDxzcGFuIGNsYXNzPVwiJHtuLmhvbGVzLmxlbmd0aCA+IDAgPyAnJyA6ICd0ZXJtaW5hbC1zeW1ib2wnfVwiPlxuXG4gICAgICAgIDxkaXYgY2xhc3M9XCJuYW1lXCI+JHtzYW5pdGl6ZShuLnByb2R1Y3Rpb24pfTwvZGl2PlxuXG4gICAgICAgICR7cmVuZGVyQ29kZShzcGFucywgbil9XG5cbiAgICAgIDwvc3Bhbj5cbiAgICAgICR7bi5ob2xlcy5sZW5ndGggPiAwID9cbiAgICAgICAgYDx1bD4ke1xuICAgICAgICAgIG4uaG9sZXMubWFwKChoLCBpZHgpID0+XG4gICAgICAgICAgICByZW5kZXJOb2RlKGguY29udGVudCwgaWR4KSlcbiAgICAgICAgICAuam9pbignJylcbiAgICAgICAgfTwvdWw+YFxuICAgICAgICA6ICcnXG4gICAgICB9XG4gICAgPC9saT5cbiAgYDtcbn1cblxuaW50ZXJmYWNlIHNwYW4ge1xuICBwb3M6IGJvb2xlYW4gfCBudW1iZXI7XG4gIHN0YXJ0OiBudW1iZXI7XG4gIGVuZDogbnVtYmVyO1xufVxuZnVuY3Rpb24gZ2V0U3BhbnMobjogbm9kZSk6c3BhbltdIHtcbiAgLy8gc2xpY2UgdGV4dCBpbnRvIGhvbGVzXG4gIGNvbnN0IHNwYW5zID0gW107XG4gIGxldCBwb3NpdGlvbiA9IDA7XG4gIGZvcihsZXQgaSA9IDA7IGkgPCBuLmhvbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG4uaG9sZXNbaV0uc3RhcnQgPiBwb3NpdGlvbikge1xuICAgICAgc3BhbnMucHVzaCh7cG9zOiBmYWxzZSwgc3RhcnQ6cG9zaXRpb24sIGVuZDpuLmhvbGVzW2ldLnN0YXJ0fSk7XG4gICAgfVxuICAgIHNwYW5zLnB1c2goe3BvczogaSsxLCAuLi5uLmhvbGVzW2ldfSk7XG4gICAgcG9zaXRpb24gPSBuLmhvbGVzW2ldLmVuZDtcbiAgfVxuICBpZiAocG9zaXRpb24gPCBuLmNvZGUubGVuZ3RoKSB7XG4gICAgc3BhbnMucHVzaCh7cG9zOiBmYWxzZSwgc3RhcnQ6cG9zaXRpb24sIGVuZDpuLmNvZGUubGVuZ3RofSk7XG4gIH1cbiAgcmV0dXJuIHNwYW5zO1xufVxuXG4vLyBjb2RlIGZyb20gc3BhbnNcbmZ1bmN0aW9uIHJlbmRlckNvZGUoc3BhbnM6IHNwYW5bXSwgbjogbm9kZSk6c3RyaW5nIHtcbiAgcmV0dXJuIGBcbiAgPGRpdiBjbGFzcz1cImNvZGVcIj4ke1xuICAgIHNwYW5zLm1hcChzID0+XG4gICAgICBgPHNwYW4gY2xhc3M9XCJjaGFyICR7cy5wb3MgPyBgaG9sZSBob2xlLSR7cy5wb3N9YCA6ICcnfVwiXG4gICAgICAgICAgICAgJHtzLnBvcyA/IGBvbmNsaWNrPVwidG9nZ2xlQ2hpbGQoZXZlbnQsJHtzLnBvc30pXCJgIDogJyd9XG4gICAgICAgICAgICAgPiR7bi5jb2RlLnNsaWNlKHMuc3RhcnQsIHMuZW5kKX08L3NwYW4+YClcbiAgICAuam9pbignJyl9XG4gIDwvZGl2PlxuICBgO1xufVxuZnVuY3Rpb24gdG9nZ2xlQ2hpbGQoZTogRXZlbnQsaTpudW1iZXIpIHtcbiAgY29uc3QgaG9sZSA9IGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICBjb25zdCBsaSA9IGdldFBhcmVudFRhZ1JlY3Vyc2l2ZShob2xlLCAnbGknKTtcbiAgY29uc3QgdHJlZSA9IGdldFBhcmVudFRhZ1JlY3Vyc2l2ZShob2xlLCAnYnNsdHJlZScpO1xuICBpZighbGkgfHwgIXRyZWUpIHtcbiAgICBjb25zb2xlLmVycm9yKCd0b2dnbGVDaGlsZCBjYWxsZWQgZnJvbSAuaG9sZSBub3QgaW4gbGkvYnNsdHJlZScpO1xuICAgIHJldHVybjtcbiAgfTtcblxuICBuYXZpZ2F0ZURPTShbbGldLGB1bC8uY2hpbGQtJHtpfWApLm1hcChjID0+IHtcbiAgICBjLnNldEF0dHJpYnV0ZSgnZGF0YS1jb2xsYXBzZWQnLCBjLmdldEF0dHJpYnV0ZSgnZGF0YS1jb2xsYXBzZWQnKSA9PT0gJ3RydWUnID8gJ2ZhbHNlJyA6ICd0cnVlJyk7XG4gIH0pO1xuICBhZGp1c3RDb25uZWN0b3JzKHRyZWUpO1xufVxuKHdpbmRvdyBhcyBhbnkpLnRvZ2dsZUNoaWxkID0gdG9nZ2xlQ2hpbGQ7XG5cbi8vIHByZXZlbnRpbmcgcHJvYmxlbXMgd2l0aCBicmFja2V0c1xuZnVuY3Rpb24gc2FuaXRpemUoczogc3RyaW5nKTpzdHJpbmcge1xuICByZXR1cm4gcy5yZXBsYWNlQWxsKCc8JywnJmx0OycpLnJlcGxhY2VBbGwoJz4nLCcmZ3Q7Jyk7XG59XG5leHBvcnQgZnVuY3Rpb24gZGlydGlmeShzOiBzdHJpbmcpOnN0cmluZyB7XG4gIHJldHVybiBzLnJlcGxhY2VBbGwoJyZsdDsnLCAnPCcpLnJlcGxhY2VBbGwoJyZndDsnLCc+Jyk7XG59XG5cbi8vICMjIyMjIyByZW5kZXJpbmcgYSBub2RlL3RyZWUgYXMgYSBxdWl6XG5jb25zdCBwcm9kdWN0aW9ucyA9IFtcbiAgJzxwcm9ncmFtPicsXG4gICc8ZGVmLW9yLWV4cHI+KicsXG4gICc8ZGVmLW9yLWV4cHI+JyxcbiAgJzxkZWZpbml0aW9uPicsXG4gICc8ZT4nLFxuICAnPGU+KicsXG4gICd7WyA8ZT4gPGU+IF19KycsXG4gICdbIDxlPiA8ZT4gXScsXG4gICc8bmFtZT4qJyxcbiAgJzxuYW1lPisnLFxuICAnPG5hbWU+JyxcbiAgJzx2Pidcbl07XG5mdW5jdGlvbiByZW5kZXJRdWl6Tm9kZShuOiBub2RlLCBsYW5nOiBpbXBsZW1lbnRlZExhbmd1YWdlLCBpOm51bWJlcj0tMSk6c3RyaW5nIHtcbiAgLy8gc2xpY2UgdGV4dCBpbnRvIGhvbGVzXG4gIGNvbnN0IHNwYW5zID0gZ2V0U3BhbnMobik7XG4gIHJldHVybiBgXG4gICAgPGxpIGNsYXNzPVwiJHtpID49IDAgPyBgY2hpbGQtJHtpKzF9YCA6ICcnfVwiXG4gICAgICAgIGRhdGEtY29sbGFwc2VkPVwiJHtpID49IDAgPyAndHJ1ZScgOiAnZmFsc2UnfVwiPlxuICAgICAgPHNwYW4gY2xhc3M9XCIke24uaG9sZXMubGVuZ3RoID4gMCA/ICcnIDogJ3Rlcm1pbmFsLXN5bWJvbCd9XCJcbiAgICAgICAgICAgIGRhdGEtcXVpei1zdGF0ZT1cIiR7aSA+PSAwID8gJ3Byb2R1Y3Rpb24nIDogJ2RvbmUnfVwiXG4gICAgICAgICAgICBkYXRhLWlzLXRlcm1pbmFsPVwiJHtuLmhvbGVzLmxlbmd0aCA8PSAwfVwiXG4gICAgICAgICAgICBkYXRhLWlzLXRyaXZpYWwtaG9sZT1cIiR7bi5ob2xlcy5sZW5ndGggPT09IDEgJiYgbi5ob2xlc1swXS5zdGFydCA9PT0gMCAmJiBuLmhvbGVzWzBdLmVuZCA9PT0gbi5jb2RlLmxlbmd0aH1cIj5cblxuICAgICAgICAke3JlbmRlclByb2R1Y3Rpb25RdWl6KG4sIGxhbmcpfVxuXG4gICAgICAgICR7cmVuZGVySG9sZVF1aXoobiwgbGFuZyl9XG5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm5hbWVcIj5cbiAgICAgICAgICAke3Nhbml0aXplKG4ucHJvZHVjdGlvbil9XG4gICAgICAgIDwvZGl2PlxuICAgICAgICAke3JlbmRlckNvZGUoc3BhbnMsIG4pfVxuICAgICAgPC9zcGFuPlxuICAgICAgJHtuLmhvbGVzLmxlbmd0aCA+IDAgP1xuICAgICAgICBgPHVsPiR7XG4gICAgICAgICAgbi5ob2xlcy5tYXAoKGgsIGlkeCkgPT5cbiAgICAgICAgICAgIHJlbmRlclF1aXpOb2RlKGguY29udGVudCwgbGFuZywgaWR4KSlcbiAgICAgICAgICAgIC5qb2luKCcnKVxuICAgICAgICAgfTwvdWw+YFxuICAgICAgICA6ICcnXG4gICAgICB9XG4gICAgPC9saT5cbiAgYDtcbn1cblxuLy8gZmlyc3QgcGFydCBvZiB0aGUgcXVpelxuZnVuY3Rpb24gcmVuZGVyUHJvZHVjdGlvblF1aXoobjogbm9kZSwgbGFuZzogaW1wbGVtZW50ZWRMYW5ndWFnZSk6c3RyaW5nIHtcbiAgcmV0dXJuIGBcbiAgPGRpdiBjbGFzcz1cInByb2R1Y3Rpb25cIj5cbiAgICA8c2VsZWN0IG9uY2hhbmdlPVwiY2hlY2tQcm9kdWN0aW9uKGV2ZW50LCAnJHtuLnByb2R1Y3Rpb259JylcIj5cbiAgICAgIDxvcHRpb24gc2VsZWN0ZWQ9XCJ0cnVlXCI+JHtkaWN0aW9uYXJ5W2xhbmddWydzZWxlY3QgcHJvZHVjdGlvbiddfTwvb3B0aW9uPlxuICAgICAgJHtwcm9kdWN0aW9ucy5tYXAocCA9PiBgXG4gICAgICAgICAgPG9wdGlvbiB2YWx1ZT1cIiR7cH1cIj4ke3Nhbml0aXplKHApfTwvb3B0aW9uPlxuICAgICAgICBgKS5qb2luKCcnKX1cbiAgICA8L3NlbGVjdD5cbiAgPC9kaXY+XG4gIGA7XG59XG5cbmZ1bmN0aW9uIGNoZWNrUHJvZHVjdGlvbihlOiBFdmVudCwgcDogc3RyaW5nKSB7XG4gIGNvbnN0IHNlbCA9IGUudGFyZ2V0IGFzIEhUTUxTZWxlY3RFbGVtZW50O1xuICBpZiAoc2VsLnZhbHVlID09PSBwKSB7XG4gICAgLy8gYW5zd2VyIGNvcnJlY3RcbiAgICBjb25zdCBzcGFuID0gZ2V0UGFyZW50VGFnUmVjdXJzaXZlKHNlbCwgJ3NwYW4nKTtcbiAgICBpZiAoc3Bhbikge1xuICAgICAgaWYgKHNwYW4uZ2V0QXR0cmlidXRlKCdkYXRhLWlzLXRlcm1pbmFsJykgPT09ICd0cnVlJykge1xuICAgICAgICAvLyB3ZSdyZSBkb25lXG4gICAgICAgIHNwYW4uc2V0QXR0cmlidXRlKCdkYXRhLXF1aXotc3RhdGUnLCAnZG9uZScpO1xuICAgICAgfSBlbHNlIGlmIChzcGFuLmdldEF0dHJpYnV0ZSgnZGF0YS1pcy10cml2aWFsLWhvbGUnKSA9PT0gJ3RydWUnKSB7XG4gICAgICAgIC8vIHdlJ3JlIGRvbmVcbiAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtcXVpei1zdGF0ZScsICdkb25lJyk7XG4gICAgICAgIC8vIGJ1dCB3ZSBhbHNvIG5lZWQgdG8gZXhwYW5kIHRoZSBjaGlsZFxuICAgICAgICBuYXZpZ2F0ZURPTShbc3Bhbl0sJysvbGknLHRydWUpLm1hcChjID0+XG4gICAgICAgICAgYy5zZXRBdHRyaWJ1dGUoJ2RhdGEtY29sbGFwc2VkJywgJ2ZhbHNlJykpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbW92ZSBvbiB0byBzZWxlY3RpbmcgaG9sZXNcbiAgICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtcXVpei1zdGF0ZScsICdob2xlLW1hcmtpbmcnKTtcbiAgICAgIH1cblxuICAgICAgLy8gZXhwYW5kIG5leHQgc2libGluZyAoaWYgcHJlc2VudClcbiAgICAgIG5hdmlnYXRlRE9NKFtzcGFuXSwgJy4uLysnKS5tYXAobCA9PlxuICAgICAgICBsLnNldEF0dHJpYnV0ZSgnZGF0YS1jb2xsYXBzZWQnLCAnZmFsc2UnKSk7XG5cbiAgICAgIC8vIGFkanVzdCBjb25uZWN0b3JzXG4gICAgICBjb25zdCBxdWl6ID0gZ2V0UGFyZW50Q2xhc3NSZWN1cnNpdmUoc3BhbiwgJ3RyZWUnKTtcbiAgICAgIGlmIChxdWl6KSBhZGp1c3RDb25uZWN0b3JzKHF1aXopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIG9wdGlvbiBhcyB0cmllZC1hbmQtd3JvbmdcbiAgICBBcnJheS5mcm9tKHNlbC5zZWxlY3RlZE9wdGlvbnMpLm1hcChvID0+XG4gICAgICBvLnJlbW92ZSgpKTtcbiAgICAvLyBnaXZlIHZpc3VhbCBmZWVkYmFja1xuICAgIGNvbnN0IHNwYW4gPSBnZXRQYXJlbnRUYWdSZWN1cnNpdmUoc2VsLCAnc3BhbicpO1xuICAgIGlmIChzcGFuKSB7XG4gICAgICBzcGFuLmNsYXNzTGlzdC5hZGQoJ3dyb25nJyk7XG4gICAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHNwYW4uY2xhc3NMaXN0LnJlbW92ZSgnd3JvbmcnKTtcbiAgICAgIH0sIDEwMCk7XG4gICAgfVxuICB9XG59XG4od2luZG93IGFzIGFueSkuY2hlY2tQcm9kdWN0aW9uID0gY2hlY2tQcm9kdWN0aW9uO1xuXG4vLyBzZWNvbmQgcGFydCBvZiB0aGUgcXVpelxuZnVuY3Rpb24gcmVuZGVySG9sZVF1aXoobjogbm9kZSwgbGFuZzogaW1wbGVtZW50ZWRMYW5ndWFnZSk6c3RyaW5nIHtcbiAgcmV0dXJuIGBcbiAgPGRpdiBjbGFzcz1cImhvbGUtbWFya2luZ1wiXG4gICAgICAgZGF0YS1ob2xlcz1cIiR7SlNPTi5zdHJpbmdpZnkobi5ob2xlcy5tYXAoaCA9PiBbaC5zdGFydCxoLmVuZCwgZmFsc2VdKSl9XCI+XG4gICAgPGRpdiBjbGFzcz1cInRleHRhcmVhLWNvbnRhaW5lclwiPlxuICAgICAgPGRpdiBjbGFzcz1cIm1hcmtlci1jb250YWluZXJcIj5cbiAgICAgICAgJHtuLmNvZGUuc3BsaXQoJ1xcbicpXG4gICAgICAgICAgICAubWFwKGwgPT4gbC5zcGxpdCgnJykubWFwKGMgPT5cbiAgICAgICAgICAgICAgYDxzcGFuIGNsYXNzPVwiY2hhciBtYXJrZXJcIj4ke2N9PC9zcGFuPmBcbiAgICAgICAgICAgICkuam9pbignJykpXG4gICAgICAgICAgICAuam9pbignPHNwYW4gY2xhc3M9XCJjaGFyIG1hcmtlclwiPjwvc3Bhbj48YnI+Jyl9XG4gICAgICA8L2Rpdj5cbiAgICAgIDx0ZXh0YXJlYSBhdXRvY29ycmVjdD1cIm9mZlwiXG4gICAgICAgICAgICAgICAgc3BlbGxjaGVjaz1cImZhbHNlXCJcbiAgICAgICAgICAgICAgICBjb2xzPVwiJHtuLmNvZGUuc3BsaXQoJ1xcbicpLm1hcChsID0+IGwubGVuZ3RoKS5yZWR1Y2UoKHgseSkgPT4geCA+IHkgPyB4IDogeSl9XCJcbiAgICAgICAgICAgICAgICByb3dzPVwiJHtuLmNvZGUuc3BsaXQoJ1xcbicpLmxlbmd0aH1cIlxuICAgICAgICAgICAgICAgIHJlYWRvbmx5PVwidHJ1ZVwiPiR7bi5jb2RlfTwvdGV4dGFyZWE+XG4gICAgPC9kaXY+PGJyPlxuICAgIDxidXR0b24gb25jbGljaz1cImNoZWNrU2VsZWN0aW9uKGV2ZW50KVwiPlxuICAgICAgJHtkaWN0aW9uYXJ5W2xhbmddWydtYXJrIHNlbGVjdGVkIHRleHQgYXMgaG9sZSddfVxuICAgIDwvYnV0dG9uPlxuICA8L2Rpdj5cbiAgYDtcbn1cbmZ1bmN0aW9uIGNoZWNrU2VsZWN0aW9uKGU6IEV2ZW50KSB7XG4gIC8vIGdldCBjb250ZXh0XG4gIGNvbnN0IGJ0biA9IGUudGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICBjb25zdCBkaXYgPSBnZXRQYXJlbnRDbGFzc1JlY3Vyc2l2ZShidG4sICdob2xlLW1hcmtpbmcnKTtcbiAgaWYgKCFkaXYpIHtcbiAgICBjb25zb2xlLmVycm9yKCdjaGVja1Byb2R1Y3Rpb24gY2FsbGVkIGZyb20gZWwuIG5vdCB3cmFwcGVkIGluIGRpdi5ob2xlLW1hcmtpbmcnKTtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gZ2V0IGhvbGVzIHRvIGZpbmRcbiAgY29uc3QgaG9sZXMgPSBKU09OLnBhcnNlKGRpdi5nZXRBdHRyaWJ1dGUoJ2RhdGEtaG9sZXMnKSBhcyBzdHJpbmcpIGFzIFtudW1iZXIsbnVtYmVyLGJvb2xlYW5dW107XG5cbiAgLy8gZ2V0IGN1cnJlbnQgc2VsZWN0aW9uXG4gIGNvbnN0IHRleHRhcmVhID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCd0ZXh0YXJlYScpWzBdIGFzIEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG4gIGNvbnN0IHNlbFN0YXJ0ID0gdGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQ7XG4gIGNvbnN0IHNlbEVuZCA9IHRleHRhcmVhLnNlbGVjdGlvbkVuZDtcbiAgY29uc3Qgc3RhcnQgPSBzZWxTdGFydCA8IHNlbEVuZCA/IHNlbFN0YXJ0IDogc2VsRW5kO1xuICBjb25zdCBlbmQgPSBzZWxTdGFydCA8IHNlbEVuZCA/IHNlbEVuZCA6IHNlbFN0YXJ0O1xuXG4gIC8vIGNoZWNrIGlmIGhvbGUgaXMgZm91bmRcbiAgbGV0IGZvdW5kID0gLTE7XG4gIGhvbGVzLm1hcCgoaCxpKSA9PiB7XG4gICAgaWYgKGhbMF0gPT09IHN0YXJ0ICYmIGhbMV0gPT09IGVuZCkge1xuICAgICAgaFsyXSA9IHRydWU7XG4gICAgICBmb3VuZCA9IGk7XG4gICAgfVxuICB9KTtcblxuICBpZiAoZm91bmQgPj0gMCkge1xuICAgIC8vIHNhdmUgY2hhbmdlZCBzdGF0ZVxuICAgIGRpdi5zZXRBdHRyaWJ1dGUoJ2RhdGEtaG9sZXMnLCBKU09OLnN0cmluZ2lmeShob2xlcykpO1xuICAgIC8vIG1hcmsgaG9sZSBhcyBjb3JyZWN0XG4gICAgbmF2aWdhdGVET00oW2Rpdl0sICcudGV4dGFyZWEtY29udGFpbmVyLy5tYXJrZXItY29udGFpbmVyLy5tYXJrZXInLCB0cnVlKVxuICAgICAgLnNsaWNlKHN0YXJ0LCBlbmQpXG4gICAgICAubWFwKG0gPT4gbS5jbGFzc0xpc3QuYWRkKCdjb3JyZWN0JykpO1xuICB9IGVsc2Uge1xuICAgIC8vIGdpdmUgZmVlZGJhY2sgYWJvdXQgd3Jvbmcgc2VsZWN0aW9uXG4gICAgY29uc3QgbWFya2VycyA9IG5hdmlnYXRlRE9NKFtkaXZdLCAnLnRleHRhcmVhLWNvbnRhaW5lci8ubWFya2VyLWNvbnRhaW5lci8ubWFya2VyJywgdHJ1ZSlcbiAgICAgIC5zbGljZShzdGFydCwgZW5kKTtcblxuICAgIG1hcmtlcnMubWFwKG0gPT4gbS5jbGFzc0xpc3QuYWRkKCd3cm9uZycpKTtcbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICBtYXJrZXJzLm1hcChtID0+IG0uY2xhc3NMaXN0LnJlbW92ZSgnd3JvbmcnKSk7XG4gICAgfSwgMTAwKTtcbiAgfVxuICBpZihob2xlcy5ldmVyeShoID0+IGhbMl0pKSB7XG4gICAgLy8gbW92ZSBvbiB0byBuZXh0IHBoYXNlID09IGRvbmVcbiAgICBjb25zdCBzcGFuID0gZ2V0UGFyZW50VGFnUmVjdXJzaXZlKGRpdiwgJ3NwYW4nKTtcbiAgICBpZiAoc3Bhbikge1xuICAgICAgc3Bhbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtcXVpei1zdGF0ZScsICdkb25lJyk7XG4gICAgICAvLyBleHBhbmQgZmlyc3QgY2hpbGRcbiAgICAgIG5hdmlnYXRlRE9NKFtzcGFuXSwgJy4uL3VsLy5jaGlsZC0xJykubWFwKGMgPT5cbiAgICAgICAgYy5zZXRBdHRyaWJ1dGUoJ2RhdGEtY29sbGFwc2VkJywgJ2ZhbHNlJykpO1xuXG4gICAgICAvLyBhZGp1c3QgY29ubmVjdG9ycyBmb3Igd2lkdGggY2hhbmdlXG4gICAgICBjb25zdCBxdWl6ID0gZ2V0UGFyZW50Q2xhc3NSZWN1cnNpdmUoc3BhbiwgJ3RyZWUnKTtcbiAgICAgIGlmIChxdWl6KSBhZGp1c3RDb25uZWN0b3JzKHF1aXopO1xuICAgIH1cbiAgfVxufVxuKHdpbmRvdyBhcyBhbnkpLmNoZWNrU2VsZWN0aW9uID0gY2hlY2tTZWxlY3Rpb247XG5cbi8vICMjIyMjIyB0cmFuc2Zvcm0gQVNUIGludG8gaGVscGVyIHN0cnVjdHVyZVxuZnVuY3Rpb24gcHJvZ3JhbVRvTm9kZShwOiBCU0xfQVNULnByb2dyYW0pOiBub2RlIHtcbiAgY29uc3QgZXhwcmVzc2lvbnMgPSBwLm1hcChCU0xfUHJpbnQucHJpbnREZWZPckV4cHIpO1xuICBjb25zdCBpbmRpY2VzID0gW107XG4gIGxldCBwcm9ncmFtID0gJyc7XG4gIGZvcihsZXQgaSA9IDA7IGkgPCBleHByZXNzaW9ucy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpID4gMCkgcHJvZ3JhbSA9IGAke3Byb2dyYW19XFxuYDtcbiAgICBjb25zdCBzdGFydCA9IHByb2dyYW0ubGVuZ3RoO1xuICAgIHByb2dyYW0gPSBgJHtwcm9ncmFtfSR7ZXhwcmVzc2lvbnNbaV19YDtcbiAgICBjb25zdCBlbmQgPSBwcm9ncmFtLmxlbmd0aDtcbiAgICBpbmRpY2VzLnB1c2goe3N0YXJ0OnN0YXJ0LGVuZDplbmR9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHByb2R1Y3Rpb246ICc8cHJvZ3JhbT4nLFxuICAgIGNvZGU6IHByb2dyYW0sXG4gICAgaG9sZXM6IFtcbiAgICAgIHtcbiAgICAgICAgc3RhcnQ6IDAsXG4gICAgICAgIGVuZDogcHJvZ3JhbS5sZW5ndGgsXG4gICAgICAgIGNvbnRlbnQ6IHtcbiAgICAgICAgICBwcm9kdWN0aW9uOiAnPGRlZi1vci1leHByPionLFxuICAgICAgICAgIGNvZGU6IHByb2dyYW0sXG4gICAgICAgICAgaG9sZXM6IGluZGljZXMubWFwKChoLGlkeCkgPT4geyByZXR1cm4ge1xuICAgICAgICAgICAgc3RhcnQ6IGguc3RhcnQsXG4gICAgICAgICAgICBlbmQ6IGguZW5kLFxuICAgICAgICAgICAgY29udGVudDogZGVmT3JFeHByVG9Ob2RlKHBbaWR4XSlcbiAgICAgICAgICB9fSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIF1cbiAgfTtcbn1cblxuZnVuY3Rpb24gZGVmT3JFeHByVG9Ob2RlKGRlOiBCU0xfQVNULmRlZk9yRXhwcik6bm9kZSB7XG4gIGNvbnN0IGNvZGUgPSBCU0xfUHJpbnQucHJpbnREZWZPckV4cHIoZGUpIGFzIHN0cmluZztcbiAgcmV0dXJuIHtcbiAgICBwcm9kdWN0aW9uOiAnPGRlZi1vci1leHByPicsXG4gICAgY29kZTogY29kZSxcbiAgICBob2xlczogW3tcbiAgICAgIHN0YXJ0OiAwLFxuICAgICAgZW5kOiBjb2RlLmxlbmd0aCxcbiAgICAgIGNvbnRlbnQ6IEJTTF9BU1QuaXNEZWZpbml0aW9uKGRlKSA/IGRlZlRvTm9kZShkZSkgOiBleHBUb05vZGUoZGUpXG4gICAgfV1cbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZUb05vZGUoZDogQlNMX0FTVC5kZWZpbml0aW9uKTpub2RlIHtcbiAgbGV0IGNvZGUgPSAnJztcbiAgY29uc3QgaG9sZXMgPSBbXTtcbiAgaWYgKEJTTF9BU1QuaXNGdW5EZWYoZCkpIHtcbiAgICBjb2RlID0gJyhkZWZpbmUgKCc7XG4gICAgbGV0IHN0YXJ0ID0gY29kZS5sZW5ndGg7XG4gICAgY29kZSA9IGAke2NvZGV9JHtCU0xfUHJpbnQucHJpbnROYW1lKGQubmFtZSl9YDtcbiAgICBob2xlcy5wdXNoKHtzdGFydDpzdGFydCwgZW5kOmNvZGUubGVuZ3RoLCBjb250ZW50Om5hbWVUb05vZGUoZC5uYW1lKX0pO1xuXG4gICAgY29kZSA9IGAke2NvZGV9IGA7XG4gICAgc3RhcnQgPSBjb2RlLmxlbmd0aDtcbiAgICBjb2RlID0gYCR7Y29kZX0ke2QuYXJncy5tYXAoQlNMX1ByaW50LnByaW50TmFtZSkuam9pbignICcpfWA7XG4gICAgaG9sZXMucHVzaCh7c3RhcnQ6c3RhcnQsIGVuZDpjb2RlLmxlbmd0aCwgY29udGVudDpuYW1lUGx1c1RvTm9kZShkLmFyZ3MpfSk7XG5cbiAgICBjb2RlID0gYCR7Y29kZX0pIGA7XG4gICAgc3RhcnQgPSBjb2RlLmxlbmd0aDtcbiAgICBjb2RlID0gYCR7Y29kZX0ke0JTTF9QcmludC5wcmludEUoZC5ib2R5KX1gO1xuICAgIGhvbGVzLnB1c2goe3N0YXJ0OnN0YXJ0LCBlbmQ6Y29kZS5sZW5ndGgsIGNvbnRlbnQ6ZXhwVG9Ob2RlKGQuYm9keSl9KTtcblxuICAgIGNvZGUgPSBgJHtjb2RlfSlgO1xuICB9IGVsc2UgaWYgKEJTTF9BU1QuaXNDb25zdERlZihkKSkge1xuICAgIGNvZGUgPSAnKGRlZmluZSAnO1xuICAgIGxldCBzdGFydCA9IGNvZGUubGVuZ3RoO1xuICAgIGNvZGUgPSBgJHtjb2RlfSR7QlNMX1ByaW50LnByaW50TmFtZShkLm5hbWUpfWA7XG4gICAgaG9sZXMucHVzaCh7c3RhcnQ6c3RhcnQsIGVuZDpjb2RlLmxlbmd0aCwgY29udGVudDpuYW1lVG9Ob2RlKGQubmFtZSl9KTtcblxuICAgIGNvZGUgPSBgJHtjb2RlfSBgO1xuICAgIHN0YXJ0ID0gY29kZS5sZW5ndGg7XG4gICAgY29kZSA9IGAke2NvZGV9JHtCU0xfUHJpbnQucHJpbnRFKGQudmFsdWUpfWA7XG4gICAgaG9sZXMucHVzaCh7c3RhcnQ6c3RhcnQsIGVuZDpjb2RlLmxlbmd0aCwgY29udGVudDpleHBUb05vZGUoZC52YWx1ZSl9KTtcblxuICAgIGNvZGUgPSBgJHtjb2RlfSlgO1xuICB9IGVsc2Uge1xuICAgIGNvZGUgPSAnKGRlZmluZS1zdHJ1Y3QgJztcbiAgICBsZXQgc3RhcnQgPSBjb2RlLmxlbmd0aDtcbiAgICBjb2RlID0gYCR7Y29kZX0ke0JTTF9QcmludC5wcmludE5hbWUoZC5iaW5kaW5nKX1gO1xuICAgIGhvbGVzLnB1c2goe3N0YXJ0OnN0YXJ0LCBlbmQ6Y29kZS5sZW5ndGgsIGNvbnRlbnQ6bmFtZVRvTm9kZShkLmJpbmRpbmcpfSk7XG5cbiAgICBjb2RlID0gYCR7Y29kZX0gKGA7XG4gICAgc3RhcnQgPSBjb2RlLmxlbmd0aDtcbiAgICBjb2RlID0gYCR7Y29kZX0ke2QucHJvcGVydGllcy5tYXAoQlNMX1ByaW50LnByaW50TmFtZSkuam9pbignICcpfWA7XG4gICAgaG9sZXMucHVzaCh7c3RhcnQ6c3RhcnQsIGVuZDpjb2RlLmxlbmd0aCwgY29udGVudDpuYW1lU3RhclRvTm9kZShkLnByb3BlcnRpZXMpfSk7XG5cbiAgICBjb2RlID0gYCR7Y29kZX0pKWA7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwcm9kdWN0aW9uOiBgPGRlZmluaXRpb24+YCxcbiAgICBjb2RlOiBjb2RlLFxuICAgIGhvbGVzOiBob2xlc1xuICB9O1xufVxuXG5mdW5jdGlvbiBleHBUb05vZGUoZTogQlNMX0FTVC5leHByKTpub2RlIHtcbiAgbGV0IGNvZGUgPSAnJztcbiAgY29uc3QgaG9sZXMgPSBbXTtcbiAgaWYoQlNMX0FTVC5pc0NhbGwoZSkpIHtcbiAgICBjb2RlID0gJygnO1xuICAgIGxldCBzdGFydCA9IGNvZGUubGVuZ3RoO1xuICAgIGNvZGUgPSBgJHtjb2RlfSR7QlNMX1ByaW50LnByaW50TmFtZShlLm5hbWUpfWA7XG4gICAgaG9sZXMucHVzaCh7c3RhcnQ6c3RhcnQsIGVuZDpjb2RlLmxlbmd0aCwgY29udGVudDpuYW1lVG9Ob2RlKGUubmFtZSl9KTtcblxuICAgIGNvZGUgPSBgJHtjb2RlfSBgO1xuICAgIHN0YXJ0ID0gY29kZS5sZW5ndGg7XG4gICAgY29kZSA9IGAke2NvZGV9JHtlLmFyZ3MubWFwKEJTTF9QcmludC5wcmludEUpLmpvaW4oJyAnKX1gO1xuICAgIGhvbGVzLnB1c2goe3N0YXJ0OnN0YXJ0LCBlbmQ6Y29kZS5sZW5ndGgsIGNvbnRlbnQ6ZVN0YXJUb05vZGUoZS5hcmdzKX0pO1xuXG4gICAgY29kZSA9IGAke2NvZGV9KWA7XG4gIH0gZWxzZSBpZiAoQlNMX0FTVC5pc0NvbmQoZSkpIHtcbiAgICBjb2RlID0gJyhjb25kICc7XG4gICAgbGV0IHN0YXJ0ID0gY29kZS5sZW5ndGg7XG4gICAgY29kZSA9IGAke2NvZGV9JHtlLm9wdGlvbnMubWFwKEJTTF9QcmludC5wcmludE9wdGlvbikuam9pbignICcpfWA7XG4gICAgaG9sZXMucHVzaCh7c3RhcnQ6c3RhcnQsIGVuZDpjb2RlLmxlbmd0aCwgY29udGVudDpvcHRpb25zVG9Ob2RlKGUub3B0aW9ucyl9KTtcbiAgICBjb2RlID0gYCR7Y29kZX0pYDtcbiAgfSBlbHNlIGlmIChCU0xfQVNULmlzTmFtZShlKSkge1xuICAgIGNvZGUgPSBCU0xfUHJpbnQucHJpbnROYW1lKGUpO1xuICAgIGhvbGVzLnB1c2goe3N0YXJ0OjAsIGVuZDpjb2RlLmxlbmd0aCwgY29udGVudDpuYW1lVG9Ob2RlKGUpfSk7XG4gIH0gZWxzZSB7XG4gICAgY29kZSA9IEJTTF9QcmludC5wcmludEUoZSk7XG4gICAgaG9sZXMucHVzaCh7c3RhcnQ6MCwgZW5kOmNvZGUubGVuZ3RoLCBjb250ZW50OmxpdGVyYWxUb05vZGUoZSl9KTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHByb2R1Y3Rpb246ICc8ZT4nLFxuICAgIGNvZGU6IGNvZGUsXG4gICAgaG9sZXM6IGhvbGVzXG4gIH07XG59XG5cbmZ1bmN0aW9uIG5hbWVUb05vZGUobjogQlNMX0FTVC5OYW1lKTpub2RlIHtcbiAgcmV0dXJuIHtcbiAgICBwcm9kdWN0aW9uOiAnPG5hbWU+JyxcbiAgICBjb2RlOiBCU0xfUHJpbnQucHJpbnROYW1lKG4pLFxuICAgIGhvbGVzOiBbXVxuICB9O1xufVxuXG5mdW5jdGlvbiBuYW1lUGx1c1RvTm9kZShuczogQlNMX0FTVC5OYW1lW10pOm5vZGUge1xuICBpZiAobnMubGVuZ3RoIDwgMSkgY29uc29sZS5lcnJvcignPG5hbWU+KyBidXQgdXNlZCBidXQgbmFtZXMgYXJlIGVtcHR5Jyk7XG4gIGxldCBjb2RlID0gJyc7XG4gIGNvbnN0IGhvbGVzID0gW107XG4gIGZvcihsZXQgaSA9IDA7IGkgPCBucy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHN0YXJ0ID0gY29kZS5sZW5ndGg7XG4gICAgY29kZSA9IGAke2NvZGV9JHtCU0xfUHJpbnQucHJpbnROYW1lKG5zW2ldKX1gO1xuICAgIGhvbGVzLnB1c2goe3N0YXJ0OnN0YXJ0LCBlbmQ6Y29kZS5sZW5ndGgsIGNvbnRlbnQ6bmFtZVRvTm9kZShuc1tpXSl9KTtcblxuICAgIGlmKGkgPCBucy5sZW5ndGggLSAxKSBjb2RlID0gYCR7Y29kZX0gYDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHByb2R1Y3Rpb246ICc8bmFtZT4rJyxcbiAgICBjb2RlOiBjb2RlLFxuICAgIGhvbGVzOiBob2xlc1xuICB9XG59XG5cbmZ1bmN0aW9uIG5hbWVTdGFyVG9Ob2RlKG5zOiBCU0xfQVNULk5hbWVbXSk6bm9kZSB7XG4gIGxldCBjb2RlID0gJyc7XG4gIGNvbnN0IGhvbGVzID0gW107XG4gIGZvcihsZXQgaSA9IDA7IGkgPCBucy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHN0YXJ0ID0gY29kZS5sZW5ndGg7XG4gICAgY29kZSA9IGAke2NvZGV9JHtCU0xfUHJpbnQucHJpbnROYW1lKG5zW2ldKX1gO1xuICAgIGhvbGVzLnB1c2goe3N0YXJ0OnN0YXJ0LCBlbmQ6Y29kZS5sZW5ndGgsIGNvbnRlbnQ6bmFtZVRvTm9kZShuc1tpXSl9KTtcblxuICAgIGlmKGkgPCBucy5sZW5ndGggLSAxKSBjb2RlID0gYCR7Y29kZX0gYDtcbiAgfVxuICByZXR1cm4ge1xuICAgIHByb2R1Y3Rpb246ICc8bmFtZT4qJyxcbiAgICBjb2RlOiBjb2RlLFxuICAgIGhvbGVzOiBob2xlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGVTdGFyVG9Ob2RlKGVzOiBCU0xfQVNULmV4cHJbXSk6bm9kZSB7XG4gIGxldCBjb2RlID0gJyc7XG4gIGNvbnN0IGhvbGVzID0gW107XG4gIGZvcihsZXQgaSA9IDA7IGkgPCBlcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHN0YXJ0ID0gY29kZS5sZW5ndGg7XG4gICAgY29kZSA9IGAke2NvZGV9JHtCU0xfUHJpbnQucHJpbnRFKGVzW2ldKX1gO1xuICAgIGhvbGVzLnB1c2goe3N0YXJ0OnN0YXJ0LCBlbmQ6Y29kZS5sZW5ndGgsIGNvbnRlbnQ6ZXhwVG9Ob2RlKGVzW2ldKX0pO1xuXG4gICAgaWYoaSA8IGVzLmxlbmd0aCAtIDEpIGNvZGUgPSBgJHtjb2RlfSBgO1xuICB9XG4gIHJldHVybiB7XG4gICAgcHJvZHVjdGlvbjogJzxlPionLFxuICAgIGNvZGU6IGNvZGUsXG4gICAgaG9sZXM6IGhvbGVzXG4gIH1cbn1cblxuZnVuY3Rpb24gb3B0aW9uc1RvTm9kZShvczogQlNMX0FTVC5DbGF1c2VbXSk6bm9kZSB7XG4gIGxldCBjb2RlID0gJyc7XG4gIGNvbnN0IGhvbGVzID0gW107XG4gIGZvcihsZXQgaSA9IDA7IGkgPCBvcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHN0YXJ0ID0gY29kZS5sZW5ndGg7XG4gICAgY29kZSA9IGAke2NvZGV9JHtCU0xfUHJpbnQucHJpbnRPcHRpb24ob3NbaV0pfWA7XG4gICAgaG9sZXMucHVzaCh7c3RhcnQ6c3RhcnQsIGVuZDpjb2RlLmxlbmd0aCwgY29udGVudDpvcHRpb25Ub05vZGUob3NbaV0pfSk7XG5cbiAgICBpZihpIDwgb3MubGVuZ3RoIC0gMSkgY29kZSA9IGAke2NvZGV9IGA7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwcm9kdWN0aW9uOiAne1sgPGU+IDxlPiBdfSsnLFxuICAgIGNvZGU6IGNvZGUsXG4gICAgaG9sZXM6IGhvbGVzXG4gIH1cbn1cblxuZnVuY3Rpb24gb3B0aW9uVG9Ob2RlKG86IEJTTF9BU1QuQ2xhdXNlKTpub2RlIHtcbiAgbGV0IGNvZGUgPSAnJztcbiAgY29uc3QgaG9sZXMgPSBbXTtcbiAgY29kZSA9IGAke2NvZGV9W2A7XG4gIGxldCBzdGFydCA9IGNvZGUubGVuZ3RoO1xuICBjb2RlID0gYCR7Y29kZX0ke0JTTF9QcmludC5wcmludEUoby5jb25kaXRpb24pfWA7XG4gIGhvbGVzLnB1c2goe3N0YXJ0OnN0YXJ0LCBlbmQ6Y29kZS5sZW5ndGgsIGNvbnRlbnQ6ZXhwVG9Ob2RlKG8uY29uZGl0aW9uKX0pO1xuXG4gIGNvZGUgPSBgJHtjb2RlfSBgO1xuICBzdGFydCA9IGNvZGUubGVuZ3RoO1xuICBjb2RlID0gYCR7Y29kZX0ke0JTTF9QcmludC5wcmludEUoby5yZXN1bHQpfWA7XG4gIGhvbGVzLnB1c2goe3N0YXJ0OnN0YXJ0LCBlbmQ6Y29kZS5sZW5ndGgsIGNvbnRlbnQ6ZXhwVG9Ob2RlKG8ucmVzdWx0KX0pO1xuXG4gIGNvZGUgPSBgJHtjb2RlfV1gO1xuXG4gIHJldHVybiB7XG4gICAgcHJvZHVjdGlvbjogJ1sgPGU+IDxlPiBdJyxcbiAgICBjb2RlOiBjb2RlLFxuICAgIGhvbGVzOiBob2xlc1xuICB9O1xuXG59XG5cbmZ1bmN0aW9uIGxpdGVyYWxUb05vZGUodjogQlNMX0FTVC5MaXRlcmFsKTpub2RlIHtcbiAgcmV0dXJuIHtcbiAgICBwcm9kdWN0aW9uOiAnPHY+JyxcbiAgICBjb2RlOiBCU0xfUHJpbnQucHJpbnRFKHYpLFxuICAgIGhvbGVzOiBbXVxuICB9XG59XG4iLCAiXG4vLyBHZW5lcmF0ZWQgYnkgcGVnZ3kgdi4gMS4yLjAgKHRzLXBlZ2pzIHBsdWdpbiB2LiAxLjIuMiApXG4vL1xuLy8gaHR0cHM6Ly9wZWdneWpzLm9yZy8gICBodHRwczovL2dpdGh1Yi5jb20vbWV0YWRldnByby90cy1wZWdqc1xuXG5leHBvcnQgaW50ZXJmYWNlIElGaWxlUG9zaXRpb24ge1xuICBvZmZzZXQ6IG51bWJlcjtcbiAgbGluZTogbnVtYmVyO1xuICBjb2x1bW46IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRmlsZVJhbmdlIHtcbiAgc3RhcnQ6IElGaWxlUG9zaXRpb247XG4gIGVuZDogSUZpbGVQb3NpdGlvbjtcbiAgc291cmNlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxpdGVyYWxFeHBlY3RhdGlvbiB7XG4gIHR5cGU6IFwibGl0ZXJhbFwiO1xuICB0ZXh0OiBzdHJpbmc7XG4gIGlnbm9yZUNhc2U6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNsYXNzUGFydHMgZXh0ZW5kcyBBcnJheTxzdHJpbmcgfCBJQ2xhc3NQYXJ0cz4ge31cblxuZXhwb3J0IGludGVyZmFjZSBJQ2xhc3NFeHBlY3RhdGlvbiB7XG4gIHR5cGU6IFwiY2xhc3NcIjtcbiAgcGFydHM6IElDbGFzc1BhcnRzO1xuICBpbnZlcnRlZDogYm9vbGVhbjtcbiAgaWdub3JlQ2FzZTogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQW55RXhwZWN0YXRpb24ge1xuICB0eXBlOiBcImFueVwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElFbmRFeHBlY3RhdGlvbiB7XG4gIHR5cGU6IFwiZW5kXCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU90aGVyRXhwZWN0YXRpb24ge1xuICB0eXBlOiBcIm90aGVyXCI7XG4gIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG59XG5cbmV4cG9ydCB0eXBlIEV4cGVjdGF0aW9uID0gSUxpdGVyYWxFeHBlY3RhdGlvbiB8IElDbGFzc0V4cGVjdGF0aW9uIHwgSUFueUV4cGVjdGF0aW9uIHwgSUVuZEV4cGVjdGF0aW9uIHwgSU90aGVyRXhwZWN0YXRpb247XG5cbmZ1bmN0aW9uIHBlZyRwYWRFbmQoc3RyOiBzdHJpbmcsIHRhcmdldExlbmd0aDogbnVtYmVyLCBwYWRTdHJpbmc6IHN0cmluZykge1xuICBwYWRTdHJpbmcgPSBwYWRTdHJpbmcgfHwgJyAnO1xuICBpZiAoc3RyLmxlbmd0aCA+IHRhcmdldExlbmd0aCkge1xuICAgIHJldHVybiBzdHI7XG4gIH1cbiAgdGFyZ2V0TGVuZ3RoIC09IHN0ci5sZW5ndGg7XG4gIHBhZFN0cmluZyArPSBwYWRTdHJpbmcucmVwZWF0KHRhcmdldExlbmd0aCk7XG4gIHJldHVybiBzdHIgKyBwYWRTdHJpbmcuc2xpY2UoMCwgdGFyZ2V0TGVuZ3RoKTtcbn1cblxuZXhwb3J0IGNsYXNzIFN5bnRheEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwdWJsaWMgc3RhdGljIGJ1aWxkTWVzc2FnZShleHBlY3RlZDogRXhwZWN0YXRpb25bXSwgZm91bmQ6IHN0cmluZyB8IG51bGwpIHtcbiAgICBmdW5jdGlvbiBoZXgoY2g6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gY2guY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXRlcmFsRXNjYXBlKHM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICByZXR1cm4gc1xuICAgICAgICAucmVwbGFjZSgvXFxcXC9nLCBcIlxcXFxcXFxcXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cIi9nLCAgXCJcXFxcXFxcIlwiKVxuICAgICAgICAucmVwbGFjZSgvXFwwL2csIFwiXFxcXDBcIilcbiAgICAgICAgLnJlcGxhY2UoL1xcdC9nLCBcIlxcXFx0XCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKVxuICAgICAgICAucmVwbGFjZSgvXFxyL2csIFwiXFxcXHJcIilcbiAgICAgICAgLnJlcGxhY2UoL1tcXHgwMC1cXHgwRl0vZywgICAgICAgICAgICAoY2gpID0+IFwiXFxcXHgwXCIgKyBoZXgoY2gpIClcbiAgICAgICAgLnJlcGxhY2UoL1tcXHgxMC1cXHgxRlxceDdGLVxceDlGXS9nLCAoY2gpID0+IFwiXFxcXHhcIiAgKyBoZXgoY2gpICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xhc3NFc2NhcGUoczogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgIHJldHVybiBzXG4gICAgICAgIC5yZXBsYWNlKC9cXFxcL2csIFwiXFxcXFxcXFxcIilcbiAgICAgICAgLnJlcGxhY2UoL1xcXS9nLCBcIlxcXFxdXCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXF4vZywgXCJcXFxcXlwiKVxuICAgICAgICAucmVwbGFjZSgvLS9nLCAgXCJcXFxcLVwiKVxuICAgICAgICAucmVwbGFjZSgvXFwwL2csIFwiXFxcXDBcIilcbiAgICAgICAgLnJlcGxhY2UoL1xcdC9nLCBcIlxcXFx0XCIpXG4gICAgICAgIC5yZXBsYWNlKC9cXG4vZywgXCJcXFxcblwiKVxuICAgICAgICAucmVwbGFjZSgvXFxyL2csIFwiXFxcXHJcIilcbiAgICAgICAgLnJlcGxhY2UoL1tcXHgwMC1cXHgwRl0vZywgICAgICAgICAgICAoY2gpID0+IFwiXFxcXHgwXCIgKyBoZXgoY2gpIClcbiAgICAgICAgLnJlcGxhY2UoL1tcXHgxMC1cXHgxRlxceDdGLVxceDlGXS9nLCAoY2gpID0+IFwiXFxcXHhcIiAgKyBoZXgoY2gpICk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVzY3JpYmVFeHBlY3RhdGlvbihleHBlY3RhdGlvbjogRXhwZWN0YXRpb24pIHtcbiAgICAgIHN3aXRjaCAoZXhwZWN0YXRpb24udHlwZSkge1xuICAgICAgICBjYXNlIFwibGl0ZXJhbFwiOlxuICAgICAgICAgIHJldHVybiBcIlxcXCJcIiArIGxpdGVyYWxFc2NhcGUoZXhwZWN0YXRpb24udGV4dCkgKyBcIlxcXCJcIjtcbiAgICAgICAgY2FzZSBcImNsYXNzXCI6XG4gICAgICAgICAgY29uc3QgZXNjYXBlZFBhcnRzID0gZXhwZWN0YXRpb24ucGFydHMubWFwKChwYXJ0KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXJ0KVxuICAgICAgICAgICAgICA/IGNsYXNzRXNjYXBlKHBhcnRbMF0gYXMgc3RyaW5nKSArIFwiLVwiICsgY2xhc3NFc2NhcGUocGFydFsxXSBhcyBzdHJpbmcpXG4gICAgICAgICAgICAgIDogY2xhc3NFc2NhcGUocGFydCk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gXCJbXCIgKyAoZXhwZWN0YXRpb24uaW52ZXJ0ZWQgPyBcIl5cIiA6IFwiXCIpICsgZXNjYXBlZFBhcnRzICsgXCJdXCI7XG4gICAgICAgIGNhc2UgXCJhbnlcIjpcbiAgICAgICAgICByZXR1cm4gXCJhbnkgY2hhcmFjdGVyXCI7XG4gICAgICAgIGNhc2UgXCJlbmRcIjpcbiAgICAgICAgICByZXR1cm4gXCJlbmQgb2YgaW5wdXRcIjtcbiAgICAgICAgY2FzZSBcIm90aGVyXCI6XG4gICAgICAgICAgcmV0dXJuIGV4cGVjdGF0aW9uLmRlc2NyaXB0aW9uO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc2NyaWJlRXhwZWN0ZWQoZXhwZWN0ZWQxOiBFeHBlY3RhdGlvbltdKSB7XG4gICAgICBjb25zdCBkZXNjcmlwdGlvbnMgPSBleHBlY3RlZDEubWFwKGRlc2NyaWJlRXhwZWN0YXRpb24pO1xuICAgICAgbGV0IGk6IG51bWJlcjtcbiAgICAgIGxldCBqOiBudW1iZXI7XG5cbiAgICAgIGRlc2NyaXB0aW9ucy5zb3J0KCk7XG5cbiAgICAgIGlmIChkZXNjcmlwdGlvbnMubGVuZ3RoID4gMCkge1xuICAgICAgICBmb3IgKGkgPSAxLCBqID0gMTsgaSA8IGRlc2NyaXB0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChkZXNjcmlwdGlvbnNbaSAtIDFdICE9PSBkZXNjcmlwdGlvbnNbaV0pIHtcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uc1tqXSA9IGRlc2NyaXB0aW9uc1tpXTtcbiAgICAgICAgICAgIGorKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVzY3JpcHRpb25zLmxlbmd0aCA9IGo7XG4gICAgICB9XG5cbiAgICAgIHN3aXRjaCAoZGVzY3JpcHRpb25zLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uc1swXTtcblxuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9uc1swXSArIFwiIG9yIFwiICsgZGVzY3JpcHRpb25zWzFdO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGRlc2NyaXB0aW9ucy5zbGljZSgwLCAtMSkuam9pbihcIiwgXCIpXG4gICAgICAgICAgICArIFwiLCBvciBcIlxuICAgICAgICAgICAgKyBkZXNjcmlwdGlvbnNbZGVzY3JpcHRpb25zLmxlbmd0aCAtIDFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlc2NyaWJlRm91bmQoZm91bmQxOiBzdHJpbmcgfCBudWxsKSB7XG4gICAgICByZXR1cm4gZm91bmQxID8gXCJcXFwiXCIgKyBsaXRlcmFsRXNjYXBlKGZvdW5kMSkgKyBcIlxcXCJcIiA6IFwiZW5kIG9mIGlucHV0XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIFwiRXhwZWN0ZWQgXCIgKyBkZXNjcmliZUV4cGVjdGVkKGV4cGVjdGVkKSArIFwiIGJ1dCBcIiArIGRlc2NyaWJlRm91bmQoZm91bmQpICsgXCIgZm91bmQuXCI7XG4gIH1cblxuICBwdWJsaWMgbWVzc2FnZTogc3RyaW5nO1xuICBwdWJsaWMgZXhwZWN0ZWQ6IEV4cGVjdGF0aW9uW107XG4gIHB1YmxpYyBmb3VuZDogc3RyaW5nIHwgbnVsbDtcbiAgcHVibGljIGxvY2F0aW9uOiBJRmlsZVJhbmdlO1xuICBwdWJsaWMgbmFtZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2U6IHN0cmluZywgZXhwZWN0ZWQ6IEV4cGVjdGF0aW9uW10sIGZvdW5kOiBzdHJpbmcgfCBudWxsLCBsb2NhdGlvbjogSUZpbGVSYW5nZSkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmV4cGVjdGVkID0gZXhwZWN0ZWQ7XG4gICAgdGhpcy5mb3VuZCA9IGZvdW5kO1xuICAgIHRoaXMubG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICB0aGlzLm5hbWUgPSBcIlN5bnRheEVycm9yXCI7XG5cbiAgICBpZiAodHlwZW9mIChPYmplY3QgYXMgYW55KS5zZXRQcm90b3R5cGVPZiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAoT2JqZWN0IGFzIGFueSkuc2V0UHJvdG90eXBlT2YodGhpcywgU3ludGF4RXJyb3IucHJvdG90eXBlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgKHRoaXMgYXMgYW55KS5fX3Byb3RvX18gPSBTeW50YXhFcnJvci5wcm90b3R5cGU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgKEVycm9yIGFzIGFueSkuY2FwdHVyZVN0YWNrVHJhY2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgKEVycm9yIGFzIGFueSkuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgU3ludGF4RXJyb3IpO1xuICAgIH1cbiAgfVxuXG4gIGZvcm1hdChzb3VyY2VzOiB7IHNvdXJjZTogc3RyaW5nOyB0ZXh0OiBzdHJpbmcgfVtdKTogc3RyaW5nIHtcbiAgICBsZXQgc3RyID0gJ0Vycm9yOiAnICsgdGhpcy5tZXNzYWdlO1xuICAgIGlmICh0aGlzLmxvY2F0aW9uKSB7XG4gICAgICBsZXQgc3JjOiBzdHJpbmdbXSB8IG51bGwgPSBudWxsO1xuICAgICAgbGV0IGs7XG4gICAgICBmb3IgKGsgPSAwOyBrIDwgc291cmNlcy5sZW5ndGg7IGsrKykge1xuICAgICAgICBpZiAoc291cmNlc1trXS5zb3VyY2UgPT09IHRoaXMubG9jYXRpb24uc291cmNlKSB7XG4gICAgICAgICAgc3JjID0gc291cmNlc1trXS50ZXh0LnNwbGl0KC9cXHJcXG58XFxufFxcci9nKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbGV0IHMgPSB0aGlzLmxvY2F0aW9uLnN0YXJ0O1xuICAgICAgbGV0IGxvYyA9IHRoaXMubG9jYXRpb24uc291cmNlICsgJzonICsgcy5saW5lICsgJzonICsgcy5jb2x1bW47XG4gICAgICBpZiAoc3JjKSB7XG4gICAgICAgIGxldCBlID0gdGhpcy5sb2NhdGlvbi5lbmQ7XG4gICAgICAgIGxldCBmaWxsZXIgPSBwZWckcGFkRW5kKCcnLCBzLmxpbmUudG9TdHJpbmcoKS5sZW5ndGgsICcgJyk7XG4gICAgICAgIGxldCBsaW5lID0gc3JjW3MubGluZSAtIDFdO1xuICAgICAgICBsZXQgbGFzdCA9IHMubGluZSA9PT0gZS5saW5lID8gZS5jb2x1bW4gOiBsaW5lLmxlbmd0aCArIDE7XG4gICAgICAgIHN0ciArPSAnXFxuIC0tPiAnICsgbG9jICsgJ1xcbicgKyBmaWxsZXIgKyAnIHxcXG4nICsgcy5saW5lICsgJyB8ICcgKyBsaW5lICsgJ1xcbicgKyBmaWxsZXIgKyAnIHwgJyArXG4gICAgICAgICAgcGVnJHBhZEVuZCgnJywgcy5jb2x1bW4gLSAxLCAnICcpICtcbiAgICAgICAgICBwZWckcGFkRW5kKCcnLCBsYXN0IC0gcy5jb2x1bW4sICdeJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgKz0gJ1xcbiBhdCAnICsgbG9jO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gc3RyO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBlZyRwYXJzZShpbnB1dDogc3RyaW5nLCBvcHRpb25zPzogSVBhcnNlT3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucyA6IHt9O1xuXG4gIGNvbnN0IHBlZyRGQUlMRUQ6IFJlYWRvbmx5PGFueT4gPSB7fTtcbiAgY29uc3QgcGVnJHNvdXJjZSA9IG9wdGlvbnMuZ3JhbW1hclNvdXJjZTtcblxuICBjb25zdCBwZWckc3RhcnRSdWxlRnVuY3Rpb25zOiB7W2lkOiBzdHJpbmddOiBhbnl9ID0geyBQcm9ncmFtOiBwZWckcGFyc2VQcm9ncmFtIH07XG4gIGxldCBwZWckc3RhcnRSdWxlRnVuY3Rpb246ICgpID0+IGFueSA9IHBlZyRwYXJzZVByb2dyYW07XG5cbiAgY29uc3QgcGVnJGMwID0gZnVuY3Rpb24oYWxsOiBhbnkpOiBhbnkgeyByZXR1cm4gYWxsIH07XG4gIGNvbnN0IHBlZyRjMSA9IC9eW1xcdCBcXG4gXFxyXS87XG4gIGNvbnN0IHBlZyRjMiA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtcIlxcdFwiLCBcIiBcIiwgXCJcXG5cIiwgXCIgXCIsIFwiXFxyXCJdLCBmYWxzZSwgZmFsc2UpO1xuICBjb25zdCBwZWckYzMgPSBmdW5jdGlvbihkZWY6IGFueSk6IGFueSB7IHJldHVybiBkZWYgfTtcbiAgY29uc3QgcGVnJGM0ID0gXCIoZGVmaW5lLXN0cnVjdFwiO1xuICBjb25zdCBwZWckYzUgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiKGRlZmluZS1zdHJ1Y3RcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzYgPSBcIihcIjtcbiAgY29uc3QgcGVnJGM3ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIihcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzggPSBcIilcIjtcbiAgY29uc3QgcGVnJGM5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIilcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzEwID0gZnVuY3Rpb24oYmluZGluZzogYW55LCBwcm9wZXJ0aWVzOiBhbnkpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBcInR5cGVcIjogXCJTdHJ1Y3QgRGVmaW5pdGlvblwiLFxuICAgIFx0XCJiaW5kaW5nXCI6IGJpbmRpbmcsXG4gICAgICBcInByb3BlcnRpZXNcIjogcHJvcGVydGllc1xuICAgICAgfVxuICAgIH07XG4gIGNvbnN0IHBlZyRjMTEgPSBcIihkZWZpbmVcIjtcbiAgY29uc3QgcGVnJGMxMiA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIoZGVmaW5lXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMxMyA9IGZ1bmN0aW9uKG5hbWU6IGFueSwgYXJnczogYW55LCBib2R5OiBhbnkpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBcInR5cGVcIjogXCJGdW5jdGlvbiBEZWZpbml0aW9uXCIsXG4gICAgXHRcIm5hbWVcIjogbmFtZSxcbiAgICAgIFwiYXJnc1wiOiBhcmdzLFxuICAgICAgXCJib2R5XCI6IGJvZHlcbiAgICAgIH1cbiAgICB9O1xuICBjb25zdCBwZWckYzE0ID0gZnVuY3Rpb24obmFtZTogYW55LCB2YWx1ZTogYW55KTogYW55IHtcbiAgICByZXR1cm4ge1xuICAgICAgXCJ0eXBlXCI6IFwiQ29uc3RhbnQgRGVmaW5pdGlvblwiLFxuICAgIFx0XCJuYW1lXCI6IG5hbWUsXG4gICAgICBcInZhbHVlXCI6IHZhbHVlXG4gICAgICB9XG4gICAgfTtcbiAgY29uc3QgcGVnJGMxNSA9IGZ1bmN0aW9uKGV4cHI6IGFueSk6IGFueSB7IHJldHVybiBleHByIH07XG4gIGNvbnN0IHBlZyRjMTYgPSBcIihjb25kXCI7XG4gIGNvbnN0IHBlZyRjMTcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiKGNvbmRcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzE4ID0gZnVuY3Rpb24ob3B0aW9uczogYW55KTogYW55IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFwidHlwZVwiOiBcIkNvbmQtRXhwcmVzc2lvblwiLFxuICAgICAgICBcIm9wdGlvbnNcIjogb3B0aW9uc1xuICAgICAgfVxuICAgIH07XG4gIGNvbnN0IHBlZyRjMTkgPSBcIltcIjtcbiAgY29uc3QgcGVnJGMyMCA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCJbXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyMSA9IFwiXVwiO1xuICBjb25zdCBwZWckYzIyID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIl1cIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzIzID0gZnVuY3Rpb24oY29uZGl0aW9uOiBhbnksIHJlc3VsdDogYW55KTogYW55IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFwidHlwZVwiOiBcIkNvbmQtT3B0aW9uXCIsXG4gICAgICAgIFwiY29uZGl0aW9uXCI6IGNvbmRpdGlvbixcbiAgICAgICAgXCJyZXN1bHRcIjpyZXN1bHRcbiAgICAgIH1cbiAgICB9O1xuICBjb25zdCBwZWckYzI0ID0gZnVuY3Rpb24obmFtZTogYW55LCBhcmdzOiBhbnkpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBcInR5cGVcIjogXCJGdW5jdGlvbiBDYWxsXCIsXG4gICAgICBcIm5hbWVcIjogbmFtZSxcbiAgICAgIFwiYXJnc1wiOiBhcmdzXG4gICAgICB9XG4gICAgfTtcbiAgY29uc3QgcGVnJGMyNSA9IFwiZGVmaW5lXCI7XG4gIGNvbnN0IHBlZyRjMjYgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiZGVmaW5lXCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGMyNyA9IC9eW15cIiwnYCgpW1xcXXt9fCNcXG5cXHRcXHIwLTkgXS87XG4gIGNvbnN0IHBlZyRjMjggPSBwZWckY2xhc3NFeHBlY3RhdGlvbihbXCJcXFwiXCIsIFwiLFwiLCBcIidcIiwgXCJgXCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIFwifFwiLCBcIiNcIiwgXCJcXG5cIiwgXCJcXHRcIiwgXCJcXHJcIiwgW1wiMFwiLCBcIjlcIl0sIFwiIFwiXSwgdHJ1ZSwgZmFsc2UpO1xuICBjb25zdCBwZWckYzI5ID0gZnVuY3Rpb24oc3ltYm9sOiBhbnkpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBcInR5cGVcIjogXCJTeW1ib2xcIixcbiAgICBcdFwic3ltYm9sXCI6c3ltYm9sLmpvaW4oXCJcIilcbiAgICAgIH1cbiAgICB9O1xuICBjb25zdCBwZWckYzMwID0gZnVuY3Rpb24odmFsOiBhbnkpOiBhbnkge1xuICAgIHJldHVybiB7XG4gICAgICBcInR5cGVcIjogXCJMaXRlcmFsIFZhbHVlXCIsXG4gICAgICBcInZhbHVlXCI6IHZhbFxuICAgICAgfVxuICAgIH07XG4gIGNvbnN0IHBlZyRjMzEgPSAvXlswLTldLztcbiAgY29uc3QgcGVnJGMzMiA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtbXCIwXCIsIFwiOVwiXV0sIGZhbHNlLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjMzMgPSBmdW5jdGlvbigpOiBhbnkge3JldHVybiBwYXJzZUludCh0ZXh0KCksIDEwKX07XG4gIGNvbnN0IHBlZyRjMzQgPSBcIiN0cnVlXCI7XG4gIGNvbnN0IHBlZyRjMzUgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiI3RydWVcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzM2ID0gXCIjZmFsc2VcIjtcbiAgY29uc3QgcGVnJGMzNyA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIjZmFsc2VcIiwgZmFsc2UpO1xuICBjb25zdCBwZWckYzM4ID0gXCIjdFwiO1xuICBjb25zdCBwZWckYzM5ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIiN0XCIsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGM0MCA9IFwiI2ZcIjtcbiAgY29uc3QgcGVnJGM0MSA9IHBlZyRsaXRlcmFsRXhwZWN0YXRpb24oXCIjZlwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDIgPSBmdW5jdGlvbihib29sOiBhbnkpOiBhbnkgeyByZXR1cm4gKGJvb2wgPT09IFwiI3RydWVcIiB8fCBib29sID09PSBcIiN0XCIpIH07XG4gIGNvbnN0IHBlZyRjNDMgPSBcIicoKVwiO1xuICBjb25zdCBwZWckYzQ0ID0gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbihcIicoKVwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDUgPSBmdW5jdGlvbigpOiBhbnkgeyByZXR1cm4gXCInKClcIiB9O1xuICBjb25zdCBwZWckYzQ2ID0gXCJcXFwiXCI7XG4gIGNvbnN0IHBlZyRjNDcgPSBwZWckbGl0ZXJhbEV4cGVjdGF0aW9uKFwiXFxcIlwiLCBmYWxzZSk7XG4gIGNvbnN0IHBlZyRjNDggPSAvXlteXCJdLztcbiAgY29uc3QgcGVnJGM0OSA9IHBlZyRjbGFzc0V4cGVjdGF0aW9uKFtcIlxcXCJcIl0sIHRydWUsIGZhbHNlKTtcbiAgY29uc3QgcGVnJGM1MCA9IGZ1bmN0aW9uKHN0cjogYW55KTogYW55IHsgcmV0dXJuIHN0ci5qb2luKFwiXCIpIH07XG4gIGNvbnN0IHBlZyRjNTEgPSBwZWckb3RoZXJFeHBlY3RhdGlvbihcIndoaXRlc3BhY2VcIik7XG4gIGNvbnN0IHBlZyRjNTIgPSBmdW5jdGlvbigpOiBhbnkge3JldHVybiB1bmRlZmluZWR9O1xuXG4gIGxldCBwZWckY3VyclBvcyA9IDA7XG4gIGxldCBwZWckc2F2ZWRQb3MgPSAwO1xuICBjb25zdCBwZWckcG9zRGV0YWlsc0NhY2hlID0gW3sgbGluZTogMSwgY29sdW1uOiAxIH1dO1xuICBsZXQgcGVnJG1heEZhaWxQb3MgPSAwO1xuICBsZXQgcGVnJG1heEZhaWxFeHBlY3RlZDogRXhwZWN0YXRpb25bXSA9IFtdO1xuICBsZXQgcGVnJHNpbGVudEZhaWxzID0gMDtcblxuICBsZXQgcGVnJHJlc3VsdDtcblxuICBpZiAob3B0aW9ucy5zdGFydFJ1bGUgIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICghKG9wdGlvbnMuc3RhcnRSdWxlIGluIHBlZyRzdGFydFJ1bGVGdW5jdGlvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDYW4ndCBzdGFydCBwYXJzaW5nIGZyb20gcnVsZSBcXFwiXCIgKyBvcHRpb25zLnN0YXJ0UnVsZSArIFwiXFxcIi5cIik7XG4gICAgfVxuXG4gICAgcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uID0gcGVnJHN0YXJ0UnVsZUZ1bmN0aW9uc1tvcHRpb25zLnN0YXJ0UnVsZV07XG4gIH1cblxuICBmdW5jdGlvbiB0ZXh0KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGlucHV0LnN1YnN0cmluZyhwZWckc2F2ZWRQb3MsIHBlZyRjdXJyUG9zKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxvY2F0aW9uKCk6IElGaWxlUmFuZ2Uge1xuICAgIHJldHVybiBwZWckY29tcHV0ZUxvY2F0aW9uKHBlZyRzYXZlZFBvcywgcGVnJGN1cnJQb3MpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXhwZWN0ZWQoZGVzY3JpcHRpb246IHN0cmluZywgbG9jYXRpb24xPzogSUZpbGVSYW5nZSkge1xuICAgIGxvY2F0aW9uMSA9IGxvY2F0aW9uMSAhPT0gdW5kZWZpbmVkXG4gICAgICA/IGxvY2F0aW9uMVxuICAgICAgOiBwZWckY29tcHV0ZUxvY2F0aW9uKHBlZyRzYXZlZFBvcywgcGVnJGN1cnJQb3MpO1xuXG4gICAgdGhyb3cgcGVnJGJ1aWxkU3RydWN0dXJlZEVycm9yKFxuICAgICAgW3BlZyRvdGhlckV4cGVjdGF0aW9uKGRlc2NyaXB0aW9uKV0sXG4gICAgICBpbnB1dC5zdWJzdHJpbmcocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyksXG4gICAgICBsb2NhdGlvbjFcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gZXJyb3IobWVzc2FnZTogc3RyaW5nLCBsb2NhdGlvbjE/OiBJRmlsZVJhbmdlKSB7XG4gICAgbG9jYXRpb24xID0gbG9jYXRpb24xICE9PSB1bmRlZmluZWRcbiAgICAgID8gbG9jYXRpb24xXG4gICAgICA6IHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJHNhdmVkUG9zLCBwZWckY3VyclBvcyk7XG5cbiAgICB0aHJvdyBwZWckYnVpbGRTaW1wbGVFcnJvcihtZXNzYWdlLCBsb2NhdGlvbjEpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGxpdGVyYWxFeHBlY3RhdGlvbih0ZXh0MTogc3RyaW5nLCBpZ25vcmVDYXNlOiBib29sZWFuKTogSUxpdGVyYWxFeHBlY3RhdGlvbiB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJsaXRlcmFsXCIsIHRleHQ6IHRleHQxLCBpZ25vcmVDYXNlOiBpZ25vcmVDYXNlIH07XG4gIH1cblxuICBmdW5jdGlvbiBwZWckY2xhc3NFeHBlY3RhdGlvbihwYXJ0czogSUNsYXNzUGFydHMsIGludmVydGVkOiBib29sZWFuLCBpZ25vcmVDYXNlOiBib29sZWFuKTogSUNsYXNzRXhwZWN0YXRpb24ge1xuICAgIHJldHVybiB7IHR5cGU6IFwiY2xhc3NcIiwgcGFydHM6IHBhcnRzLCBpbnZlcnRlZDogaW52ZXJ0ZWQsIGlnbm9yZUNhc2U6IGlnbm9yZUNhc2UgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRhbnlFeHBlY3RhdGlvbigpOiBJQW55RXhwZWN0YXRpb24ge1xuICAgIHJldHVybiB7IHR5cGU6IFwiYW55XCIgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRlbmRFeHBlY3RhdGlvbigpOiBJRW5kRXhwZWN0YXRpb24ge1xuICAgIHJldHVybiB7IHR5cGU6IFwiZW5kXCIgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRvdGhlckV4cGVjdGF0aW9uKGRlc2NyaXB0aW9uOiBzdHJpbmcpOiBJT3RoZXJFeHBlY3RhdGlvbiB7XG4gICAgcmV0dXJuIHsgdHlwZTogXCJvdGhlclwiLCBkZXNjcmlwdGlvbjogZGVzY3JpcHRpb24gfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRjb21wdXRlUG9zRGV0YWlscyhwb3M6IG51bWJlcikge1xuICAgIGxldCBkZXRhaWxzID0gcGVnJHBvc0RldGFpbHNDYWNoZVtwb3NdO1xuICAgIGxldCBwO1xuXG4gICAgaWYgKGRldGFpbHMpIHtcbiAgICAgIHJldHVybiBkZXRhaWxzO1xuICAgIH0gZWxzZSB7XG4gICAgICBwID0gcG9zIC0gMTtcbiAgICAgIHdoaWxlICghcGVnJHBvc0RldGFpbHNDYWNoZVtwXSkge1xuICAgICAgICBwLS07XG4gICAgICB9XG5cbiAgICAgIGRldGFpbHMgPSBwZWckcG9zRGV0YWlsc0NhY2hlW3BdO1xuICAgICAgZGV0YWlscyA9IHtcbiAgICAgICAgbGluZTogZGV0YWlscy5saW5lLFxuICAgICAgICBjb2x1bW46IGRldGFpbHMuY29sdW1uXG4gICAgICB9O1xuXG4gICAgICB3aGlsZSAocCA8IHBvcykge1xuICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwKSA9PT0gMTApIHtcbiAgICAgICAgICBkZXRhaWxzLmxpbmUrKztcbiAgICAgICAgICBkZXRhaWxzLmNvbHVtbiA9IDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGV0YWlscy5jb2x1bW4rKztcbiAgICAgICAgfVxuXG4gICAgICAgIHArKztcbiAgICAgIH1cblxuICAgICAgcGVnJHBvc0RldGFpbHNDYWNoZVtwb3NdID0gZGV0YWlscztcblxuICAgICAgcmV0dXJuIGRldGFpbHM7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcGVnJGNvbXB1dGVMb2NhdGlvbihzdGFydFBvczogbnVtYmVyLCBlbmRQb3M6IG51bWJlcik6IElGaWxlUmFuZ2Uge1xuICAgIGNvbnN0IHN0YXJ0UG9zRGV0YWlscyA9IHBlZyRjb21wdXRlUG9zRGV0YWlscyhzdGFydFBvcyk7XG4gICAgY29uc3QgZW5kUG9zRGV0YWlscyA9IHBlZyRjb21wdXRlUG9zRGV0YWlscyhlbmRQb3MpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHNvdXJjZTogcGVnJHNvdXJjZSxcbiAgICAgIHN0YXJ0OiB7XG4gICAgICAgIG9mZnNldDogc3RhcnRQb3MsXG4gICAgICAgIGxpbmU6IHN0YXJ0UG9zRGV0YWlscy5saW5lLFxuICAgICAgICBjb2x1bW46IHN0YXJ0UG9zRGV0YWlscy5jb2x1bW5cbiAgICAgIH0sXG4gICAgICBlbmQ6IHtcbiAgICAgICAgb2Zmc2V0OiBlbmRQb3MsXG4gICAgICAgIGxpbmU6IGVuZFBvc0RldGFpbHMubGluZSxcbiAgICAgICAgY29sdW1uOiBlbmRQb3NEZXRhaWxzLmNvbHVtblxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBwZWckZmFpbChleHBlY3RlZDE6IEV4cGVjdGF0aW9uKSB7XG4gICAgaWYgKHBlZyRjdXJyUG9zIDwgcGVnJG1heEZhaWxQb3MpIHsgcmV0dXJuOyB9XG5cbiAgICBpZiAocGVnJGN1cnJQb3MgPiBwZWckbWF4RmFpbFBvcykge1xuICAgICAgcGVnJG1heEZhaWxQb3MgPSBwZWckY3VyclBvcztcbiAgICAgIHBlZyRtYXhGYWlsRXhwZWN0ZWQgPSBbXTtcbiAgICB9XG5cbiAgICBwZWckbWF4RmFpbEV4cGVjdGVkLnB1c2goZXhwZWN0ZWQxKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRidWlsZFNpbXBsZUVycm9yKG1lc3NhZ2U6IHN0cmluZywgbG9jYXRpb24xOiBJRmlsZVJhbmdlKSB7XG4gICAgcmV0dXJuIG5ldyBTeW50YXhFcnJvcihtZXNzYWdlLCBbXSwgXCJcIiwgbG9jYXRpb24xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRidWlsZFN0cnVjdHVyZWRFcnJvcihleHBlY3RlZDE6IEV4cGVjdGF0aW9uW10sIGZvdW5kOiBzdHJpbmcgfCBudWxsLCBsb2NhdGlvbjE6IElGaWxlUmFuZ2UpIHtcbiAgICByZXR1cm4gbmV3IFN5bnRheEVycm9yKFxuICAgICAgU3ludGF4RXJyb3IuYnVpbGRNZXNzYWdlKGV4cGVjdGVkMSwgZm91bmQpLFxuICAgICAgZXhwZWN0ZWQxLFxuICAgICAgZm91bmQsXG4gICAgICBsb2NhdGlvbjFcbiAgICApO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlUHJvZ3JhbSgpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IFtdO1xuICAgIHMyID0gcGVnJHBhcnNlRGVmT3JFeHByKCk7XG4gICAgaWYgKHMyIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgd2hpbGUgKHMyIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMS5wdXNoKHMyKTtcbiAgICAgICAgczIgPSBwZWckcGFyc2VEZWZPckV4cHIoKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgIH1cbiAgICBpZiAoczEgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgIHMxID0gcGVnJGMwKHMxKTtcbiAgICB9XG4gICAgczAgPSBzMTtcblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZURlZk9yRXhwcigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMztcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VEZWZpbml0aW9uKCk7XG4gICAgaWYgKHMxIGFzIGFueSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEgPSBwZWckcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgfVxuICAgIGlmIChzMSBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMyID0gW107XG4gICAgICBpZiAocGVnJGMxLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgczMgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMik7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMyBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgd2hpbGUgKHMzIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgIGlmIChwZWckYzEudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgczMgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIpOyB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgICBpZiAoczIgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMChzMSk7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlRGVmaW5pdGlvbigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZV8oKTtcbiAgICBpZiAoczEgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZVN0cnVjdERlZigpO1xuICAgICAgaWYgKHMyIGFzIGFueSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHBlZyRwYXJzZUZ1bkRlZigpO1xuICAgICAgICBpZiAoczIgYXMgYW55ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczIgPSBwZWckcGFyc2VDb25zdERlZigpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMyhzMik7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlU3RydWN0RGVmKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNCwgczUsIHM2LCBzNywgczg7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDE0KSA9PT0gcGVnJGM0KSB7XG4gICAgICBzMSA9IHBlZyRjNDtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDE0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNSk7IH1cbiAgICB9XG4gICAgaWYgKHMxIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2VOYW1lKCk7XG4gICAgICBpZiAoczIgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlXygpO1xuICAgICAgICBpZiAoczMgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgICAgICAgczQgPSBwZWckYzY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNyk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM0IGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBbXTtcbiAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlTmFtZSgpO1xuICAgICAgICAgICAgaWYgKHM2IGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICB3aGlsZSAoczYgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgczUucHVzaChzNik7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckcGFyc2VOYW1lKCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHM1ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzNSBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICAgIHM2ID0gcGVnJGM4O1xuICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5KTsgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNiBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZV8oKTtcbiAgICAgICAgICAgICAgICBpZiAoczcgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQxKSB7XG4gICAgICAgICAgICAgICAgICAgIHM4ID0gcGVnJGM4O1xuICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgczggPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjOSk7IH1cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgIGlmIChzOCBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMxMChzMiwgczUpO1xuICAgICAgICAgICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZUZ1bkRlZigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczcsIHM4LCBzOTtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNykgPT09IHBlZyRjMTEpIHtcbiAgICAgIHMxID0gcGVnJGMxMTtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMik7IH1cbiAgICB9XG4gICAgaWYgKHMxIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2VfKCk7XG4gICAgICBpZiAoczIgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDApIHtcbiAgICAgICAgICBzMyA9IHBlZyRjNjtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNyk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczMgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2VOYW1lKCk7XG4gICAgICAgICAgaWYgKHM0IGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICBpZiAoczUgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM2ID0gW107XG4gICAgICAgICAgICAgIHM3ID0gcGVnJHBhcnNlTmFtZSgpO1xuICAgICAgICAgICAgICBpZiAoczcgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHM3IGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgICAgICAgczYucHVzaChzNyk7XG4gICAgICAgICAgICAgICAgICBzNyA9IHBlZyRwYXJzZU5hbWUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgczYgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmIChzNiBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQxKSB7XG4gICAgICAgICAgICAgICAgICBzNyA9IHBlZyRjODtcbiAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgIHM3ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5KTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczcgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBzOCA9IHBlZyRwYXJzZUV4cHJlc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgIGlmIChzOCBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgICAgICAgICAgIHM5ID0gcGVnJGM4O1xuICAgICAgICAgICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgczkgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5KTsgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChzOSBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgICBzMSA9IHBlZyRjMTMoczQsIHM2LCBzOCk7XG4gICAgICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZUNvbnN0RGVmKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNDtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNykgPT09IHBlZyRjMTEpIHtcbiAgICAgIHMxID0gcGVnJGMxMTtcbiAgICAgIHBlZyRjdXJyUG9zICs9IDc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMxID0gcGVnJEZBSUxFRDtcbiAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMxMik7IH1cbiAgICB9XG4gICAgaWYgKHMxIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2VOYW1lKCk7XG4gICAgICBpZiAoczIgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgICBpZiAoczMgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MSkge1xuICAgICAgICAgICAgczQgPSBwZWckYzg7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjOSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHM0IGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgICAgICBzMSA9IHBlZyRjMTQoczIsIHMzKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlRXhwcmVzc2lvbigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZV8oKTtcbiAgICBpZiAoczEgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRwYXJzZUNvbmQoKTtcbiAgICAgIGlmIChzMiBhcyBhbnkgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczIgPSBwZWckcGFyc2VDYWxsKCk7XG4gICAgICAgIGlmIChzMiBhcyBhbnkgPT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBzMiA9IHBlZyRwYXJzZU5hbWUoKTtcbiAgICAgICAgICBpZiAoczIgYXMgYW55ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBzMiA9IHBlZyRwYXJzZVZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjMTUoczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZUNvbmQoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA1KSA9PT0gcGVnJGMxNikge1xuICAgICAgczEgPSBwZWckYzE2O1xuICAgICAgcGVnJGN1cnJQb3MgKz0gNTtcbiAgICB9IGVsc2Uge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzE3KTsgfVxuICAgIH1cbiAgICBpZiAoczEgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgczMgPSBwZWckcGFyc2VPcHRpb24oKTtcbiAgICAgIGlmIChzMyBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgd2hpbGUgKHMzIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgIHMzID0gcGVnJHBhcnNlT3B0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMiBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgIGlmIChzMyBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDQxKSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRjODtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM5KTsgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoczQgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgIHMxID0gcGVnJGMxOChzMik7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZU9wdGlvbigpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyLCBzMywgczQsIHM1LCBzNiwgczc7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlXygpO1xuICAgIGlmIChzMSBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gOTEpIHtcbiAgICAgICAgczIgPSBwZWckYzE5O1xuICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjApOyB9XG4gICAgICB9XG4gICAgICBpZiAoczIgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gcGVnJHBhcnNlXygpO1xuICAgICAgICBpZiAoczMgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgICAgaWYgKHM0IGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgczUgPSBwZWckcGFyc2VfKCk7XG4gICAgICAgICAgICBpZiAoczUgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgIHM2ID0gcGVnJHBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgICAgICAgICBpZiAoczYgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA5Mykge1xuICAgICAgICAgICAgICAgICAgczcgPSBwZWckYzIxO1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgczcgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIyKTsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoczcgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMxID0gcGVnJGMyMyhzNCwgczYpO1xuICAgICAgICAgICAgICAgICAgczAgPSBzMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VDYWxsKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNDtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSA0MCkge1xuICAgICAgczEgPSBwZWckYzY7XG4gICAgICBwZWckY3VyclBvcysrO1xuICAgIH0gZWxzZSB7XG4gICAgICBzMSA9IHBlZyRGQUlMRUQ7XG4gICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNyk7IH1cbiAgICB9XG4gICAgaWYgKHMxIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgczIgPSBwZWckcGFyc2VOYW1lKCk7XG4gICAgICBpZiAoczIgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMzID0gW107XG4gICAgICAgIHM0ID0gcGVnJHBhcnNlRXhwcmVzc2lvbigpO1xuICAgICAgICB3aGlsZSAoczQgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgczMucHVzaChzNCk7XG4gICAgICAgICAgczQgPSBwZWckcGFyc2VFeHByZXNzaW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHMzIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIGlmIChpbnB1dC5jaGFyQ29kZUF0KHBlZyRjdXJyUG9zKSA9PT0gNDEpIHtcbiAgICAgICAgICAgIHM0ID0gcGVnJGM4O1xuICAgICAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgczQgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzkpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNCBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzI0KHMyLCBzMyk7XG4gICAgICAgICAgICBzMCA9IHMxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZU5hbWUoKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMiwgczMsIHM0O1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZV8oKTtcbiAgICBpZiAoczEgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IHBlZyRjdXJyUG9zO1xuICAgICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgICBpZiAoaW5wdXQuc3Vic3RyKHBlZyRjdXJyUG9zLCA2KSA9PT0gcGVnJGMyNSkge1xuICAgICAgICBzMyA9IHBlZyRjMjU7XG4gICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyNik7IH1cbiAgICAgIH1cbiAgICAgIHBlZyRzaWxlbnRGYWlscy0tO1xuICAgICAgaWYgKHMzIGFzIGFueSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBzMiA9IHVuZGVmaW5lZDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczI7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMiBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBbXTtcbiAgICAgICAgaWYgKHBlZyRjMjcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgIHM0ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMjgpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM0IGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHdoaWxlIChzNCBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgICAgaWYgKHBlZyRjMjcudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICBzNCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMyOCk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMyBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgICBzMSA9IHBlZyRjMjkoczMpO1xuICAgICAgICAgIHMwID0gczE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgIHMwID0gcGVnJEZBSUxFRDtcbiAgICB9XG5cbiAgICByZXR1cm4gczA7XG4gIH1cblxuICBmdW5jdGlvbiBwZWckcGFyc2VWYWx1ZSgpOiBhbnkge1xuICAgIGxldCBzMCwgczE7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlTnVtYmVyKCk7XG4gICAgaWYgKHMxIGFzIGFueSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEgPSBwZWckcGFyc2VCb29sZWFuKCk7XG4gICAgICBpZiAoczEgYXMgYW55ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHMxID0gcGVnJHBhcnNlRW1wdHkoKTtcbiAgICAgICAgaWYgKHMxIGFzIGFueSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMxID0gcGVnJHBhcnNlU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHMxIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICBzMSA9IHBlZyRjMzAoczEpO1xuICAgIH1cbiAgICBzMCA9IHMxO1xuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlTnVtYmVyKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzO1xuXG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IHBlZyRwYXJzZV8oKTtcbiAgICBpZiAoczEgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICBzMiA9IFtdO1xuICAgICAgaWYgKHBlZyRjMzEudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICBzMyA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMyA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMik7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMyBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgd2hpbGUgKHMzIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHMyLnB1c2goczMpO1xuICAgICAgICAgIGlmIChwZWckYzMxLnRlc3QoaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKSkpIHtcbiAgICAgICAgICAgIHMzID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMzID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzMik7IH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgIH1cbiAgICAgIGlmIChzMiBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgcGVnJHNhdmVkUG9zID0gczA7XG4gICAgICAgIHMxID0gcGVnJGMzMygpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZUJvb2xlYW4oKTogYW55IHtcbiAgICBsZXQgczAsIHMxLCBzMjtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VfKCk7XG4gICAgaWYgKHMxIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgNSkgPT09IHBlZyRjMzQpIHtcbiAgICAgICAgczIgPSBwZWckYzM0O1xuICAgICAgICBwZWckY3VyclBvcyArPSA1O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjMzUpOyB9XG4gICAgICB9XG4gICAgICBpZiAoczIgYXMgYW55ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDYpID09PSBwZWckYzM2KSB7XG4gICAgICAgICAgczIgPSBwZWckYzM2O1xuICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzNyk7IH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoczIgYXMgYW55ID09PSBwZWckRkFJTEVEKSB7XG4gICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjMzgpIHtcbiAgICAgICAgICAgIHMyID0gcGVnJGMzODtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zICs9IDI7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGMzOSk7IH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHMyIGFzIGFueSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgICAgaWYgKGlucHV0LnN1YnN0cihwZWckY3VyclBvcywgMikgPT09IHBlZyRjNDApIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckYzQwO1xuICAgICAgICAgICAgICBwZWckY3VyclBvcyArPSAyO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDEpOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoczIgYXMgYW55ICE9PSBwZWckRkFJTEVEKSB7XG4gICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICBzMSA9IHBlZyRjNDIoczIpO1xuICAgICAgICBzMCA9IHMxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGVnJGN1cnJQb3MgPSBzMDtcbiAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBlZyRwYXJzZUVtcHR5KCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczI7XG5cbiAgICBzMCA9IHBlZyRjdXJyUG9zO1xuICAgIHMxID0gcGVnJHBhcnNlXygpO1xuICAgIGlmIChzMSBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIGlmIChpbnB1dC5zdWJzdHIocGVnJGN1cnJQb3MsIDMpID09PSBwZWckYzQzKSB7XG4gICAgICAgIHMyID0gcGVnJGM0MztcbiAgICAgICAgcGVnJGN1cnJQb3MgKz0gMztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzQ0KTsgfVxuICAgICAgfVxuICAgICAgaWYgKHMyIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICBwZWckc2F2ZWRQb3MgPSBzMDtcbiAgICAgICAgczEgPSBwZWckYzQ1KCk7XG4gICAgICAgIHMwID0gczE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlU3RyaW5nKCk6IGFueSB7XG4gICAgbGV0IHMwLCBzMSwgczIsIHMzLCBzNDtcblxuICAgIHMwID0gcGVnJGN1cnJQb3M7XG4gICAgczEgPSBwZWckcGFyc2VfKCk7XG4gICAgaWYgKHMxIGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgaWYgKGlucHV0LmNoYXJDb2RlQXQocGVnJGN1cnJQb3MpID09PSAzNCkge1xuICAgICAgICBzMiA9IHBlZyRjNDY7XG4gICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzMiA9IHBlZyRGQUlMRUQ7XG4gICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0Nyk7IH1cbiAgICAgIH1cbiAgICAgIGlmIChzMiBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgczMgPSBbXTtcbiAgICAgICAgaWYgKHBlZyRjNDgudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgIHM0ID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHM0ID0gcGVnJEZBSUxFRDtcbiAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDkpOyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHM0IGFzIGFueSAhPT0gcGVnJEZBSUxFRCkge1xuICAgICAgICAgIHdoaWxlIChzNCBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHMzLnB1c2goczQpO1xuICAgICAgICAgICAgaWYgKHBlZyRjNDgudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgICAgICAgICBzNCA9IGlucHV0LmNoYXJBdChwZWckY3VyclBvcyk7XG4gICAgICAgICAgICAgIHBlZyRjdXJyUG9zKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICAgIGlmIChwZWckc2lsZW50RmFpbHMgPT09IDApIHsgcGVnJGZhaWwocGVnJGM0OSk7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgczMgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICAgIGlmIChzMyBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChwZWckY3VyclBvcykgPT09IDM0KSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRjNDY7XG4gICAgICAgICAgICBwZWckY3VyclBvcysrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzNCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgICBpZiAocGVnJHNpbGVudEZhaWxzID09PSAwKSB7IHBlZyRmYWlsKHBlZyRjNDcpOyB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzNCBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgICAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgICAgICAgczEgPSBwZWckYzUwKHMzKTtcbiAgICAgICAgICAgIHMwID0gczE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICAgICAgczAgPSBwZWckRkFJTEVEO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwZWckY3VyclBvcyA9IHMwO1xuICAgICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHBlZyRjdXJyUG9zID0gczA7XG4gICAgICBzMCA9IHBlZyRGQUlMRUQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHMwO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVnJHBhcnNlXygpOiBhbnkge1xuICAgIGxldCBzMCwgczEsIHMyO1xuXG4gICAgcGVnJHNpbGVudEZhaWxzKys7XG4gICAgczAgPSBwZWckY3VyclBvcztcbiAgICBzMSA9IFtdO1xuICAgIGlmIChwZWckYzEudGVzdChpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpKSkge1xuICAgICAgczIgPSBpbnB1dC5jaGFyQXQocGVnJGN1cnJQb3MpO1xuICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICB9IGVsc2Uge1xuICAgICAgczIgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIpOyB9XG4gICAgfVxuICAgIHdoaWxlIChzMiBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHMxLnB1c2goczIpO1xuICAgICAgaWYgKHBlZyRjMS50ZXN0KGlucHV0LmNoYXJBdChwZWckY3VyclBvcykpKSB7XG4gICAgICAgIHMyID0gaW5wdXQuY2hhckF0KHBlZyRjdXJyUG9zKTtcbiAgICAgICAgcGVnJGN1cnJQb3MrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHMyID0gcGVnJEZBSUxFRDtcbiAgICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzIpOyB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzMSBhcyBhbnkgIT09IHBlZyRGQUlMRUQpIHtcbiAgICAgIHBlZyRzYXZlZFBvcyA9IHMwO1xuICAgICAgczEgPSBwZWckYzUyKCk7XG4gICAgfVxuICAgIHMwID0gczE7XG4gICAgcGVnJHNpbGVudEZhaWxzLS07XG4gICAgaWYgKHMwIGFzIGFueSA9PT0gcGVnJEZBSUxFRCkge1xuICAgICAgczEgPSBwZWckRkFJTEVEO1xuICAgICAgaWYgKHBlZyRzaWxlbnRGYWlscyA9PT0gMCkgeyBwZWckZmFpbChwZWckYzUxKTsgfVxuICAgIH1cblxuICAgIHJldHVybiBzMDtcbiAgfVxuXG4gIHBlZyRyZXN1bHQgPSBwZWckc3RhcnRSdWxlRnVuY3Rpb24oKTtcblxuICBpZiAocGVnJHJlc3VsdCAhPT0gcGVnJEZBSUxFRCAmJiBwZWckY3VyclBvcyA9PT0gaW5wdXQubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHBlZyRyZXN1bHQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHBlZyRyZXN1bHQgIT09IHBlZyRGQUlMRUQgJiYgcGVnJGN1cnJQb3MgPCBpbnB1dC5sZW5ndGgpIHtcbiAgICAgIHBlZyRmYWlsKHBlZyRlbmRFeHBlY3RhdGlvbigpKTtcbiAgICB9XG5cbiAgICB0aHJvdyBwZWckYnVpbGRTdHJ1Y3R1cmVkRXJyb3IoXG4gICAgICBwZWckbWF4RmFpbEV4cGVjdGVkLFxuICAgICAgcGVnJG1heEZhaWxQb3MgPCBpbnB1dC5sZW5ndGggPyBpbnB1dC5jaGFyQXQocGVnJG1heEZhaWxQb3MpIDogbnVsbCxcbiAgICAgIHBlZyRtYXhGYWlsUG9zIDwgaW5wdXQubGVuZ3RoXG4gICAgICAgID8gcGVnJGNvbXB1dGVMb2NhdGlvbihwZWckbWF4RmFpbFBvcywgcGVnJG1heEZhaWxQb3MgKyAxKVxuICAgICAgICA6IHBlZyRjb21wdXRlTG9jYXRpb24ocGVnJG1heEZhaWxQb3MsIHBlZyRtYXhGYWlsUG9zKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJUGFyc2VPcHRpb25zIHtcbiAgZmlsZW5hbWU/OiBzdHJpbmc7XG4gIHN0YXJ0UnVsZT86IHN0cmluZztcbiAgdHJhY2VyPzogYW55O1xuICBba2V5OiBzdHJpbmddOiBhbnk7XG59XG5leHBvcnQgdHlwZSBQYXJzZUZ1bmN0aW9uID0gKGlucHV0OiBzdHJpbmcsIG9wdGlvbnM/OiBJUGFyc2VPcHRpb25zKSA9PiBhbnk7XG5leHBvcnQgY29uc3QgcGFyc2U6IFBhcnNlRnVuY3Rpb24gPSBwZWckcGFyc2U7XG4iLCAiaW1wb3J0ICogYXMgQlNMX0FTVCBmcm9tICcuL0JTTF9BU1QnO1xuaW1wb3J0ICogYXMgQlNMX1RyZWUgZnJvbSAnLi9CU0xfVHJlZSc7XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJy4vQlNMX1BhcnNlcic7XG5cbi8vIGFkZCBjc3NcbmltcG9ydCB7ZGVmYXVsdCBhcyB0cmVlfSBmcm9tICcuL3Jlc3NvdXJjZXMvdHJlZS5jc3MnO1xuaW1wb3J0IHtkZWZhdWx0IGFzIGVycm9yfSBmcm9tICcuL3Jlc3NvdXJjZXMvZXJyb3IuY3NzJztcblxuY29uc3Qgc3R5bGVOb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcbnN0eWxlTm9kZS5pbm5lckhUTUwgPSB0cmVlO1xuc3R5bGVOb2RlLmlubmVySFRNTCArPSBlcnJvcjtcbmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc3R5bGVOb2RlKTtcblxuLy8gcGFyc2UgYW5kIHByaW50IGJzbCB0cmVlc1xuZnVuY3Rpb24gcHJvY2Vzc0JzbFRyZWVzKCkge1xuICBBcnJheS5mcm9tKGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdic2x0cmVlJykpLm1hcChlbCA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHByb2dyYW0gOiBCU0xfQVNULnByb2dyYW0gPSBwYXJzZShCU0xfVHJlZS5kaXJ0aWZ5KGVsLmlubmVySFRNTCkpO1xuICAgICAgY29uc3QgcXVpeiA9IGVsLmdldEF0dHJpYnV0ZSgncXVpeicpID09PSAndHJ1ZScgPyB0cnVlIDogZmFsc2U7XG4gICAgICBjb25zdCBsYW5nID0gKGVsLmdldEF0dHJpYnV0ZSgnbGFuZycpID8gZWwuZ2V0QXR0cmlidXRlKCdsYW5nJykgOiB1bmRlZmluZWQpIGFzIHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgICAgIEJTTF9UcmVlLnRyZWVQcm9ncmFtKHByb2dyYW0sIGVsIGFzIEhUTUxFbGVtZW50LCBxdWl6LCBsYW5nKTtcbiAgICB9IGNhdGNoKGU6YW55KSB7XG4gICAgICByZW5kZXJFcnJvcihlbCBhcyBIVE1MRWxlbWVudCwgYCR7ZS5sb2NhdGlvbi5zdGFydC5saW5lfToke2UubG9jYXRpb24uc3RhcnQuY29sdW1ufSAke2V9YCk7XG4gICAgfVxuICB9KTtcbn1cblxuLy8gc2V0dXAgY2FsbGJhY2tzXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xuICBwcm9jZXNzQnNsVHJlZXMoKTtcbn1cblxuLy8gZXJyb3IgUmVuZGVyIEZ1bmN0aW9uXG5cbmZ1bmN0aW9uIHJlbmRlckVycm9yKGVsOiBIVE1MRWxlbWVudCwgZXJyb3I6c3RyaW5nKXtcbiAgY29uc3Qgb3JpZ2luID0gZWwuaW5uZXJIVE1MO1xuICBlbC5pbm5lckhUTUwgPVwiXCI7XG4gIC8vY3JlYXRlIGVycm9yLXdyYXBwZXJcbiAgY29uc3QgZXJyb3JXcmFwcGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGVycm9yV3JhcHBlci5jbGFzc0xpc3QuYWRkKCdlcnJvci13cmFwcGVyJyk7XG4gIGVsLmFwcGVuZENoaWxkKGVycm9yV3JhcHBlcik7XG4gIC8vY3JlYXRlIG9yaWdpbkRpdlxuICBjb25zdCBtZXNzYWdlID1gPHA+IEJTTC1UcmVlIGNvdWxkIG5vdCBiZSBwYXJzZWQhIDwvcD5cbiAgICAgICAgICAgICAgICAgIDxwPiBJbnB1dDogPGIgc3R5bGU9XCJmb250LXNpemU6MC45ZW07XCI+JHtvcmlnaW59PC9iPiA8L3A+YDtcbiAgY29uc3Qgb3JpZ2luRGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIG9yaWdpbkRpdi5jbGFzc0xpc3QuYWRkKCdvcmlnaW4nKTtcbiAgb3JpZ2luRGl2LmlubmVySFRNTCA9IG1lc3NhZ2U7XG4gIGVycm9yV3JhcHBlci5hcHBlbmRDaGlsZChvcmlnaW5EaXYpO1xuICAvL0NyZWF0ZSBlcnJQcmVcbiAgY29uc3QgZXJyUHJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncHJlJyk7XG4gIGVyclByZS5jbGFzc0xpc3QuYWRkKCdlcnJvcicpO1xuICBjb25zdCBlcnJDb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY29kZScpO1xuICBlcnJDb2RlLnRleHRDb250ZW50ID0gZXJyb3I7XG4gIGVycm9yV3JhcHBlci5hcHBlbmRDaGlsZChlcnJQcmUpO1xuICBlcnJQcmUuYXBwZW5kQ2hpbGQoZXJyQ29kZSk7XG59XG4iXSwKICAibWFwcGluZ3MiOiAiNFdBMERPLFdBQXNCLEVBQTZCLENBQ3hELE1BQU8sR0FBUyxD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Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VDdHpDcEMsR0FBTSxJQUFZLFNBQVMsY0FBYyxPQUFPLEVBQ2hELEdBQVUsVUFBWSxHQUN0QixHQUFVLFdBQWEsR0FDdkIsU0FBUyxxQkFBcUIsTUFBTSxFQUFFLEdBQUcsWUFBWSxFQUFTLEVBRzlELGFBQTJCLENBQ3pCLE1BQU0sS0FBSyxTQUFTLHFCQUFxQixTQUFTLENBQUMsRUFBRSxJQUFJLEdBQU0sQ0FDN0QsR0FBSSxDQUNGLEdBQU0sR0FBNEIsR0FBTSxBQUFTLEdBQVEsRUFBRyxTQUFTLENBQUMsRUFDaEUsRUFBTyxFQUFHLGFBQWEsTUFBTSxJQUFNLE9BQ25DLEVBQVEsRUFBRyxhQUFhLE1BQU0sRUFBSSxFQUFHLGFBQWEsTUFBTSxFQUFJLE9BQ2xFLEFBQVMsR0FBWSxFQUFTLEVBQW1CLEVBQU0sQ0FBSSxDQUM3RCxPQUFRLEVBQU4sQ0FDQSxHQUFZLEVBQW1CLEdBQUcsRUFBRSxTQUFTLE1BQU0sUUFBUSxFQUFFLFNBQVMsTUFBTSxVQUFVLEdBQUcsQ0FDM0YsQ0FDRixDQUFDLENBQ0gsQ0FHQSxPQUFPLE9BQVMsSUFBTSxDQUNwQixHQUFnQixDQUNsQixFQUlBLFlBQXFCLEVBQWlCLEVBQWEsQ0FDakQsR0FBTSxHQUFTLEVBQUcsVUFDbEIsRUFBRyxVQUFXLEdBRWQsR0FBTSxHQUFlLFNBQVMsY0FBYyxLQUFLLEVBQ2pELEVBQWEsVUFBVSxJQUFJLGVBQWUsRUFDMUMsRUFBRyxZQUFZLENBQVksRUFFM0IsR0FBTSxHQUFTO0FBQUEsMkRBQzBDLGFBQ25ELEVBQVksU0FBUyxjQUFjLEtBQUssRUFDOUMsRUFBVSxVQUFVLElBQUksUUFBUSxFQUNoQyxFQUFVLFVBQVksRUFDdEIsRUFBYSxZQUFZLENBQVMsRUFFbEMsR0FBTSxHQUFTLFNBQVMsY0FBYyxLQUFLLEVBQzNDLEVBQU8sVUFBVSxJQUFJLE9BQU8sRUFDNUIsR0FBTSxHQUFVLFNBQVMsY0FBYyxNQUFNLEVBQzdDLEVBQVEsWUFBYyxFQUN0QixFQUFhLFlBQVksQ0FBTSxFQUMvQixFQUFPLFlBQVksQ0FBTyxDQUM1QiIsCiAgIm5hbWVzIjogW10KfQo=
